<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2020-10-18 -->

<plugin>
  <name>CZT GnAST Maven Plugin</name>
  <description>Maven plug-in for CZT GnAST generator. Generates AST classes from XML schema files.</description>
  <groupId>net.sourceforge.czt.dev</groupId>
  <artifactId>gnast-maven-plugin</artifactId>
  <version>1.6-cdh</version>
  <goalPrefix>gnast</goalPrefix>
  <mojos>
    <mojo>
      <goal>generate</goal>
      <description>Goal which generates AST classes from XML Schema files using GnAST.
The source XML Schema files can be provided by indicating a source directory or explicitly listing the paths.

The template and schema paths can be indicated as filesystem paths, URLs, or classpath resources. Refer to Plexus ResourceManager for more details.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>net.sourceforge.czt.gnast.maven.GnastGenerateMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addAstFinaliser</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add AST finalisers to count finalised AST objects (e.g. for metrics)</description>
        </parameter>
        <parameter>
          <name>mappingFileLocation</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file defining mappings between XML Schema types and Java types. Follows Java Properties file format, e.g. anyURI = String.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where GnAST should generate AST files.</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where all XML schema source files are located.
At least one of sourceDirectory or sourceSchemas must be set to find the schemas.
</description>
        </parameter>
        <parameter>
          <name>sourceSchemas</name>
          <alias>schemaLocation</alias>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>An explicit list of XML schema source files to use in generation.
Potential values are a filesystem path, a URL, or a classpath resource. This parameter is resolved as resource, URL, then file.

At least one of sourceDirectory or sourceSchemas must be set to find the schemas.
</description>
        </parameter>
        <parameter>
          <name>targetNamespace</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The namespace (as indicated in XML Schema file) to generate AST files for.</description>
        </parameter>
        <parameter>
          <name>templates</name>
          <alias>templateDirectory</alias>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>The list of Velocity template directory paths.
The files in template paths can be used in GnAST Velocity templates to drive AST generation.

Potential values are filesystem paths, URLs, or classpath resources. This parameter is resolved as resource, URL, then file.
</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets whether the plugin runs in verbose mode.</description>
        </parameter>
      </parameters>
      <configuration>
        <addAstFinaliser implementation="java.lang.Boolean">${gnast.addAstFinaliser}</addAstFinaliser>
        <mappingFileLocation implementation="java.lang.String" default-value="mapping.properties">${gnast.mappingFileLocation}</mappingFileLocation>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/gnast">${gnast.outputDirectory}</outputDirectory>
        <sourceDirectory implementation="java.io.File">${gnast.sourceDirectory}</sourceDirectory>
        <targetNamespace implementation="java.lang.String">${gnast.targetNamespace}</targetNamespace>
        <verbose implementation="boolean" default-value="false">${gnast.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>rulecodegen</goal>
      <description>Goal which generates CZT Rules prover classes from XML Schema file.
The template and schema paths can be indicated as filesystem paths, URLs, or classpath resources. Refer to Plexus ResourceManager for more details.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>net.sourceforge.czt.rules.codegen.GnastRuleCodegenMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where GnAST should generate Rule files.</description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of package to place generated rule files in.</description>
        </parameter>
        <parameter>
          <name>sourceSchemaLocation</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The path of XML Schema source file used in generation.
Potential values are a filesystem path, a URL, or a classpath resource. This parameter is resolved as resource, URL, then file.
</description>
        </parameter>
        <parameter>
          <name>templateDirectory</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The path to Velocity templates directory, used in rule generation.
Potential values are a filesystem path, URL, or a classpath resource. This parameter is resolved as resource, URL, then file.
</description>
        </parameter>
      </parameters>
      <configuration>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/gnast">${gnast.rules.outputDirectory}</outputDirectory>
        <packageName implementation="java.lang.String" default-value="">${gnast.rules.packageName}</packageName>
        <sourceSchemaLocation implementation="java.lang.String">${gnast.rules.sourceSchemaLocation}</sourceSchemaLocation>
        <templateDirectory implementation="java.lang.String" default-value="${project.basedir}/src/main/resources/vm/gnast/">${gnast.rules.templateDirectory}</templateDirectory>
      </configuration>
    </mojo>
  </mojos>
</plugin>