<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2020-10-18 -->

<plugin>
  <name>CZT Parser Generator Maven Plugin</name>
  <description>CZT parser source generator Maven plugin. Transforms XML parser source templates to produce source files for CZT parsers: e.g. Java, CUP or JFlex sources.</description>
  <groupId>net.sourceforge.czt.dev</groupId>
  <artifactId>parsergen-maven-plugin</artifactId>
  <version>1.6-cdh</version>
  <goalPrefix>parsergen</goalPrefix>
  <mojos>
    <mojo>
      <goal>generate</goal>
      <description>Goal which generates source files for different CZT parser generators by splitting the corresponding XML definition files.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>net.sourceforge.czt.parsergen.maven.ParserGenMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>addNodes</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The parts of XML templates that will constitute the generated files.
Comma-separated list of add: nodes, e.g. to use content of &lt;add:zeves&gt;..&lt;/add:zeves&gt;, use zeves here.
</description>
        </parameter>
        <parameter>
          <name>className</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The explicit class name of generated file.
If not set, the generated file will match source template file name.
</description>
        </parameter>
        <parameter>
          <name>compileSource</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add the output directory as compile source to the Maven project.
Use this when generating Java files using ParserGen.
</description>
        </parameter>
        <parameter>
          <name>fileExtension</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The file extension of generated files. It will be used instead of *.xml of source file.
Use this parameter to indicate whether it is Java, CUP, JFlex or other file being generated.
</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where ParserGen should place the generated files.</description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The package name for generated files: the files are nested in directory matching the parser and the package property is used for XML transformer.</description>
        </parameter>
        <parameter>
          <name>templates</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>The list of ParserGen XML template directory paths.
The files in template paths are sources from which files are generated.

Potential values are filesystem paths, URLs, or classpath resources. This parameter is resolved as resource, URL, then file.
</description>
        </parameter>
      </parameters>
      <configuration>
        <addNodes implementation="java.lang.String">${parsergen.addNodes}</addNodes>
        <className implementation="java.lang.String">${parsergen.className}</className>
        <compileSource implementation="boolean" default-value="false">${parsergen.compileSource}</compileSource>
        <fileExtension implementation="java.lang.String">${parsergen.fileExtension}</fileExtension>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/parsergen">${parsergen.outputDirectory}</outputDirectory>
        <packageName implementation="java.lang.String">${parsergen.packageName}</packageName>
      </configuration>
    </mojo>
  </mojos>
</plugin>