<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.2 on 2020-10-18 -->

<plugin>
  <name>Java CUP Maven Plugin</name>
  <description>Maven plugin for Java CUP parser generator. Uses CUP 0.11a (with CZT updates). Generated parsers need corresponding java-cup-runtime dependency to compile: net.sourceforge.czt.dev:java-cup-runtime:0.11-a-czt01.</description>
  <groupId>net.sourceforge.czt.dev</groupId>
  <artifactId>cup-maven-plugin</artifactId>
  <version>1.6-cdh</version>
  <goalPrefix>cup</goalPrefix>
  <mojos>
    <mojo>
      <goal>generate</goal>
      <description>Goal which generates parser source files from the given CUP parser specifications (*.cup).
Can be configured using all standalone CUP parser generator options.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>net.sourceforge.czt.cup.maven.CupGenerateMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>className</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generated parser class name.
Output parser and action code into a file (and class) with the given name. If not given, CUP file name will be used as the class name.
</description>
        </parameter>
        <parameter>
          <name>compactRed</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Including this option enables a table compaction optimization involving reductions. In particular, it allows the most common reduce entry in each row of the parse action table to be used as the default for that row. This typically saves considerable room in the tables, which can grow to be very large. This optimization has the effect of replacing all error entries in a row with the default reduce entry. While this may sound dangerous, if not down right incorrect, it turns out that this does not affect the correctness of the parser. In particular, some changes of this type are inherent in LALR parsers (when compared to canonical LR parsers), and the resulting parsers will still never read past the first token at which the error could be detected. The parser can, however, make extra erroneous reduces before detecting the error, so this can degrade the parser&apos;s ability to do error recovery. (Refer to reference [2] pp. 244-247 or reference [3] pp. 190-194 for a complete explanation of this compaction technique.)
This option is typically used to work-around the java bytecode limitations on table initialization code sizes. However, CUP 0.10h introduced a string-encoding for the parser tables which is not subject to the standard method-size limitations. Consequently, use of this option should no longer be required for large grammars.
</description>
        </parameter>
        <parameter>
          <name>debug</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output internal debugging information about the system as it runs.</description>
        </parameter>
        <parameter>
          <name>dumpGrammar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output a human readable dump of the grammar.</description>
        </parameter>
        <parameter>
          <name>dumpStates</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output a human readable dump of the constructed parse states (often needed to resolve parse conflicts).</description>
        </parameter>
        <parameter>
          <name>dumpTables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output a human readable dump of the parse tables (rarely needed).</description>
        </parameter>
        <parameter>
          <name>expectedConflicts</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>During parser construction the system may detect that an ambiguous situation would occur at runtime. This is called a conflict. In general, the parser may be unable to decide whether to shift (read another symbol) or reduce (replace the recognized right hand side of a production with its left hand side). This is called a shift/reduce conflict. Similarly, the parser may not be able to decide between reduction with two different productions. This is called a reduce/reduce conflict. Normally, if one or more of these conflicts occur, parser generation is aborted. However, in certain carefully considered cases it may be advantageous to arbitrarily break such a conflict. In this case CUP uses YACC convention and resolves shift/reduce conflicts by shifting, and reduce/reduce conflicts using the &apos;highest priority&apos; production (the one declared first in the specification). In order to enable automatic breaking of conflicts the -expect option must be given indicating exactly how many conflicts are expected. Conflicts resolved by precedences and associativities are not reported.</description>
        </parameter>
        <parameter>
          <name>externalTables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output parser tables to external files.
The external parser tables are normally encoded in the generated parser file. This option allows outputting them to an external file, which is loaded by the generated parser during runtime. The files are named as the parser tables, e.g. &apos;action_table.dat&apos;.

If the parser tables are too large, they are always written to an external file, despite this option here. This is to avoid &apos;code too large&apos; Java compilation errors, caused by the initialisation code (the parser table String) being too large. This option allows outputting all tables to external files, thus minimising parser class footprint.
</description>
        </parameter>
        <parameter>
          <name>nontermsToSymbols</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Place constants for non-terminals into the symbol constant class. The parser does not need these symbol constants, so they are not normally output. However, it can be very helpful to refer to these constants when debugging a generated parser.</description>
        </parameter>
        <parameter>
          <name>noPositions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Do not generate code to propagate the left and right hand values of terminals to non-terminals, and then from non-terminals to other terminals. If the left and right values aren&apos;t going to be used by the parser, then it will save some runtime computation to not generate these position propagations. This option also keeps the left and right label variables from being generated, so any reference to these will cause an error.</description>
        </parameter>
        <parameter>
          <name>noScanner</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress Scanner references.
CUP 0.10j introduced improved scanner integration and a new interface, Scanner. By default, the generated parser refers to this interface, which means you cannot use these parsers with CUP runtimes older than 0.10j. If your parser does not use the new scanner integration features, then you may suppress the Scanner references and allow compatibility with old runtimes. Not many people should have reason to do this.
</description>
        </parameter>
        <parameter>
          <name>noSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress printing a summary listing such things as the number of terminals, non-terminals, parse states, etc. at the end of the generation.</description>
        </parameter>
        <parameter>
          <name>noWarn</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress all warning messages (as opposed to error messages) produced by the system.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory where CUP should generate parser and symbol files.</description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Package name.
Specify that the parser and sym classes are to be placed in the named package. By default, no package specification is put in the generated code (hence the classes default to the special &apos;unnamed&apos; package).
</description>
        </parameter>
        <parameter>
          <name>showProgress</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Print short messages indicating progress through various parts of the parser generation process.</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing CUP specification files (*.cup).</description>
        </parameter>
        <parameter>
          <name>suppressGeneratedJavaWarningsUnchecked</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress Java warnings in parser generated code locally when needed.
CUP produces generic Java code, some of which doesn&apos;t get used. For instance, the left/right integer location information for every terminal in productions are always generated, even if they are never used. This creates a series of unused warnings that need removing. Another example is when some of the terminal symbols contain elements with generic types. This creates unchecked warnings at various places where such generic non-terminal types appear. At this stage it is needed to add an unchecked cast warning suppression.

By default this flag is false, and all warnings are added. If set to true, our specific warning suppression is added instead. Warning suppression is added locally, so as to not hide any dead code or unchecked warning from user code. This is a local warning suppression.
</description>
        </parameter>
        <parameter>
          <name>suppressGeneratedJavaWarningsUnused</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Suppress Java warnings in parser generated code globally.
Suppress any unused code warnings from CUP action class globally. TODO: make it local to each left/right assignment eventually
</description>
        </parameter>
        <parameter>
          <name>symbolsInterface</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Outputs the symbol constant code as an interface rather than as a class.</description>
        </parameter>
        <parameter>
          <name>symbolsName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generated symbols class name.
Output the symbol constant code into a class with the given name instead of the default of &apos;Sym&apos;.
</description>
        </parameter>
        <parameter>
          <name>timeSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add detailed timing statistics to the normal summary of results.</description>
        </parameter>
        <parameter>
          <name>typeArgs</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify type arguments for parser class.</description>
        </parameter>
      </parameters>
      <configuration>
        <className implementation="java.lang.String">${cup.className}</className>
        <compactRed implementation="boolean" default-value="false">${cup.compactRed}</compactRed>
        <debug implementation="boolean" default-value="false">${cup.debug}</debug>
        <dumpGrammar implementation="boolean" default-value="false">${cup.dumpGrammar}</dumpGrammar>
        <dumpStates implementation="boolean" default-value="false">${cup.dumpStates}</dumpStates>
        <dumpTables implementation="boolean" default-value="false">${cup.dumpTables}</dumpTables>
        <expectedConflicts implementation="int" default-value="0">${cup.expectedConflicts}</expectedConflicts>
        <externalTables implementation="boolean" default-value="false">${cup.externalTables}</externalTables>
        <nontermsToSymbols implementation="boolean" default-value="false">${cup.nontermsToSymbols}</nontermsToSymbols>
        <noPositions implementation="boolean" default-value="false">${cup.noPositions}</noPositions>
        <noScanner implementation="boolean" default-value="false">${cup.noScanner}</noScanner>
        <noSummary implementation="boolean" default-value="false">${cup.noSummary}</noSummary>
        <noWarn implementation="boolean" default-value="false">${cup.noWarn}</noWarn>
        <outputDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/cup">${cup.outputDirectory}</outputDirectory>
        <packageName implementation="java.lang.String">${cup.packageName}</packageName>
        <showProgress implementation="boolean" default-value="false">${cup.showProgress}</showProgress>
        <sourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/cup">${cup.sourceDirectory}</sourceDirectory>
        <suppressGeneratedJavaWarningsUnchecked implementation="boolean" default-value="false">${cup.suppressGeneratedJavaWarningsUnchecked}</suppressGeneratedJavaWarningsUnchecked>
        <suppressGeneratedJavaWarningsUnused implementation="boolean" default-value="false">${cup.suppressGeneratedJavaWarningsUnused}</suppressGeneratedJavaWarningsUnused>
        <symbolsInterface implementation="boolean" default-value="false">${cup.symbolsInterface}</symbolsInterface>
        <symbolsName implementation="java.lang.String" default-value="Sym">${cup.symbolsName}</symbolsName>
        <timeSummary implementation="boolean" default-value="false">${cup.timeSummary}</timeSummary>
        <typeArgs implementation="java.lang.String">${cup.typeArgs}</typeArgs>
      </configuration>
    </mojo>
  </mojos>
</plugin>