
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.util;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author GnAST version 1.6-cdh
 */
public class Factory
  extends net.sourceforge.czt.zpatt.util.Factory
{
  private net.sourceforge.czt.circus.ast.CircusFactory factory_ =
    new net.sourceforge.czt.circus.impl.CircusFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.circus.ast.CircusFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Gives access to the inner extension-factory within this factory bridge.
   * This is useful so that methods from BasicFactory can be accessed through
   * this topmost level factory object
   */
  public net.sourceforge.czt.circus.ast.CircusFactory getCircusFactory()
  {
    return factory_;
  }

  /**
   * Creates an instance of {@link TransformerPara}.
   *
   * @return the new instance of TransformerPara.
   */
  public net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara()
  {
    return factory_.createTransformerPara();
  }

  /**
   * Creates an instance of {@link TransformerPara} with the given children.
   *
   * @return the new instance of TransformerPara.
   */
  public net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.TransformerPred  transformerPred)
  {
    return factory_.createTransformerPara(name, transformerPred);
  }

  /**
   * Creates an instance of {@link StateUpdate}.
   *
   * @return the new instance of StateUpdate.
   */
  public net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate()
  {
    return factory_.createStateUpdate();
  }

  /**
   * Creates an instance of {@link StateUpdate} with the given children.
   *
   * @return the new instance of StateUpdate.
   */
  public net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.circus.ast.AssignmentPairs>
 assignmentPairs)
  {
    return factory_.createStateUpdate(schText, pred, assignmentPairs);
  }

  /**
   * Creates an instance of {@link IndexedProcess}.
   *
   * @return the new instance of IndexedProcess.
   */
  public net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess()
  {
    return factory_.createIndexedProcess();
  }

  /**
   * Creates an instance of {@link IndexedProcess} with the given children.
   *
   * @return the new instance of IndexedProcess.
   */
  public net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIndexedProcess(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ProofObligationAnn}.
   *
   * @return the new instance of ProofObligationAnn.
   */
  public net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn()
  {
    return factory_.createProofObligationAnn();
  }

  /**
   * Creates an instance of {@link ProofObligationAnn} with the given children.
   *
   * @return the new instance of ProofObligationAnn.
   */
  public net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn( net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createProofObligationAnn(pred);
  }

  /**
   * Creates an instance of {@link ChannelSetPara}.
   *
   * @return the new instance of ChannelSetPara.
   */
  public net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara()
  {
    return factory_.createChannelSetPara();
  }

  /**
   * Creates an instance of {@link ChannelSetPara} with the given children.
   *
   * @return the new instance of ChannelSetPara.
   */
  public net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara( net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createChannelSetPara(genFormals, name, channelSet);
  }

  /**
   * Creates an instance of {@link SeqProcessIdx}.
   *
   * @return the new instance of SeqProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx()
  {
    return factory_.createSeqProcessIdx();
  }

  /**
   * Creates an instance of {@link SeqProcessIdx} with the given children.
   *
   * @return the new instance of SeqProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link CircusCommunicationList}.
   *
   * @return the new instance of CircusCommunicationList.
   */
  public net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList()
  {
    return factory_.createCircusCommunicationList();
  }

  /**
   * Creates an instance of {@link CircusCommunicationList} with the given children.
   *
   * @return the new instance of CircusCommunicationList.
   */
  public net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList(java.util.List<? extends net.sourceforge.czt.circus.ast.Communication>
 communication)
  {
    return factory_.createCircusCommunicationList(communication);
  }

  /**
   * Creates an instance of {@link CircusChannelSet}.
   *
   * @return the new instance of CircusChannelSet.
   */
  public net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet()
  {
    return factory_.createCircusChannelSet();
  }

  /**
   * Creates an instance of {@link CircusChannelSet} with the given children.
   *
   * @return the new instance of CircusChannelSet.
   */
  public net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createCircusChannelSet(expr);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx}.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx()
  {
    return factory_.createExtChoiceProcessIdx();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ActionSignatureAnn}.
   *
   * @return the new instance of ActionSignatureAnn.
   */
  public net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn()
  {
    return factory_.createActionSignatureAnn();
  }

  /**
   * Creates an instance of {@link ActionSignatureAnn} with the given children.
   *
   * @return the new instance of ActionSignatureAnn.
   */
  public net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature)
  {
    return factory_.createActionSignatureAnn(actionSignature);
  }

  /**
   * Creates an instance of {@link ProcessSignatureList}.
   *
   * @return the new instance of ProcessSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList()
  {
    return factory_.createProcessSignatureList();
  }

  /**
   * Creates an instance of {@link ProcessSignatureList} with the given children.
   *
   * @return the new instance of ProcessSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ProcessSignature>
 processSignature)
  {
    return factory_.createProcessSignatureList(processSignature);
  }

  /**
   * Creates an instance of {@link CircusChannelSetList}.
   *
   * @return the new instance of CircusChannelSetList.
   */
  public net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList()
  {
    return factory_.createCircusChannelSetList();
  }

  /**
   * Creates an instance of {@link CircusChannelSetList} with the given children.
   *
   * @return the new instance of CircusChannelSetList.
   */
  public net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    return factory_.createCircusChannelSetList(channelSet);
  }

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  public net.sourceforge.czt.circus.ast.HideAction createHideAction()
  {
    return factory_.createHideAction();
  }

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  public net.sourceforge.czt.circus.ast.HideAction createHideAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createHideAction(circusAction, channelSet);
  }

  /**
   * Creates an instance of {@link ParallelAction}.
   *
   * @return the new instance of ParallelAction.
   */
  public net.sourceforge.czt.circus.ast.ParallelAction createParallelAction()
  {
    return factory_.createParallelAction();
  }

  /**
   * Creates an instance of {@link ParallelAction} with the given children.
   *
   * @return the new instance of ParallelAction.
   */
  public net.sourceforge.czt.circus.ast.ParallelAction createParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createParallelAction(circusAction, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIte}.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte()
  {
    return factory_.createExtChoiceProcessIte();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcessIte} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ParallelProcessIdx}.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx()
  {
    return factory_.createParallelProcessIdx();
  }

  /**
   * Creates an instance of {@link ParallelProcessIdx} with the given children.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createParallelProcessIdx(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link OutputFieldAnn}.
   *
   * @return the new instance of OutputFieldAnn.
   */
  public net.sourceforge.czt.circus.ast.OutputFieldAnn createOutputFieldAnn()
  {
    return factory_.createOutputFieldAnn();
  }

  /**
   * Creates an instance of {@link OnTheFlyDefAnn}.
   *
   * @return the new instance of OnTheFlyDefAnn.
   */
  public net.sourceforge.czt.circus.ast.OnTheFlyDefAnn createOnTheFlyDefAnn()
  {
    return factory_.createOnTheFlyDefAnn();
  }

  /**
   * Creates an instance of {@link LetVarAction}.
   *
   * @return the new instance of LetVarAction.
   */
  public net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction()
  {
    return factory_.createLetVarAction();
  }

  /**
   * Creates an instance of {@link LetVarAction} with the given children.
   *
   * @return the new instance of LetVarAction.
   */
  public net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createLetVarAction(circusAction, declList, exprList);
  }

  /**
   * Creates an instance of {@link ParamProcess}.
   *
   * @return the new instance of ParamProcess.
   */
  public net.sourceforge.czt.circus.ast.ParamProcess createParamProcess()
  {
    return factory_.createParamProcess();
  }

  /**
   * Creates an instance of {@link ParamProcess} with the given children.
   *
   * @return the new instance of ParamProcess.
   */
  public net.sourceforge.czt.circus.ast.ParamProcess createParamProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createParamProcess(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link NameSetPara}.
   *
   * @return the new instance of NameSetPara.
   */
  public net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara()
  {
    return factory_.createNameSetPara();
  }

  /**
   * Creates an instance of {@link NameSetPara} with the given children.
   *
   * @return the new instance of NameSetPara.
   */
  public net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.NameSet  nameSet)
  {
    return factory_.createNameSetPara(name, nameSet);
  }

  /**
   * Creates an instance of {@link SeqProcessIte}.
   *
   * @return the new instance of SeqProcessIte.
   */
  public net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte()
  {
    return factory_.createSeqProcessIte();
  }

  /**
   * Creates an instance of {@link SeqProcessIte} with the given children.
   *
   * @return the new instance of SeqProcessIte.
   */
  public net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ParallelProcess}.
   *
   * @return the new instance of ParallelProcess.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess()
  {
    return factory_.createParallelProcess();
  }

  /**
   * Creates an instance of {@link ParallelProcess} with the given children.
   *
   * @return the new instance of ParallelProcess.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createParallelProcess(circusProcess, channelSet);
  }

  /**
   * Creates an instance of {@link SchExprAction}.
   *
   * @return the new instance of SchExprAction.
   */
  public net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction()
  {
    return factory_.createSchExprAction();
  }

  /**
   * Creates an instance of {@link SchExprAction} with the given children.
   *
   * @return the new instance of SchExprAction.
   */
  public net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createSchExprAction(expr);
  }

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  public net.sourceforge.czt.circus.ast.StopAction createStopAction()
  {
    return factory_.createStopAction();
  }

  /**
   * Creates an instance of {@link QualifiedDecl}.
   *
   * @return the new instance of QualifiedDecl.
   */
  public net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl()
  {
    return factory_.createQualifiedDecl();
  }

  /**
   * Creates an instance of {@link QualifiedDecl} with the given children.
   *
   * @return the new instance of QualifiedDecl.
   */
  public net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr,net.sourceforge.czt.circus.ast.ParamQualifier
 paramQualifier)
  {
    return factory_.createQualifiedDecl(nameList, expr, paramQualifier);
  }

  /**
   * Creates an instance of {@link SigmaExpr}.
   *
   * @return the new instance of SigmaExpr.
   */
  public net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr()
  {
    return factory_.createSigmaExpr();
  }

  /**
   * Creates an instance of {@link SigmaExpr} with the given children.
   *
   * @return the new instance of SigmaExpr.
   */
  public net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr( net.sourceforge.czt.z.ast.RefExpr  channel, net.sourceforge.czt.z.ast.Expr  value)
  {
    return factory_.createSigmaExpr(channel, value);
  }

  /**
   * Creates an instance of {@link ParallelProcessIte}.
   *
   * @return the new instance of ParallelProcessIte.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte()
  {
    return factory_.createParallelProcessIte();
  }

  /**
   * Creates an instance of {@link ParallelProcessIte} with the given children.
   *
   * @return the new instance of ParallelProcessIte.
   */
  public net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createParallelProcessIte(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link CallProcess}.
   *
   * @return the new instance of CallProcess.
   */
  public net.sourceforge.czt.circus.ast.CallProcess createCallProcess()
  {
    return factory_.createCallProcess();
  }

  /**
   * Creates an instance of {@link CallProcess} with the given children.
   *
   * @return the new instance of CallProcess.
   */
  public net.sourceforge.czt.circus.ast.CallProcess createCallProcess( net.sourceforge.czt.z.ast.RefExpr  callExpr, net.sourceforge.czt.z.ast.ExprList  actuals,net.sourceforge.czt.circus.ast.CallUsage
 callUsage)
  {
    return factory_.createCallProcess(callExpr, actuals, callUsage);
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIte}.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte()
  {
    return factory_.createIntChoiceProcessIte();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIte} with the given children.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ProcessSignature}.
   *
   * @return the new instance of ProcessSignature.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature()
  {
    return factory_.createProcessSignature();
  }

  /**
   * Creates an instance of {@link ProcessSignature} with the given children.
   *
   * @return the new instance of ProcessSignature.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ZNameList  genFormals,java.util.List<? extends net.sourceforge.czt.circus.ast.SignatureList>
 signatureList, net.sourceforge.czt.circus.ast.ChannelSetList  processChannelSets, net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate,net.sourceforge.czt.circus.ast.CallUsage
 callUsage)
  {
    return factory_.createProcessSignature(name, genFormals, signatureList, processChannelSets, stateUpdate, callUsage);
  }

  /**
   * Creates an instance of {@link ExtChoiceActionIte}.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte()
  {
    return factory_.createExtChoiceActionIte();
  }

  /**
   * Creates an instance of {@link ExtChoiceActionIte} with the given children.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createExtChoiceActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link IfGuardedCommand}.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand()
  {
    return factory_.createIfGuardedCommand();
  }

  /**
   * Creates an instance of {@link IfGuardedCommand} with the given children.
   *
   * @return the new instance of IfGuardedCommand.
   */
  public net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList)
  {
    return factory_.createIfGuardedCommand(actionList);
  }

  /**
   * Creates an instance of {@link ProcessType}.
   *
   * @return the new instance of ProcessType.
   */
  public net.sourceforge.czt.circus.ast.ProcessType createProcessType()
  {
    return factory_.createProcessType();
  }

  /**
   * Creates an instance of {@link ProcessType} with the given children.
   *
   * @return the new instance of ProcessType.
   */
  public net.sourceforge.czt.circus.ast.ProcessType createProcessType( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature)
  {
    return factory_.createProcessType(processSignature);
  }

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  public net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction()
  {
    return factory_.createInterleaveAction();
  }

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  public net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet)
  {
    return factory_.createInterleaveAction(circusAction, nameSet);
  }

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  public net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction()
  {
    return factory_.createPrefixingAction();
  }

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  public net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.Communication  communication)
  {
    return factory_.createPrefixingAction(circusAction, communication);
  }

  /**
   * Creates an instance of {@link ProcessTransformerPred}.
   *
   * @return the new instance of ProcessTransformerPred.
   */
  public net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred()
  {
    return factory_.createProcessTransformerPred();
  }

  /**
   * Creates an instance of {@link ProcessTransformerPred} with the given children.
   *
   * @return the new instance of ProcessTransformerPred.
   */
  public net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    return factory_.createProcessTransformerPred(schText, transformation, model, circusProcess);
  }

  /**
   * Creates an instance of {@link CircusActionList}.
   *
   * @return the new instance of CircusActionList.
   */
  public net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList()
  {
    return factory_.createCircusActionList();
  }

  /**
   * Creates an instance of {@link CircusActionList} with the given children.
   *
   * @return the new instance of CircusActionList.
   */
  public net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createCircusActionList(circusAction);
  }

  /**
   * Creates an instance of {@link Communication}.
   *
   * @return the new instance of Communication.
   */
  public net.sourceforge.czt.circus.ast.Communication createCommunication()
  {
    return factory_.createCommunication();
  }

  /**
   * Creates an instance of {@link Communication} with the given children.
   *
   * @return the new instance of Communication.
   */
  public net.sourceforge.czt.circus.ast.Communication createCommunication( net.sourceforge.czt.z.ast.RefExpr  channelExpr, net.sourceforge.czt.circus.ast.FieldList  fieldList,net.sourceforge.czt.circus.ast.CommUsage
 commUsage,net.sourceforge.czt.circus.ast.CommPattern
 commPattern, java.math.BigInteger  multiSych, Boolean  indexed)
  {
    return factory_.createCommunication(channelExpr, fieldList, commUsage, commPattern, multiSych, indexed);
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIdx}.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx()
  {
    return factory_.createIntChoiceProcessIdx();
  }

  /**
   * Creates an instance of {@link IntChoiceProcessIdx} with the given children.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link InputField}.
   *
   * @return the new instance of InputField.
   */
  public net.sourceforge.czt.circus.ast.InputField createInputField()
  {
    return factory_.createInputField();
  }

  /**
   * Creates an instance of {@link InputField} with the given children.
   *
   * @return the new instance of InputField.
   */
  public net.sourceforge.czt.circus.ast.InputField createInputField( net.sourceforge.czt.z.ast.Name  variableName, net.sourceforge.czt.z.ast.Pred  restriction)
  {
    return factory_.createInputField(variableName, restriction);
  }

  /**
   * Creates an instance of {@link HideProcess}.
   *
   * @return the new instance of HideProcess.
   */
  public net.sourceforge.czt.circus.ast.HideProcess createHideProcess()
  {
    return factory_.createHideProcess();
  }

  /**
   * Creates an instance of {@link HideProcess} with the given children.
   *
   * @return the new instance of HideProcess.
   */
  public net.sourceforge.czt.circus.ast.HideProcess createHideProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createHideProcess(circusProcess, channelSet);
  }

  /**
   * Creates an instance of {@link ActionPara}.
   *
   * @return the new instance of ActionPara.
   */
  public net.sourceforge.czt.circus.ast.ActionPara createActionPara()
  {
    return factory_.createActionPara();
  }

  /**
   * Creates an instance of {@link ActionPara} with the given children.
   *
   * @return the new instance of ActionPara.
   */
  public net.sourceforge.czt.circus.ast.ActionPara createActionPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.CircusAction  circusAction)
  {
    return factory_.createActionPara(name, circusAction);
  }

  /**
   * Creates an instance of {@link SeqAction}.
   *
   * @return the new instance of SeqAction.
   */
  public net.sourceforge.czt.circus.ast.SeqAction createSeqAction()
  {
    return factory_.createSeqAction();
  }

  /**
   * Creates an instance of {@link SeqAction} with the given children.
   *
   * @return the new instance of SeqAction.
   */
  public net.sourceforge.czt.circus.ast.SeqAction createSeqAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createSeqAction(circusAction);
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess}.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess()
  {
    return factory_.createExtChoiceProcess();
  }

  /**
   * Creates an instance of {@link ExtChoiceProcess} with the given children.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    return factory_.createExtChoiceProcess(circusProcess);
  }

  /**
   * Creates an instance of {@link LetMuAction}.
   *
   * @return the new instance of LetMuAction.
   */
  public net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction()
  {
    return factory_.createLetMuAction();
  }

  /**
   * Creates an instance of {@link LetMuAction} with the given children.
   *
   * @return the new instance of LetMuAction.
   */
  public net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    return factory_.createLetMuAction(circusAction, paraList);
  }

  /**
   * Creates an instance of {@link ZSignatureList}.
   *
   * @return the new instance of ZSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList()
  {
    return factory_.createZSignatureList();
  }

  /**
   * Creates an instance of {@link ZSignatureList} with the given children.
   *
   * @return the new instance of ZSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList(java.util.List<? extends net.sourceforge.czt.z.ast.Signature>
 signature)
  {
    return factory_.createZSignatureList(signature);
  }

  /**
   * Creates an instance of {@link AssignmentCommand}.
   *
   * @return the new instance of AssignmentCommand.
   */
  public net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand()
  {
    return factory_.createAssignmentCommand();
  }

  /**
   * Creates an instance of {@link AssignmentCommand} with the given children.
   *
   * @return the new instance of AssignmentCommand.
   */
  public net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand( net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    return factory_.createAssignmentCommand(assignmentPairs);
  }

  /**
   * Creates an instance of {@link ChannelType}.
   *
   * @return the new instance of ChannelType.
   */
  public net.sourceforge.czt.circus.ast.ChannelType createChannelType()
  {
    return factory_.createChannelType();
  }

  /**
   * Creates an instance of {@link ChannelType} with the given children.
   *
   * @return the new instance of ChannelType.
   */
  public net.sourceforge.czt.circus.ast.ChannelType createChannelType( net.sourceforge.czt.z.ast.Type2  type)
  {
    return factory_.createChannelType(type);
  }

  /**
   * Creates an instance of {@link ActionType}.
   *
   * @return the new instance of ActionType.
   */
  public net.sourceforge.czt.circus.ast.ActionType createActionType()
  {
    return factory_.createActionType();
  }

  /**
   * Creates an instance of {@link ActionType} with the given children.
   *
   * @return the new instance of ActionType.
   */
  public net.sourceforge.czt.circus.ast.ActionType createActionType( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature)
  {
    return factory_.createActionType(actionSignature);
  }

  /**
   * Creates an instance of {@link SeqActionIte}.
   *
   * @return the new instance of SeqActionIte.
   */
  public net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte()
  {
    return factory_.createSeqActionIte();
  }

  /**
   * Creates an instance of {@link SeqActionIte} with the given children.
   *
   * @return the new instance of SeqActionIte.
   */
  public net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createSeqActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link IntChoiceActionIte}.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte()
  {
    return factory_.createIntChoiceActionIte();
  }

  /**
   * Creates an instance of {@link IntChoiceActionIte} with the given children.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createIntChoiceActionIte(circusAction, declList);
  }

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  public net.sourceforge.czt.circus.ast.CallAction createCallAction()
  {
    return factory_.createCallAction();
  }

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  public net.sourceforge.czt.circus.ast.CallAction createCallAction( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createCallAction(name, exprList);
  }

  /**
   * Creates an instance of {@link SpecStmtCommand}.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand()
  {
    return factory_.createSpecStmtCommand();
  }

  /**
   * Creates an instance of {@link SpecStmtCommand} with the given children.
   *
   * @return the new instance of SpecStmtCommand.
   */
  public net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand( net.sourceforge.czt.z.ast.NameList  frame,java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    return factory_.createSpecStmtCommand(frame, pred);
  }

  /**
   * Creates an instance of {@link StateUpdateAnn}.
   *
   * @return the new instance of StateUpdateAnn.
   */
  public net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn()
  {
    return factory_.createStateUpdateAnn();
  }

  /**
   * Creates an instance of {@link StateUpdateAnn} with the given children.
   *
   * @return the new instance of StateUpdateAnn.
   */
  public net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn( net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate)
  {
    return factory_.createStateUpdateAnn(stateUpdate);
  }

  /**
   * Creates an instance of {@link ChannelDecl}.
   *
   * @return the new instance of ChannelDecl.
   */
  public net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl()
  {
    return factory_.createChannelDecl();
  }

  /**
   * Creates an instance of {@link ChannelDecl} with the given children.
   *
   * @return the new instance of ChannelDecl.
   */
  public net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl(java.util.List<? extends net.sourceforge.czt.z.ast.NameList>
 nameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createChannelDecl(nameList, expr);
  }

  /**
   * Creates an instance of {@link NameSetType}.
   *
   * @return the new instance of NameSetType.
   */
  public net.sourceforge.czt.circus.ast.NameSetType createNameSetType()
  {
    return factory_.createNameSetType();
  }

  /**
   * Creates an instance of {@link NameSetType} with the given children.
   *
   * @return the new instance of NameSetType.
   */
  public net.sourceforge.czt.circus.ast.NameSetType createNameSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createNameSetType(signature);
  }

  /**
   * Creates an instance of {@link InterleaveProcessIdx}.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx()
  {
    return factory_.createInterleaveProcessIdx();
  }

  /**
   * Creates an instance of {@link InterleaveProcessIdx} with the given children.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createInterleaveProcessIdx(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link ProcessSignatureAnn}.
   *
   * @return the new instance of ProcessSignatureAnn.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn()
  {
    return factory_.createProcessSignatureAnn();
  }

  /**
   * Creates an instance of {@link ProcessSignatureAnn} with the given children.
   *
   * @return the new instance of ProcessSignatureAnn.
   */
  public net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature)
  {
    return factory_.createProcessSignatureAnn(processSignature);
  }

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  public net.sourceforge.czt.circus.ast.MuAction createMuAction()
  {
    return factory_.createMuAction();
  }

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  public net.sourceforge.czt.circus.ast.MuAction createMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Name  name)
  {
    return factory_.createMuAction(circusAction, name);
  }

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction()
  {
    return factory_.createExtChoiceAction();
  }

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  public net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createExtChoiceAction(circusAction);
  }

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  public net.sourceforge.czt.circus.ast.SkipAction createSkipAction()
  {
    return factory_.createSkipAction();
  }

  /**
   * Creates an instance of {@link SubstitutionAction}.
   *
   * @return the new instance of SubstitutionAction.
   */
  public net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction()
  {
    return factory_.createSubstitutionAction();
  }

  /**
   * Creates an instance of {@link SubstitutionAction} with the given children.
   *
   * @return the new instance of SubstitutionAction.
   */
  public net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    return factory_.createSubstitutionAction(circusAction, renameList);
  }

  /**
   * Creates an instance of {@link ChannelSetType}.
   *
   * @return the new instance of ChannelSetType.
   */
  public net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType()
  {
    return factory_.createChannelSetType();
  }

  /**
   * Creates an instance of {@link ChannelSetType} with the given children.
   *
   * @return the new instance of ChannelSetType.
   */
  public net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createChannelSetType(signature);
  }

  /**
   * Creates an instance of {@link CircusNameSet}.
   *
   * @return the new instance of CircusNameSet.
   */
  public net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet()
  {
    return factory_.createCircusNameSet();
  }

  /**
   * Creates an instance of {@link CircusNameSet} with the given children.
   *
   * @return the new instance of CircusNameSet.
   */
  public net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createCircusNameSet(expr);
  }

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction()
  {
    return factory_.createIntChoiceAction();
  }

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createIntChoiceAction(circusAction);
  }

  /**
   * Creates an instance of {@link ParamAction}.
   *
   * @return the new instance of ParamAction.
   */
  public net.sourceforge.czt.circus.ast.ParamAction createParamAction()
  {
    return factory_.createParamAction();
  }

  /**
   * Creates an instance of {@link ParamAction} with the given children.
   *
   * @return the new instance of ParamAction.
   */
  public net.sourceforge.czt.circus.ast.ParamAction createParamAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createParamAction(circusAction, declList);
  }

  /**
   * Creates an instance of {@link CircusNameSetList}.
   *
   * @return the new instance of CircusNameSetList.
   */
  public net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList()
  {
    return factory_.createCircusNameSetList();
  }

  /**
   * Creates an instance of {@link CircusNameSetList} with the given children.
   *
   * @return the new instance of CircusNameSetList.
   */
  public net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet)
  {
    return factory_.createCircusNameSetList(nameSet);
  }

  /**
   * Creates an instance of {@link ProcessPara}.
   *
   * @return the new instance of ProcessPara.
   */
  public net.sourceforge.czt.circus.ast.ProcessPara createProcessPara()
  {
    return factory_.createProcessPara();
  }

  /**
   * Creates an instance of {@link ProcessPara} with the given children.
   *
   * @return the new instance of ProcessPara.
   */
  public net.sourceforge.czt.circus.ast.ProcessPara createProcessPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.circus.ast.CircusProcess  circusProcess)
  {
    return factory_.createProcessPara(name, genFormals, circusProcess);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelAction}.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction()
  {
    return factory_.createAlphabetisedParallelAction();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelAction} with the given children.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    return factory_.createAlphabetisedParallelAction(circusAction, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link BasicChannelSetExpr}.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  public net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr()
  {
    return factory_.createBasicChannelSetExpr();
  }

  /**
   * Creates an instance of {@link BasicChannelSetExpr} with the given children.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  public net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr( net.sourceforge.czt.circus.ast.CommunicationList  communicationList)
  {
    return factory_.createBasicChannelSetExpr(communicationList);
  }

  /**
   * Creates an instance of {@link InterleaveProcessIte}.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte()
  {
    return factory_.createInterleaveProcessIte();
  }

  /**
   * Creates an instance of {@link InterleaveProcessIte} with the given children.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createInterleaveProcessIte(circusProcess, declList);
  }

  /**
   * Creates an instance of {@link DoGuardedCommand}.
   *
   * @return the new instance of DoGuardedCommand.
   */
  public net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand()
  {
    return factory_.createDoGuardedCommand();
  }

  /**
   * Creates an instance of {@link DoGuardedCommand} with the given children.
   *
   * @return the new instance of DoGuardedCommand.
   */
  public net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList)
  {
    return factory_.createDoGuardedCommand(actionList);
  }

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  public net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction()
  {
    return factory_.createGuardedAction();
  }

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  public net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createGuardedAction(circusAction, pred);
  }

  /**
   * Creates an instance of {@link SeqProcess}.
   *
   * @return the new instance of SeqProcess.
   */
  public net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess()
  {
    return factory_.createSeqProcess();
  }

  /**
   * Creates an instance of {@link SeqProcess} with the given children.
   *
   * @return the new instance of SeqProcess.
   */
  public net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    return factory_.createSeqProcess(circusProcess);
  }

  /**
   * Creates an instance of {@link InterruptAction}.
   *
   * @return the new instance of InterruptAction.
   */
  public net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction()
  {
    return factory_.createInterruptAction();
  }

  /**
   * Creates an instance of {@link InterruptAction} with the given children.
   *
   * @return the new instance of InterruptAction.
   */
  public net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createInterruptAction(circusAction);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte}.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte()
  {
    return factory_.createAlphabetisedParallelProcessIte();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelProcessIte(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link IntChoiceProcess}.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess()
  {
    return factory_.createIntChoiceProcess();
  }

  /**
   * Creates an instance of {@link IntChoiceProcess} with the given children.
   *
   * @return the new instance of IntChoiceProcess.
   */
  public net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    return factory_.createIntChoiceProcess(circusProcess);
  }

  /**
   * Creates an instance of {@link CircusStateAnn}.
   *
   * @return the new instance of CircusStateAnn.
   */
  public net.sourceforge.czt.circus.ast.CircusStateAnn createCircusStateAnn()
  {
    return factory_.createCircusStateAnn();
  }

  /**
   * Creates an instance of {@link ParallelActionIte}.
   *
   * @return the new instance of ParallelActionIte.
   */
  public net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte()
  {
    return factory_.createParallelActionIte();
  }

  /**
   * Creates an instance of {@link ParallelActionIte} with the given children.
   *
   * @return the new instance of ParallelActionIte.
   */
  public net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createParallelActionIte(circusAction, declList, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link RenameProcess}.
   *
   * @return the new instance of RenameProcess.
   */
  public net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess()
  {
    return factory_.createRenameProcess();
  }

  /**
   * Creates an instance of {@link RenameProcess} with the given children.
   *
   * @return the new instance of RenameProcess.
   */
  public net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    return factory_.createRenameProcess(circusProcess, assignmentPairs);
  }

  /**
   * Creates an instance of {@link BasicProcess}.
   *
   * @return the new instance of BasicProcess.
   */
  public net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess()
  {
    return factory_.createBasicProcess();
  }

  /**
   * Creates an instance of {@link BasicProcess} with the given children.
   *
   * @return the new instance of BasicProcess.
   */
  public net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess( net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    return factory_.createBasicProcess(paraList);
  }

  /**
   * Creates an instance of {@link RenameAction}.
   *
   * @return the new instance of RenameAction.
   */
  public net.sourceforge.czt.circus.ast.RenameAction createRenameAction()
  {
    return factory_.createRenameAction();
  }

  /**
   * Creates an instance of {@link RenameAction} with the given children.
   *
   * @return the new instance of RenameAction.
   */
  public net.sourceforge.czt.circus.ast.RenameAction createRenameAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    return factory_.createRenameAction(circusAction, assignmentPairs);
  }

  /**
   * Creates an instance of {@link ActionSignature}.
   *
   * @return the new instance of ActionSignature.
   */
  public net.sourceforge.czt.circus.ast.ActionSignature createActionSignature()
  {
    return factory_.createActionSignature();
  }

  /**
   * Creates an instance of {@link ActionSignature} with the given children.
   *
   * @return the new instance of ActionSignature.
   */
  public net.sourceforge.czt.circus.ast.ActionSignature createActionSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.SignatureList  signatureList, net.sourceforge.czt.circus.ast.CommunicationList  communicationList, net.sourceforge.czt.circus.ast.ChannelSetList  channelSetList, net.sourceforge.czt.circus.ast.NameSetList  nameSetList)
  {
    return factory_.createActionSignature(name, signatureList, communicationList, channelSetList, nameSetList);
  }

  /**
   * Creates an instance of {@link ChannelPara}.
   *
   * @return the new instance of ChannelPara.
   */
  public net.sourceforge.czt.circus.ast.ChannelPara createChannelPara()
  {
    return factory_.createChannelPara();
  }

  /**
   * Creates an instance of {@link ChannelPara} with the given children.
   *
   * @return the new instance of ChannelPara.
   */
  public net.sourceforge.czt.circus.ast.ChannelPara createChannelPara( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createChannelPara(declList);
  }

  /**
   * Creates an instance of {@link ActionTransformerPred}.
   *
   * @return the new instance of ActionTransformerPred.
   */
  public net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred()
  {
    return factory_.createActionTransformerPred();
  }

  /**
   * Creates an instance of {@link ActionTransformerPred} with the given children.
   *
   * @return the new instance of ActionTransformerPred.
   */
  public net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    return factory_.createActionTransformerPred(schText, transformation, model, circusAction);
  }

  /**
   * Creates an instance of {@link CircusFieldList}.
   *
   * @return the new instance of CircusFieldList.
   */
  public net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList()
  {
    return factory_.createCircusFieldList();
  }

  /**
   * Creates an instance of {@link CircusFieldList} with the given children.
   *
   * @return the new instance of CircusFieldList.
   */
  public net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList(java.util.List<? extends net.sourceforge.czt.circus.ast.Field>
 field)
  {
    return factory_.createCircusFieldList(field);
  }

  /**
   * Creates an instance of {@link ImplicitChannelAnn}.
   *
   * @return the new instance of ImplicitChannelAnn.
   */
  public net.sourceforge.czt.circus.ast.ImplicitChannelAnn createImplicitChannelAnn()
  {
    return factory_.createImplicitChannelAnn();
  }

  /**
   * Creates an instance of {@link VarDeclCommand}.
   *
   * @return the new instance of VarDeclCommand.
   */
  public net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand()
  {
    return factory_.createVarDeclCommand();
  }

  /**
   * Creates an instance of {@link VarDeclCommand} with the given children.
   *
   * @return the new instance of VarDeclCommand.
   */
  public net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.CircusAction  circusAction)
  {
    return factory_.createVarDeclCommand(declList, circusAction);
  }

  /**
   * Creates an instance of {@link CommunicationType}.
   *
   * @return the new instance of CommunicationType.
   */
  public net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType()
  {
    return factory_.createCommunicationType();
  }

  /**
   * Creates an instance of {@link CommunicationType} with the given children.
   *
   * @return the new instance of CommunicationType.
   */
  public net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createCommunicationType(signature);
  }

  /**
   * Creates an instance of {@link InterleaveActionIte}.
   *
   * @return the new instance of InterleaveActionIte.
   */
  public net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte()
  {
    return factory_.createInterleaveActionIte();
  }

  /**
   * Creates an instance of {@link InterleaveActionIte} with the given children.
   *
   * @return the new instance of InterleaveActionIte.
   */
  public net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet)
  {
    return factory_.createInterleaveActionIte(circusAction, declList, nameSet);
  }

  /**
   * Creates an instance of {@link DotField}.
   *
   * @return the new instance of DotField.
   */
  public net.sourceforge.czt.circus.ast.DotField createDotField()
  {
    return factory_.createDotField();
  }

  /**
   * Creates an instance of {@link DotField} with the given children.
   *
   * @return the new instance of DotField.
   */
  public net.sourceforge.czt.circus.ast.DotField createDotField( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createDotField(expr);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx}.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx()
  {
    return factory_.createAlphabetisedParallelProcessIdx();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelProcessIdx(circusProcess, declList, channelSet);
  }

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  public net.sourceforge.czt.circus.ast.ChaosAction createChaosAction()
  {
    return factory_.createChaosAction();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess}.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess()
  {
    return factory_.createAlphabetisedParallelProcess();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    return factory_.createAlphabetisedParallelProcess(circusProcess, channelSet);
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte}.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte()
  {
    return factory_.createAlphabetisedParallelActionIte();
  }

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  public net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    return factory_.createAlphabetisedParallelActionIte(circusAction, declList, nameSet, channelSet);
  }

  /**
   * Creates an instance of {@link AssignmentPairs}.
   *
   * @return the new instance of AssignmentPairs.
   */
  public net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs()
  {
    return factory_.createAssignmentPairs();
  }

  /**
   * Creates an instance of {@link AssignmentPairs} with the given children.
   *
   * @return the new instance of AssignmentPairs.
   */
  public net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs( net.sourceforge.czt.z.ast.NameList  lHS, net.sourceforge.czt.z.ast.ExprList  rHS)
  {
    return factory_.createAssignmentPairs(lHS, rHS);
  }

  /**
   * Creates an instance of {@link InterleaveProcess}.
   *
   * @return the new instance of InterleaveProcess.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess()
  {
    return factory_.createInterleaveProcess();
  }

  /**
   * Creates an instance of {@link InterleaveProcess} with the given children.
   *
   * @return the new instance of InterleaveProcess.
   */
  public net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    return factory_.createInterleaveProcess(circusProcess);
  }

  /**
   * Creates an instance of {@link ActionSignatureList}.
   *
   * @return the new instance of ActionSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList()
  {
    return factory_.createActionSignatureList();
  }

  /**
   * Creates an instance of {@link ActionSignatureList} with the given children.
   *
   * @return the new instance of ActionSignatureList.
   */
  public net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ActionSignature>
 actionSignature)
  {
    return factory_.createActionSignatureList(actionSignature);
  }

  /**
   * Creates an empty list of the given element type.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list()
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    return result;
  }
  

  /**
   * Creates a list with the given elements.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list(@SuppressWarnings("unchecked") E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createApplication(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a ZName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String word, net.sourceforge.czt.z.ast.StrokeList strokes)
  {
    return createZName(word, strokes, null);
  }

  /**
   * Creates a ZName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String decorword)
  {
    net.sourceforge.czt.z.ast.ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZName(word, strokes, null);
  }

  public String getWordAndStrokes(String decorword,
                                  net.sourceforge.czt.z.ast.ZStrokeList strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        net.sourceforge.czt.base.ast.Digit digit =
          net.sourceforge.czt.base.util.CztDatatypeConverter.parseDigit(zchars[i - 1].toString());
        strokes.add(0, createNumStroke(digit));
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createEquality(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    zExprList.add(right);
    return createMemPred(left, createSetExpr(zExprList), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createFunOpAppl(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenInst(net.sourceforge.czt.z.ast.Name refName,
                               java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenOpApp(net.sourceforge.czt.z.ast.Name refName,
                                java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of Name, the formal parameters.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName,
                                    java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                                    net.sourceforge.czt.z.ast.Expr expr)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, expr);
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }
  
  public net.sourceforge.czt.z.ast.Pred createSetMembership(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createMemPred(left, right, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(int value)
  {
    return factory_.createNumExpr(createZNumeral(value));
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(java.math.BigInteger bigInt)
  {
    return createNumExpr(factory_.createZNumeral(bigInt));
  }

  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral(int value)
  {
    return factory_.createZNumeral(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createProdExpr(createZExprList(list(left, right)));
  }

  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName,
                               net.sourceforge.czt.z.ast.ZExprList zExprList,
                               Boolean mixfix)
  {
    return factory_.createRefExpr(refName, zExprList, mixfix, false);
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName)
  {
    return createRefExpr(refName, createZExprList(), Boolean.FALSE);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name, i.e., just copies the given ZName.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(net.sourceforge.czt.z.ast.ZName declName)
  {
    return createZName(declName.getWord(),
                       declName.getStrokeList(),
                       declName.getId());
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createRelOpAppl(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.Name refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of Name, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName,
                             java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                             net.sourceforge.czt.z.ast.SchText schemaText)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, createSchExpr(schemaText));
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public net.sourceforge.czt.z.ast.SetExpr createSequence(java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprList)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    int count = 1;
    for (java.util.Iterator<? extends net.sourceforge.czt.z.ast.Expr> i = exprList.iterator();
         i.hasNext(); count++) {
      zExprList.add(createTupleExpr(createNumExpr(count), i.next()));
    }
    return createSetExpr(zExprList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createTupleExpr(createZExprList(list(left, right)));
  }

  public java.math.BigInteger toBig(Integer i)
  {
    if (i != null) {
      return java.math.BigInteger.valueOf(i.intValue());
    }
    return null;
  }

  public net.sourceforge.czt.z.ast.NumStroke createNumStroke(int value)
  {
    net.sourceforge.czt.base.ast.Digit digit =
      net.sourceforge.czt.base.ast.Digit.fromValue(value);
    return createNumStroke(digit);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source, Integer line, Integer col)
  {
    return createLocAnn(source, line, col, null, null);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source,
                             Integer line, Integer col,
                             Integer start, Integer length)
  {
    return createLocAnn(source,
                        toBig(line), toBig(col),
                        toBig(start), toBig(length));
  }

  public net.sourceforge.czt.z.ast.AndExpr createAndExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.AndExpr result = createAndExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.AndPred createAndPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right, net.sourceforge.czt.z.ast.And and)
  {
    net.sourceforge.czt.z.ast.AndPred result = createAndPred();
    result.getPred().add(left);
    result.getPred().add(right);
    result.setAnd(and);
    return result;
  }

  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean  mixfix)
  {
    net.sourceforge.czt.z.ast.ApplExpr result = createApplExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.CompExpr createCompExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CompExpr result = createCompExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.CondExpr createCondExpr(net.sourceforge.czt.z.ast.Pred pred, net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CondExpr result = createCondExpr();
    result.setPred(pred);
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffExpr createIffExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.IffExpr result = createIffExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffPred createIffPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.IffPred result = createIffPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ImpliesExpr result = createImpliesExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.ImpliesPred result = createImpliesPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean mixfix)
  {
    net.sourceforge.czt.z.ast.MemPred result = createMemPred();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrExpr createOrExpr(net.sourceforge.czt.z.ast.Expr  left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.OrExpr result = createOrExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrPred createOrPred(net.sourceforge.czt.z.ast.Pred  left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.OrPred result = createOrPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.PipeExpr result = createPipeExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ProjExpr result = createProjExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(net.sourceforge.czt.z.ast.Name newName, net.sourceforge.czt.z.ast.Name oldName)
  {
    net.sourceforge.czt.z.ast.NewOldPair result = createNewOldPair();
    result.getName().add(newName);
    result.getName().add(oldName);
    return result;
  }}
