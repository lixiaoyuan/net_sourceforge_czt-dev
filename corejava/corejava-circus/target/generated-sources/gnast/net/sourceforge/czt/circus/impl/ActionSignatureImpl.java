
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.circus.ast.ActionSignature}.
 *
 * @author GnAST version 1.6-cdh
 */
public class ActionSignatureImpl
extends 		 		net.sourceforge.czt.circus.impl.CircusSignatureImpl
 	  implements net.sourceforge.czt.circus.ast.ActionSignature
{





  /**
   * static instance count for ActionSignatureImpl
   */
   private static long instanceCount_ = 0;
   
  /**
   * public attribute determining whether to log to the 
   * standard output information about who is creating 
   * this instance of ActionSignatureImpl (e.g., ic >= sl)
   */
  //private static final long startLoggingFrom_ = Long.MAX_VALUE;
   
    // cannot be final because JokerCommunicationImpl extends CommunicationImpl
  public /*final*/ static boolean countingFinaliser() { return false; }
  public /*final*/ static long instancesFinalised() 
  { 
    throw new UnsupportedOperationException("GnAST AST finalisers have not been set"); 
  }
  
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected ActionSignatureImpl()
  {
    this(null);
  }

  protected ActionSignatureImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
    countInstance();
  }
  
  private static synchronized void countInstance()
  {
	  instanceCount_++;
  }
  
  /**
   * Compares the specified object with this ActionSignatureImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ActionSignatureImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //ActionSignatureImpl object = ((ActionSignatureImpl) obj);
        if (signatureList_ != null) {
          if (!signatureList_.equals(((ActionSignatureImpl) obj).signatureList_)) {
            return false;
          }
        }
        else {
          if (((ActionSignatureImpl) obj).signatureList_ != null) {
            return false;
          }
        }
        if (communicationList_ != null) {
          if (!communicationList_.equals(((ActionSignatureImpl) obj).communicationList_)) {
            return false;
          }
        }
        else {
          if (((ActionSignatureImpl) obj).communicationList_ != null) {
            return false;
          }
        }
        if (channelSetList_ != null) {
          if (!channelSetList_.equals(((ActionSignatureImpl) obj).channelSetList_)) {
            return false;
          }
        }
        else {
          if (((ActionSignatureImpl) obj).channelSetList_ != null) {
            return false;
          }
        }
        if (nameSetList_ != null) {
          if (!nameSetList_.equals(((ActionSignatureImpl) obj).nameSetList_)) {
            return false;
          }
        }
        else {
          if (((ActionSignatureImpl) obj).nameSetList_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ActionSignatureImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "ActionSignatureImpl".hashCode();
    if (signatureList_ != null) {
      hashCode += 31 * signatureList_.hashCode();
    }
    if (communicationList_ != null) {
      hashCode += 31 * communicationList_.hashCode();
    }
    if (channelSetList_ != null) {
      hashCode += 31 * channelSetList_.hashCode();
    }
    if (nameSetList_ != null) {
      hashCode += 31 * nameSetList_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.circus.visitor.ActionSignatureVisitor) {
      net.sourceforge.czt.circus.visitor.ActionSignatureVisitor<R> visitor = 
      	  (net.sourceforge.czt.circus.visitor.ActionSignatureVisitor<R>) v;
      return visitor.visitActionSignature(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public ActionSignatureImpl create(Object[] args)
  {
    ActionSignatureImpl zedObject = null;
    try {
	  	  			  	net.sourceforge.czt.z.ast.Name name = (
						net.sourceforge.czt.z.ast.Name) args[0];
	  	  	  			  	net.sourceforge.czt.circus.ast.SignatureList signatureList = (
						net.sourceforge.czt.circus.ast.SignatureList) args[1];
	  	  	  			  	net.sourceforge.czt.circus.ast.CommunicationList communicationList = (
						net.sourceforge.czt.circus.ast.CommunicationList) args[2];
	  	  	  			  	net.sourceforge.czt.circus.ast.ChannelSetList channelSetList = (
						net.sourceforge.czt.circus.ast.ChannelSetList) args[3];
	  	  	  			  	net.sourceforge.czt.circus.ast.NameSetList nameSetList = (
						net.sourceforge.czt.circus.ast.NameSetList) args[4];
	        zedObject = new ActionSignatureImpl(getFactory());
      zedObject.setName(name);
      zedObject.setSignatureList(signatureList);
      zedObject.setCommunicationList(communicationList);
      zedObject.setChannelSetList(channelSetList);
      zedObject.setNameSetList(nameSetList);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getName(), getSignatureList(), getCommunicationList(), getChannelSetList(), getNameSetList() };
    return erg;
  }
  
  /** Only concrete classes get the instance count method visible */
  // JokerCommunication in circuspatt extends CommunicationImpl which is not abstract? weird...
  public static /*final*/ long instanceCount()
  {
    return instanceCount_;
  }


  private
            		net.sourceforge.czt.circus.ast.SignatureList
  signatureList_;

  public 
		net.sourceforge.czt.circus.ast.SignatureList
  getSignatureList()
  {
    return signatureList_;
  }

  public void setSignatureList(
		net.sourceforge.czt.circus.ast.SignatureList
	signatureList)
  {
                          signatureList_ = signatureList;
    }


  private
            		net.sourceforge.czt.circus.ast.CommunicationList
  communicationList_;

  public 
		net.sourceforge.czt.circus.ast.CommunicationList
  getCommunicationList()
  {
    return communicationList_;
  }

  public void setCommunicationList(
		net.sourceforge.czt.circus.ast.CommunicationList
	communicationList)
  {
                          communicationList_ = communicationList;
    }


  private
            		net.sourceforge.czt.circus.ast.ChannelSetList
  channelSetList_;

  public 
		net.sourceforge.czt.circus.ast.ChannelSetList
  getChannelSetList()
  {
    return channelSetList_;
  }

  public void setChannelSetList(
		net.sourceforge.czt.circus.ast.ChannelSetList
	channelSetList)
  {
                          channelSetList_ = channelSetList;
    }


  private
            		net.sourceforge.czt.circus.ast.NameSetList
  nameSetList_;

  public 
		net.sourceforge.czt.circus.ast.NameSetList
  getNameSetList()
  {
    return nameSetList_;
  }

  public void setNameSetList(
		net.sourceforge.czt.circus.ast.NameSetList
	nameSetList)
  {
                          nameSetList_ = nameSetList;
    }
  public net.sourceforge.czt.z.ast.Name getActionName()
  {
    return getName();
  }

  public net.sourceforge.czt.z.ast.ZName getActionZName()
  {
    return getZName();
  }

  public void setActionName(net.sourceforge.czt.z.ast.Name name)
  {
    setName(name);
  }

  public boolean isParamAction()
  {
    return (!getFormalParams().getNameTypePair().isEmpty());
  }

  public net.sourceforge.czt.circus.ast.ZSignatureList getZSignatureList()
  {
    net.sourceforge.czt.circus.ast.SignatureList sigList = getSignatureList();
    if (sigList instanceof net.sourceforge.czt.circus.ast.ZSignatureList)
    {
      return (net.sourceforge.czt.circus.ast.ZSignatureList) sigList;
    }
    final String message = "Expected the default (Circus) implementation of SignatureList" +
      " but found " + String.valueOf(sigList);
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature getFormalParams()
  {
    if (getZSignatureList().size() > FORMAL_PARAMS_INDEX)
    {
      return getZSignatureList().get(FORMAL_PARAMS_INDEX);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        FORMAL_PARAMS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature setFormalParams(net.sourceforge.czt.z.ast.Signature sig)
  {
    if (getZSignatureList().size() > FORMAL_PARAMS_INDEX)
    {
      assert sig != null;
      return getZSignatureList().set(FORMAL_PARAMS_INDEX, sig);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        FORMAL_PARAMS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature getLocalVars()
  {
    if (getZSignatureList().size() > LOCAL_VARS_INDEX)
    {
      return getZSignatureList().get(LOCAL_VARS_INDEX);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        LOCAL_VARS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature setLocalVars(net.sourceforge.czt.z.ast.Signature sig)
  {
    if (getZSignatureList().size() > LOCAL_VARS_INDEX)
    {
      assert sig != null;
      return getZSignatureList().set(LOCAL_VARS_INDEX, sig);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        LOCAL_VARS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature getUsedChannels()
  {
    if (getZSignatureList().size() > USED_CHANNELS_INDEX)
    {
      return getZSignatureList().get(USED_CHANNELS_INDEX);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        USED_CHANNELS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.z.ast.Signature setUsedChannels(net.sourceforge.czt.z.ast.Signature sig)
  {
    if (getZSignatureList().size() > USED_CHANNELS_INDEX)
    {
      assert sig != null;
      return getZSignatureList().set(USED_CHANNELS_INDEX, sig);
    }
    final String message = "Invalid action signature list size. Expected a value greater than " + 
        USED_CHANNELS_INDEX + " but found " + getZSignatureList().size();
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

  public net.sourceforge.czt.circus.ast.CircusCommunicationList getUsedCommunications()
  {
    return net.sourceforge.czt.circus.util.CircusUtils.assertCircusCommunicationList(getCommunicationList());
  }

  public net.sourceforge.czt.circus.ast.CircusChannelSetList getUsedChannelSets()
  {
    return net.sourceforge.czt.circus.util.CircusUtils.assertCircusChannelSetList(getChannelSetList());
  }

  public net.sourceforge.czt.circus.ast.CircusNameSetList getUsedNameSets()
  {
    return net.sourceforge.czt.circus.util.CircusUtils.assertCircusNameSetList(getNameSetList());
  }

}
