
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;


/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public class CircusFactoryImpl
  extends net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl
  implements net.sourceforge.czt.circus.ast.CircusFactory
{
  protected CircusFactoryImpl(net.sourceforge.czt.util.Visitor<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public CircusFactoryImpl()
  {
    super(new net.sourceforge.czt.circus.util.PrintVisitor());
  }

  public net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara()
  {
    net.sourceforge.czt.circus.ast.TransformerPara zedObject = new net.sourceforge.czt.circus.impl.TransformerParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.TransformerPred  transformerPred)
  {
    net.sourceforge.czt.circus.ast.TransformerPara zedObject = createTransformerPara();
    zedObject.setName(name);
    zedObject.setTransformerPred(transformerPred);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate()
  {
    net.sourceforge.czt.circus.ast.StateUpdate zedObject = new net.sourceforge.czt.circus.impl.StateUpdateImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.circus.ast.AssignmentPairs>
 assignmentPairs)
  {
    net.sourceforge.czt.circus.ast.StateUpdate zedObject = createStateUpdate();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    if (assignmentPairs != null) {
      zedObject.getAssignmentPairs().addAll(assignmentPairs);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess()
  {
    net.sourceforge.czt.circus.ast.IndexedProcess zedObject = new net.sourceforge.czt.circus.impl.IndexedProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.IndexedProcess zedObject = createIndexedProcess();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn()
  {
    net.sourceforge.czt.circus.ast.ProofObligationAnn zedObject = new net.sourceforge.czt.circus.impl.ProofObligationAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn( net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.circus.ast.ProofObligationAnn zedObject = createProofObligationAnn();
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara()
  {
    net.sourceforge.czt.circus.ast.ChannelSetPara zedObject = new net.sourceforge.czt.circus.impl.ChannelSetParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara( net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ChannelSetPara zedObject = createChannelSetPara();
    zedObject.setGenFormals(genFormals);
    zedObject.setName(name);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx()
  {
    net.sourceforge.czt.circus.ast.SeqProcessIdx zedObject = new net.sourceforge.czt.circus.impl.SeqProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.SeqProcessIdx zedObject = createSeqProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList()
  {
    net.sourceforge.czt.circus.ast.CircusCommunicationList zedObject = new net.sourceforge.czt.circus.impl.CircusCommunicationListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList(java.util.List<? extends net.sourceforge.czt.circus.ast.Communication>
 communication)
  {
    net.sourceforge.czt.circus.ast.CircusCommunicationList zedObject = createCircusCommunicationList();
    if (communication != null) {
      zedObject.getCommunication().addAll(communication);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet()
  {
    net.sourceforge.czt.circus.ast.CircusChannelSet zedObject = new net.sourceforge.czt.circus.impl.CircusChannelSetImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.circus.ast.CircusChannelSet zedObject = createCircusChannelSet();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx()
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx zedObject = new net.sourceforge.czt.circus.impl.ExtChoiceProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx zedObject = createExtChoiceProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn()
  {
    net.sourceforge.czt.circus.ast.ActionSignatureAnn zedObject = new net.sourceforge.czt.circus.impl.ActionSignatureAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature)
  {
    net.sourceforge.czt.circus.ast.ActionSignatureAnn zedObject = createActionSignatureAnn();
    zedObject.setActionSignature(actionSignature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList()
  {
    net.sourceforge.czt.circus.ast.ProcessSignatureList zedObject = new net.sourceforge.czt.circus.impl.ProcessSignatureListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ProcessSignature>
 processSignature)
  {
    net.sourceforge.czt.circus.ast.ProcessSignatureList zedObject = createProcessSignatureList();
    if (processSignature != null) {
      zedObject.getProcessSignature().addAll(processSignature);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList()
  {
    net.sourceforge.czt.circus.ast.CircusChannelSetList zedObject = new net.sourceforge.czt.circus.impl.CircusChannelSetListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    net.sourceforge.czt.circus.ast.CircusChannelSetList zedObject = createCircusChannelSetList();
    if (channelSet != null) {
      zedObject.getChannelSet().addAll(channelSet);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.HideAction createHideAction()
  {
    net.sourceforge.czt.circus.ast.HideAction zedObject = new net.sourceforge.czt.circus.impl.HideActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.HideAction createHideAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.HideAction zedObject = createHideAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelAction createParallelAction()
  {
    net.sourceforge.czt.circus.ast.ParallelAction zedObject = new net.sourceforge.czt.circus.impl.ParallelActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelAction createParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ParallelAction zedObject = createParallelAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    if (nameSet != null) {
      zedObject.getNameSet().addAll(nameSet);
    }
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte()
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIte zedObject = new net.sourceforge.czt.circus.impl.ExtChoiceProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIte zedObject = createExtChoiceProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx()
  {
    net.sourceforge.czt.circus.ast.ParallelProcessIdx zedObject = new net.sourceforge.czt.circus.impl.ParallelProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ParallelProcessIdx zedObject = createParallelProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.OutputFieldAnn createOutputFieldAnn()
  {
    net.sourceforge.czt.circus.ast.OutputFieldAnn zedObject = new net.sourceforge.czt.circus.impl.OutputFieldAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.OnTheFlyDefAnn createOnTheFlyDefAnn()
  {
    net.sourceforge.czt.circus.ast.OnTheFlyDefAnn zedObject = new net.sourceforge.czt.circus.impl.OnTheFlyDefAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction()
  {
    net.sourceforge.czt.circus.ast.LetVarAction zedObject = new net.sourceforge.czt.circus.impl.LetVarActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    net.sourceforge.czt.circus.ast.LetVarAction zedObject = createLetVarAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParamProcess createParamProcess()
  {
    net.sourceforge.czt.circus.ast.ParamProcess zedObject = new net.sourceforge.czt.circus.impl.ParamProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParamProcess createParamProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ParamProcess zedObject = createParamProcess();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara()
  {
    net.sourceforge.czt.circus.ast.NameSetPara zedObject = new net.sourceforge.czt.circus.impl.NameSetParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.NameSet  nameSet)
  {
    net.sourceforge.czt.circus.ast.NameSetPara zedObject = createNameSetPara();
    zedObject.setName(name);
    zedObject.setNameSet(nameSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte()
  {
    net.sourceforge.czt.circus.ast.SeqProcessIte zedObject = new net.sourceforge.czt.circus.impl.SeqProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.SeqProcessIte zedObject = createSeqProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess()
  {
    net.sourceforge.czt.circus.ast.ParallelProcess zedObject = new net.sourceforge.czt.circus.impl.ParallelProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ParallelProcess zedObject = createParallelProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction()
  {
    net.sourceforge.czt.circus.ast.SchExprAction zedObject = new net.sourceforge.czt.circus.impl.SchExprActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.circus.ast.SchExprAction zedObject = createSchExprAction();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.StopAction createStopAction()
  {
    net.sourceforge.czt.circus.ast.StopAction zedObject = new net.sourceforge.czt.circus.impl.StopActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl()
  {
    net.sourceforge.czt.circus.ast.QualifiedDecl zedObject = new net.sourceforge.czt.circus.impl.QualifiedDeclImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr,net.sourceforge.czt.circus.ast.ParamQualifier
 paramQualifier)
  {
    net.sourceforge.czt.circus.ast.QualifiedDecl zedObject = createQualifiedDecl();
    zedObject.setNameList(nameList);
    zedObject.setExpr(expr);
    zedObject.setParamQualifier(paramQualifier);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr()
  {
    net.sourceforge.czt.circus.ast.SigmaExpr zedObject = new net.sourceforge.czt.circus.impl.SigmaExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr( net.sourceforge.czt.z.ast.RefExpr  channel, net.sourceforge.czt.z.ast.Expr  value)
  {
    net.sourceforge.czt.circus.ast.SigmaExpr zedObject = createSigmaExpr();
    zedObject.setChannel(channel);
    zedObject.setValue(value);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte()
  {
    net.sourceforge.czt.circus.ast.ParallelProcessIte zedObject = new net.sourceforge.czt.circus.impl.ParallelProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ParallelProcessIte zedObject = createParallelProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CallProcess createCallProcess()
  {
    net.sourceforge.czt.circus.ast.CallProcess zedObject = new net.sourceforge.czt.circus.impl.CallProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CallProcess createCallProcess( net.sourceforge.czt.z.ast.RefExpr  callExpr, net.sourceforge.czt.z.ast.ExprList  actuals,net.sourceforge.czt.circus.ast.CallUsage
 callUsage)
  {
    net.sourceforge.czt.circus.ast.CallProcess zedObject = createCallProcess();
    zedObject.setCallExpr(callExpr);
    zedObject.setActuals(actuals);
    zedObject.setCallUsage(callUsage);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte()
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcessIte zedObject = new net.sourceforge.czt.circus.impl.IntChoiceProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcessIte zedObject = createIntChoiceProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature()
  {
    net.sourceforge.czt.circus.ast.ProcessSignature zedObject = new net.sourceforge.czt.circus.impl.ProcessSignatureImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ZNameList  genFormals,java.util.List<? extends net.sourceforge.czt.circus.ast.SignatureList>
 signatureList, net.sourceforge.czt.circus.ast.ChannelSetList  processChannelSets, net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate,net.sourceforge.czt.circus.ast.CallUsage
 callUsage)
  {
    net.sourceforge.czt.circus.ast.ProcessSignature zedObject = createProcessSignature();
    zedObject.setName(name);
    zedObject.setGenFormals(genFormals);
    if (signatureList != null) {
      zedObject.getSignatureList().addAll(signatureList);
    }
    zedObject.setProcessChannelSets(processChannelSets);
    zedObject.setStateUpdate(stateUpdate);
    zedObject.setCallUsage(callUsage);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte()
  {
    net.sourceforge.czt.circus.ast.ExtChoiceActionIte zedObject = new net.sourceforge.czt.circus.impl.ExtChoiceActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ExtChoiceActionIte zedObject = createExtChoiceActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand()
  {
    net.sourceforge.czt.circus.ast.IfGuardedCommand zedObject = new net.sourceforge.czt.circus.impl.IfGuardedCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList)
  {
    net.sourceforge.czt.circus.ast.IfGuardedCommand zedObject = createIfGuardedCommand();
    zedObject.setActionList(actionList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessType createProcessType()
  {
    net.sourceforge.czt.circus.ast.ProcessType zedObject = new net.sourceforge.czt.circus.impl.ProcessTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessType createProcessType( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature)
  {
    net.sourceforge.czt.circus.ast.ProcessType zedObject = createProcessType();
    zedObject.setProcessSignature(processSignature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction()
  {
    net.sourceforge.czt.circus.ast.InterleaveAction zedObject = new net.sourceforge.czt.circus.impl.InterleaveActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet)
  {
    net.sourceforge.czt.circus.ast.InterleaveAction zedObject = createInterleaveAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    if (nameSet != null) {
      zedObject.getNameSet().addAll(nameSet);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction()
  {
    net.sourceforge.czt.circus.ast.PrefixingAction zedObject = new net.sourceforge.czt.circus.impl.PrefixingActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.Communication  communication)
  {
    net.sourceforge.czt.circus.ast.PrefixingAction zedObject = createPrefixingAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setCommunication(communication);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred()
  {
    net.sourceforge.czt.circus.ast.ProcessTransformerPred zedObject = new net.sourceforge.czt.circus.impl.ProcessTransformerPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    net.sourceforge.czt.circus.ast.ProcessTransformerPred zedObject = createProcessTransformerPred();
    zedObject.setSchText(schText);
    zedObject.setTransformation(transformation);
    zedObject.setModel(model);
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList()
  {
    net.sourceforge.czt.circus.ast.CircusActionList zedObject = new net.sourceforge.czt.circus.impl.CircusActionListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.CircusActionList zedObject = createCircusActionList();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.Communication createCommunication()
  {
    net.sourceforge.czt.circus.ast.Communication zedObject = new net.sourceforge.czt.circus.impl.CommunicationImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.Communication createCommunication( net.sourceforge.czt.z.ast.RefExpr  channelExpr, net.sourceforge.czt.circus.ast.FieldList  fieldList,net.sourceforge.czt.circus.ast.CommUsage
 commUsage,net.sourceforge.czt.circus.ast.CommPattern
 commPattern, java.math.BigInteger  multiSych, Boolean  indexed)
  {
    net.sourceforge.czt.circus.ast.Communication zedObject = createCommunication();
    zedObject.setChannelExpr(channelExpr);
    zedObject.setFieldList(fieldList);
    zedObject.setCommUsage(commUsage);
    zedObject.setCommPattern(commPattern);
    zedObject.setMultiSych(multiSych);
    zedObject.setIndexed(indexed);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx()
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcessIdx zedObject = new net.sourceforge.czt.circus.impl.IntChoiceProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcessIdx zedObject = createIntChoiceProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InputField createInputField()
  {
    net.sourceforge.czt.circus.ast.InputField zedObject = new net.sourceforge.czt.circus.impl.InputFieldImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InputField createInputField( net.sourceforge.czt.z.ast.Name  variableName, net.sourceforge.czt.z.ast.Pred  restriction)
  {
    net.sourceforge.czt.circus.ast.InputField zedObject = createInputField();
    zedObject.setVariableName(variableName);
    zedObject.setRestriction(restriction);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.HideProcess createHideProcess()
  {
    net.sourceforge.czt.circus.ast.HideProcess zedObject = new net.sourceforge.czt.circus.impl.HideProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.HideProcess createHideProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.HideProcess zedObject = createHideProcess();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionPara createActionPara()
  {
    net.sourceforge.czt.circus.ast.ActionPara zedObject = new net.sourceforge.czt.circus.impl.ActionParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionPara createActionPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.CircusAction  circusAction)
  {
    net.sourceforge.czt.circus.ast.ActionPara zedObject = createActionPara();
    zedObject.setName(name);
    zedObject.setCircusAction(circusAction);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqAction createSeqAction()
  {
    net.sourceforge.czt.circus.ast.SeqAction zedObject = new net.sourceforge.czt.circus.impl.SeqActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqAction createSeqAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.SeqAction zedObject = createSeqAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess()
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcess zedObject = new net.sourceforge.czt.circus.impl.ExtChoiceProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    net.sourceforge.czt.circus.ast.ExtChoiceProcess zedObject = createExtChoiceProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction()
  {
    net.sourceforge.czt.circus.ast.LetMuAction zedObject = new net.sourceforge.czt.circus.impl.LetMuActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    net.sourceforge.czt.circus.ast.LetMuAction zedObject = createLetMuAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setParaList(paraList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList()
  {
    net.sourceforge.czt.circus.ast.ZSignatureList zedObject = new net.sourceforge.czt.circus.impl.ZSignatureListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList(java.util.List<? extends net.sourceforge.czt.z.ast.Signature>
 signature)
  {
    net.sourceforge.czt.circus.ast.ZSignatureList zedObject = createZSignatureList();
    if (signature != null) {
      zedObject.getSignature().addAll(signature);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand()
  {
    net.sourceforge.czt.circus.ast.AssignmentCommand zedObject = new net.sourceforge.czt.circus.impl.AssignmentCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand( net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    net.sourceforge.czt.circus.ast.AssignmentCommand zedObject = createAssignmentCommand();
    zedObject.setAssignmentPairs(assignmentPairs);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelType createChannelType()
  {
    net.sourceforge.czt.circus.ast.ChannelType zedObject = new net.sourceforge.czt.circus.impl.ChannelTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelType createChannelType( net.sourceforge.czt.z.ast.Type2  type)
  {
    net.sourceforge.czt.circus.ast.ChannelType zedObject = createChannelType();
    zedObject.setType(type);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionType createActionType()
  {
    net.sourceforge.czt.circus.ast.ActionType zedObject = new net.sourceforge.czt.circus.impl.ActionTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionType createActionType( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature)
  {
    net.sourceforge.czt.circus.ast.ActionType zedObject = createActionType();
    zedObject.setActionSignature(actionSignature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte()
  {
    net.sourceforge.czt.circus.ast.SeqActionIte zedObject = new net.sourceforge.czt.circus.impl.SeqActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.SeqActionIte zedObject = createSeqActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte()
  {
    net.sourceforge.czt.circus.ast.IntChoiceActionIte zedObject = new net.sourceforge.czt.circus.impl.IntChoiceActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.IntChoiceActionIte zedObject = createIntChoiceActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CallAction createCallAction()
  {
    net.sourceforge.czt.circus.ast.CallAction zedObject = new net.sourceforge.czt.circus.impl.CallActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CallAction createCallAction( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    net.sourceforge.czt.circus.ast.CallAction zedObject = createCallAction();
    zedObject.setName(name);
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand()
  {
    net.sourceforge.czt.circus.ast.SpecStmtCommand zedObject = new net.sourceforge.czt.circus.impl.SpecStmtCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand( net.sourceforge.czt.z.ast.NameList  frame,java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    net.sourceforge.czt.circus.ast.SpecStmtCommand zedObject = createSpecStmtCommand();
    zedObject.setFrame(frame);
    if (pred != null) {
      zedObject.getPred().addAll(pred);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn()
  {
    net.sourceforge.czt.circus.ast.StateUpdateAnn zedObject = new net.sourceforge.czt.circus.impl.StateUpdateAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn( net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate)
  {
    net.sourceforge.czt.circus.ast.StateUpdateAnn zedObject = createStateUpdateAnn();
    zedObject.setStateUpdate(stateUpdate);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl()
  {
    net.sourceforge.czt.circus.ast.ChannelDecl zedObject = new net.sourceforge.czt.circus.impl.ChannelDeclImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl(java.util.List<? extends net.sourceforge.czt.z.ast.NameList>
 nameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.circus.ast.ChannelDecl zedObject = createChannelDecl();
    if (nameList != null) {
      zedObject.getNameList().addAll(nameList);
    }
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.NameSetType createNameSetType()
  {
    net.sourceforge.czt.circus.ast.NameSetType zedObject = new net.sourceforge.czt.circus.impl.NameSetTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.NameSetType createNameSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    net.sourceforge.czt.circus.ast.NameSetType zedObject = createNameSetType();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx()
  {
    net.sourceforge.czt.circus.ast.InterleaveProcessIdx zedObject = new net.sourceforge.czt.circus.impl.InterleaveProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.InterleaveProcessIdx zedObject = createInterleaveProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn()
  {
    net.sourceforge.czt.circus.ast.ProcessSignatureAnn zedObject = new net.sourceforge.czt.circus.impl.ProcessSignatureAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature)
  {
    net.sourceforge.czt.circus.ast.ProcessSignatureAnn zedObject = createProcessSignatureAnn();
    zedObject.setProcessSignature(processSignature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.MuAction createMuAction()
  {
    net.sourceforge.czt.circus.ast.MuAction zedObject = new net.sourceforge.czt.circus.impl.MuActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.MuAction createMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Name  name)
  {
    net.sourceforge.czt.circus.ast.MuAction zedObject = createMuAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setName(name);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction()
  {
    net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject = new net.sourceforge.czt.circus.impl.ExtChoiceActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject = createExtChoiceAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SkipAction createSkipAction()
  {
    net.sourceforge.czt.circus.ast.SkipAction zedObject = new net.sourceforge.czt.circus.impl.SkipActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction()
  {
    net.sourceforge.czt.circus.ast.SubstitutionAction zedObject = new net.sourceforge.czt.circus.impl.SubstitutionActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    net.sourceforge.czt.circus.ast.SubstitutionAction zedObject = createSubstitutionAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setRenameList(renameList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType()
  {
    net.sourceforge.czt.circus.ast.ChannelSetType zedObject = new net.sourceforge.czt.circus.impl.ChannelSetTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    net.sourceforge.czt.circus.ast.ChannelSetType zedObject = createChannelSetType();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet()
  {
    net.sourceforge.czt.circus.ast.CircusNameSet zedObject = new net.sourceforge.czt.circus.impl.CircusNameSetImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.circus.ast.CircusNameSet zedObject = createCircusNameSet();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction()
  {
    net.sourceforge.czt.circus.ast.IntChoiceAction zedObject = new net.sourceforge.czt.circus.impl.IntChoiceActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.IntChoiceAction zedObject = createIntChoiceAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParamAction createParamAction()
  {
    net.sourceforge.czt.circus.ast.ParamAction zedObject = new net.sourceforge.czt.circus.impl.ParamActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParamAction createParamAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ParamAction zedObject = createParamAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList()
  {
    net.sourceforge.czt.circus.ast.CircusNameSetList zedObject = new net.sourceforge.czt.circus.impl.CircusNameSetListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet)
  {
    net.sourceforge.czt.circus.ast.CircusNameSetList zedObject = createCircusNameSetList();
    if (nameSet != null) {
      zedObject.getNameSet().addAll(nameSet);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessPara createProcessPara()
  {
    net.sourceforge.czt.circus.ast.ProcessPara zedObject = new net.sourceforge.czt.circus.impl.ProcessParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ProcessPara createProcessPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.circus.ast.CircusProcess  circusProcess)
  {
    net.sourceforge.czt.circus.ast.ProcessPara zedObject = createProcessPara();
    zedObject.setName(name);
    zedObject.setGenFormals(genFormals);
    zedObject.setCircusProcess(circusProcess);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction()
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelAction zedObject = new net.sourceforge.czt.circus.impl.AlphabetisedParallelActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelAction zedObject = createAlphabetisedParallelAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    if (nameSet != null) {
      zedObject.getNameSet().addAll(nameSet);
    }
    if (channelSet != null) {
      zedObject.getChannelSet().addAll(channelSet);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr()
  {
    net.sourceforge.czt.circus.ast.BasicChannelSetExpr zedObject = new net.sourceforge.czt.circus.impl.BasicChannelSetExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr( net.sourceforge.czt.circus.ast.CommunicationList  communicationList)
  {
    net.sourceforge.czt.circus.ast.BasicChannelSetExpr zedObject = createBasicChannelSetExpr();
    zedObject.setCommunicationList(communicationList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte()
  {
    net.sourceforge.czt.circus.ast.InterleaveProcessIte zedObject = new net.sourceforge.czt.circus.impl.InterleaveProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.InterleaveProcessIte zedObject = createInterleaveProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand()
  {
    net.sourceforge.czt.circus.ast.DoGuardedCommand zedObject = new net.sourceforge.czt.circus.impl.DoGuardedCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList)
  {
    net.sourceforge.czt.circus.ast.DoGuardedCommand zedObject = createDoGuardedCommand();
    zedObject.setActionList(actionList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction()
  {
    net.sourceforge.czt.circus.ast.GuardedAction zedObject = new net.sourceforge.czt.circus.impl.GuardedActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.circus.ast.GuardedAction zedObject = createGuardedAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess()
  {
    net.sourceforge.czt.circus.ast.SeqProcess zedObject = new net.sourceforge.czt.circus.impl.SeqProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    net.sourceforge.czt.circus.ast.SeqProcess zedObject = createSeqProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction()
  {
    net.sourceforge.czt.circus.ast.InterruptAction zedObject = new net.sourceforge.czt.circus.impl.InterruptActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.InterruptAction zedObject = createInterruptAction();
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte()
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte zedObject = new net.sourceforge.czt.circus.impl.AlphabetisedParallelProcessIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte zedObject = createAlphabetisedParallelProcessIte();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess()
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcess zedObject = new net.sourceforge.czt.circus.impl.IntChoiceProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    net.sourceforge.czt.circus.ast.IntChoiceProcess zedObject = createIntChoiceProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusStateAnn createCircusStateAnn()
  {
    net.sourceforge.czt.circus.ast.CircusStateAnn zedObject = new net.sourceforge.czt.circus.impl.CircusStateAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte()
  {
    net.sourceforge.czt.circus.ast.ParallelActionIte zedObject = new net.sourceforge.czt.circus.impl.ParallelActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.ParallelActionIte zedObject = createParallelActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    zedObject.setNameSet(nameSet);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess()
  {
    net.sourceforge.czt.circus.ast.RenameProcess zedObject = new net.sourceforge.czt.circus.impl.RenameProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    net.sourceforge.czt.circus.ast.RenameProcess zedObject = createRenameProcess();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setAssignmentPairs(assignmentPairs);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess()
  {
    net.sourceforge.czt.circus.ast.BasicProcess zedObject = new net.sourceforge.czt.circus.impl.BasicProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess( net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    net.sourceforge.czt.circus.ast.BasicProcess zedObject = createBasicProcess();
    zedObject.setParaList(paraList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.RenameAction createRenameAction()
  {
    net.sourceforge.czt.circus.ast.RenameAction zedObject = new net.sourceforge.czt.circus.impl.RenameActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.RenameAction createRenameAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs)
  {
    net.sourceforge.czt.circus.ast.RenameAction zedObject = createRenameAction();
    zedObject.setCircusAction(circusAction);
    zedObject.setAssignmentPairs(assignmentPairs);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignature createActionSignature()
  {
    net.sourceforge.czt.circus.ast.ActionSignature zedObject = new net.sourceforge.czt.circus.impl.ActionSignatureImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignature createActionSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.SignatureList  signatureList, net.sourceforge.czt.circus.ast.CommunicationList  communicationList, net.sourceforge.czt.circus.ast.ChannelSetList  channelSetList, net.sourceforge.czt.circus.ast.NameSetList  nameSetList)
  {
    net.sourceforge.czt.circus.ast.ActionSignature zedObject = createActionSignature();
    zedObject.setName(name);
    zedObject.setSignatureList(signatureList);
    zedObject.setCommunicationList(communicationList);
    zedObject.setChannelSetList(channelSetList);
    zedObject.setNameSetList(nameSetList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelPara createChannelPara()
  {
    net.sourceforge.czt.circus.ast.ChannelPara zedObject = new net.sourceforge.czt.circus.impl.ChannelParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChannelPara createChannelPara( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.circus.ast.ChannelPara zedObject = createChannelPara();
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred()
  {
    net.sourceforge.czt.circus.ast.ActionTransformerPred zedObject = new net.sourceforge.czt.circus.impl.ActionTransformerPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction)
  {
    net.sourceforge.czt.circus.ast.ActionTransformerPred zedObject = createActionTransformerPred();
    zedObject.setSchText(schText);
    zedObject.setTransformation(transformation);
    zedObject.setModel(model);
    if (circusAction != null) {
      zedObject.getCircusAction().addAll(circusAction);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList()
  {
    net.sourceforge.czt.circus.ast.CircusFieldList zedObject = new net.sourceforge.czt.circus.impl.CircusFieldListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList(java.util.List<? extends net.sourceforge.czt.circus.ast.Field>
 field)
  {
    net.sourceforge.czt.circus.ast.CircusFieldList zedObject = createCircusFieldList();
    if (field != null) {
      zedObject.getField().addAll(field);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ImplicitChannelAnn createImplicitChannelAnn()
  {
    net.sourceforge.czt.circus.ast.ImplicitChannelAnn zedObject = new net.sourceforge.czt.circus.impl.ImplicitChannelAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand()
  {
    net.sourceforge.czt.circus.ast.VarDeclCommand zedObject = new net.sourceforge.czt.circus.impl.VarDeclCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.CircusAction  circusAction)
  {
    net.sourceforge.czt.circus.ast.VarDeclCommand zedObject = createVarDeclCommand();
    zedObject.setDeclList(declList);
    zedObject.setCircusAction(circusAction);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType()
  {
    net.sourceforge.czt.circus.ast.CommunicationType zedObject = new net.sourceforge.czt.circus.impl.CommunicationTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    net.sourceforge.czt.circus.ast.CommunicationType zedObject = createCommunicationType();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte()
  {
    net.sourceforge.czt.circus.ast.InterleaveActionIte zedObject = new net.sourceforge.czt.circus.impl.InterleaveActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet)
  {
    net.sourceforge.czt.circus.ast.InterleaveActionIte zedObject = createInterleaveActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    zedObject.setNameSet(nameSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.DotField createDotField()
  {
    net.sourceforge.czt.circus.ast.DotField zedObject = new net.sourceforge.czt.circus.impl.DotFieldImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.DotField createDotField( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.circus.ast.DotField zedObject = createDotField();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx()
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx zedObject = new net.sourceforge.czt.circus.impl.AlphabetisedParallelProcessIdxImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx zedObject = createAlphabetisedParallelProcessIdx();
    zedObject.setCircusProcess(circusProcess);
    zedObject.setDeclList(declList);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ChaosAction createChaosAction()
  {
    net.sourceforge.czt.circus.ast.ChaosAction zedObject = new net.sourceforge.czt.circus.impl.ChaosActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess()
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess zedObject = new net.sourceforge.czt.circus.impl.AlphabetisedParallelProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet)
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess zedObject = createAlphabetisedParallelProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    if (channelSet != null) {
      zedObject.getChannelSet().addAll(channelSet);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte()
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte zedObject = new net.sourceforge.czt.circus.impl.AlphabetisedParallelActionIteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet)
  {
    net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte zedObject = createAlphabetisedParallelActionIte();
    zedObject.setCircusAction(circusAction);
    zedObject.setDeclList(declList);
    zedObject.setNameSet(nameSet);
    zedObject.setChannelSet(channelSet);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs()
  {
    net.sourceforge.czt.circus.ast.AssignmentPairs zedObject = new net.sourceforge.czt.circus.impl.AssignmentPairsImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs( net.sourceforge.czt.z.ast.NameList  lHS, net.sourceforge.czt.z.ast.ExprList  rHS)
  {
    net.sourceforge.czt.circus.ast.AssignmentPairs zedObject = createAssignmentPairs();
    zedObject.setLHS(lHS);
    zedObject.setRHS(rHS);
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess()
  {
    net.sourceforge.czt.circus.ast.InterleaveProcess zedObject = new net.sourceforge.czt.circus.impl.InterleaveProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess)
  {
    net.sourceforge.czt.circus.ast.InterleaveProcess zedObject = createInterleaveProcess();
    if (circusProcess != null) {
      zedObject.getCircusProcess().addAll(circusProcess);
    }
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList()
  {
    net.sourceforge.czt.circus.ast.ActionSignatureList zedObject = new net.sourceforge.czt.circus.impl.ActionSignatureListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ActionSignature>
 actionSignature)
  {
    net.sourceforge.czt.circus.ast.ActionSignatureList zedObject = createActionSignatureList();
    if (actionSignature != null) {
      zedObject.getActionSignature().addAll(actionSignature);
    }
    return zedObject;
  }

  /** Creates a parameterless call action. This is a convenience method */
  public net.sourceforge.czt.circus.ast.CallAction createCallAction(net.sourceforge.czt.z.ast.Name name)
  {
    return createCallAction(name, createZExprList());
  }

  /** Creates a parameterless call process with empty generic actuals. This is a convenience method */
  public net.sourceforge.czt.circus.ast.CallProcess createCallProcess(net.sourceforge.czt.z.ast.Name name)
  {
    return createCallProcess(createRefExpr(name, createZExprList(),
      Boolean.FALSE, Boolean.TRUE),
      createZExprList(), net.sourceforge.czt.circus.ast.CallUsage.Parameterised);
  }

  /** Creates an empty BasicNameSet. This is a convenience method */
  public net.sourceforge.czt.circus.ast.CircusNameSet createEmptyCircusNameSet()
  {
    return createCircusNameSet(createSetExpr(createZExprList()));
  }

  /** Creates an empty BasicChannelSet. This is a convenience method */
  public net.sourceforge.czt.circus.ast.CircusChannelSet createEmptyCircusChannelSet()
  {
    return createCircusChannelSet(createSetExpr(createZExprList()));
  }

  private <E> java.util.List<E> newList(@SuppressWarnings("unchecked") E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }
  
  private final net.sourceforge.czt.z.ast.ZName synchNameWithoutID_ = createZName(
    net.sourceforge.czt.circus.util.CircusString.CIRCUSSYNCH,
    createZStrokeList(), null);

  public net.sourceforge.czt.z.ast.ZName createSynchName()
  {
    return synchNameWithoutID_;
  }

  public net.sourceforge.czt.z.ast.PowerType createSynchType()
  {
	  net.sourceforge.czt.z.ast.PowerType result = createPowerType(createGivenType(createSynchName()));
    return result;
  }

  public net.sourceforge.czt.circus.ast.DotField createOutputField(net.sourceforge.czt.z.ast.Expr e)
  {
	  net.sourceforge.czt.circus.ast.DotField result = createDotField(e);
    result.getAnns().add(createOutputFieldAnn());
    return result;
  }
  
  public net.sourceforge.czt.circus.ast.ActionSignature createCompleteActionSignature(
    net.sourceforge.czt.z.ast.Name actionName,
    net.sourceforge.czt.z.ast.Signature formals,
    net.sourceforge.czt.z.ast.Signature localVars,
    net.sourceforge.czt.z.ast.Signature usedChannels,
    net.sourceforge.czt.circus.ast.CommunicationList usedComms,
    net.sourceforge.czt.circus.ast.ChannelSetList usedChannelSets,
    net.sourceforge.czt.circus.ast.NameSetList usedNameSets)
  {
	  net.sourceforge.czt.circus.ast.ActionSignature result = 
			  createActionSignature(actionName, 
					  createZSignatureList(newList(formals, localVars, usedChannels)),
					  	usedComms, usedChannelSets, usedNameSets);
    return result;
  }

  public net.sourceforge.czt.circus.ast.ActionSignature createEmptyActionSignature()
  {
    // create an empty signature, but with the right place holders.
	  net.sourceforge.czt.circus.ast.ActionSignature result = createCompleteActionSignature(
      null,                              // null action name
      createSignature(),                 // empty formal paramenters
      createSignature(),                 // empty local variables
      createSignature(),                 // empty channels
      createCircusCommunicationList(),   // empty communications
      createCircusChannelSetList(),      // empty channel sets 
      createCircusNameSetList()          // empty name sets
      );
    return result;
  }
  
  public net.sourceforge.czt.circus.ast.ActionSignature createInitialMuActionSignature(net.sourceforge.czt.z.ast.Name actionName)
  {
    if (actionName == null)
    {
        throw new IllegalArgumentException("Invalid (null) MuAction name");
    } 
    return createCompleteActionSignature(actionName,
      createSignature(),                 // empty formal paramenters
      createSignature(),                 // empty local variables
      createSignature(),                 // empty channels
      createCircusCommunicationList(),   // empty communications
      createCircusChannelSetList(),      // empty channel sets 
      createCircusNameSetList()          // empty name sets
      );
  }  

  public net.sourceforge.czt.circus.ast.ActionSignature createActionSignature(
    net.sourceforge.czt.z.ast.Name actionName,
    net.sourceforge.czt.z.ast.Signature formals,
    net.sourceforge.czt.z.ast.Signature localVars,
    net.sourceforge.czt.z.ast.Signature usedChannels,
    net.sourceforge.czt.circus.ast.CommunicationList usedComms,
    net.sourceforge.czt.circus.ast.ChannelSetList usedChannelSets,
    net.sourceforge.czt.circus.ast.NameSetList usedNameSets)
  {
    return createCompleteActionSignature(actionName, formals, 
        localVars, usedChannels, usedComms, usedChannelSets, 
        usedNameSets);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createCompleteProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    net.sourceforge.czt.circus.ast.ProcessSignatureList processSignatures,
    net.sourceforge.czt.circus.ast.ActionSignatureList actionSignatures,
    net.sourceforge.czt.circus.ast.ZSignatureList basicProcessLocalZSignatures,
    net.sourceforge.czt.circus.ast.ChannelSetList parallelProcessChannelSets,
    net.sourceforge.czt.circus.ast.StateUpdate stateUpdate,
    net.sourceforge.czt.circus.ast.CallUsage usage)
  {
    return createProcessSignature(name, genFormals,
   		this.<net.sourceforge.czt.circus.ast.SignatureList>newList(
        // list0 = ZSignatureList getMainSignatures()
        createZSignatureList(
          // list0.0 = Signature paramOrIndexes          
          // list0.1 = Signature stateSignature
          newList(paramOrIndexes, stateSignature)),
        // list1 = ProcessSignatureList getProcessSignatures()
        processSignatures,
        // list2 = ActionSignatureList getActionSignatures()
        actionSignatures,
        // list3 = ZSignatureList getBasicProcessLocalZSignatures()
        basicProcessLocalZSignatures
      ),
      parallelProcessChannelSets,
      stateUpdate,
      usage);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createEmptyProcessSignature()
  {
    return createCompleteProcessSignature(null, createZNameList(),
      createSignature(),
      createSignature(), createProcessSignatureList(),
      createActionSignatureList(), createZSignatureList(),
      createCircusChannelSetList(), createStateUpdate(),
      net.sourceforge.czt.circus.ast.CallUsage.Parameterised);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.circus.ast.ProcessSignatureList processSignatures,
    net.sourceforge.czt.circus.ast.CallUsage usage)
  {
    return createCompleteProcessSignature(name, genFormals, paramOrIndexes,
      createSignature(), processSignatures, createActionSignatureList(),
      createZSignatureList(), createCircusChannelSetList(), 
      createStateUpdate(), usage);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createChannelSetProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.circus.ast.ProcessSignatureList processSignatures,
    net.sourceforge.czt.circus.ast.ChannelSetList channelSets,
    net.sourceforge.czt.circus.ast.CallUsage usage)
  {
    return createCompleteProcessSignature(name, genFormals, paramOrIndexes,
      createSignature(), processSignatures, createActionSignatureList(),
      createZSignatureList(), channelSets, createStateUpdate(), usage);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createBasicProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    net.sourceforge.czt.circus.ast.ActionSignatureList actionSignatures,
    net.sourceforge.czt.circus.ast.ZSignatureList basicProcessLocalZSignatures,
    net.sourceforge.czt.circus.ast.StateUpdate stateUpdate,
    net.sourceforge.czt.circus.ast.CallUsage usage)
  {
    return createCompleteProcessSignature(name, genFormals, paramOrIndexes,
      stateSignature, createProcessSignatureList(), actionSignatures,
      basicProcessLocalZSignatures, createCircusChannelSetList(), stateUpdate, usage);
  }

  public net.sourceforge.czt.circus.ast.ProcessSignature createBasicProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    net.sourceforge.czt.circus.ast.ActionSignatureList actionSignatures,
    net.sourceforge.czt.circus.ast.ZSignatureList basicProcessLocalZSignatures,
    net.sourceforge.czt.circus.ast.CallUsage usage)
  {
    return createBasicProcessSignature(name, genFormals, paramOrIndexes,
      stateSignature, actionSignatures, basicProcessLocalZSignatures, 
      createStateUpdate(), usage);
  }

}
