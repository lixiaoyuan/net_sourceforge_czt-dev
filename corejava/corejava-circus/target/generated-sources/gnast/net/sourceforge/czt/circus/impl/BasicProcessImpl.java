
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.circus.ast.BasicProcess}.
 *
 * @author GnAST version 1.6-cdh
 */
public class BasicProcessImpl
extends 		 		net.sourceforge.czt.circus.impl.CircusProcessImpl
 	  implements net.sourceforge.czt.circus.ast.BasicProcess
{





  /**
   * static instance count for BasicProcessImpl
   */
   private static long instanceCount_ = 0;
   
  /**
   * public attribute determining whether to log to the 
   * standard output information about who is creating 
   * this instance of BasicProcessImpl (e.g., ic >= sl)
   */
  //private static final long startLoggingFrom_ = Long.MAX_VALUE;
   
    // cannot be final because JokerCommunicationImpl extends CommunicationImpl
  public /*final*/ static boolean countingFinaliser() { return false; }
  public /*final*/ static long instancesFinalised() 
  { 
    throw new UnsupportedOperationException("GnAST AST finalisers have not been set"); 
  }
  
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected BasicProcessImpl()
  {
    this(null);
  }

  protected BasicProcessImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
    countInstance();
  }
  
  private static synchronized void countInstance()
  {
	  instanceCount_++;
  }
  
  /**
   * Compares the specified object with this BasicProcessImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) BasicProcessImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //BasicProcessImpl object = ((BasicProcessImpl) obj);
        if (paraList_ != null) {
          if (!paraList_.equals(((BasicProcessImpl) obj).paraList_)) {
            return false;
          }
        }
        else {
          if (((BasicProcessImpl) obj).paraList_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this BasicProcessImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "BasicProcessImpl".hashCode();
    if (paraList_ != null) {
      hashCode += 31 * paraList_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.circus.visitor.BasicProcessVisitor) {
      net.sourceforge.czt.circus.visitor.BasicProcessVisitor<R> visitor = 
      	  (net.sourceforge.czt.circus.visitor.BasicProcessVisitor<R>) v;
      return visitor.visitBasicProcess(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public BasicProcessImpl create(Object[] args)
  {
    BasicProcessImpl zedObject = null;
    try {
	  	  			  	net.sourceforge.czt.z.ast.ParaList paraList = (
						net.sourceforge.czt.z.ast.ParaList) args[0];
	        zedObject = new BasicProcessImpl(getFactory());
      zedObject.setParaList(paraList);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getParaList() };
    return erg;
  }
  
  /** Only concrete classes get the instance count method visible */
  // JokerCommunication in circuspatt extends CommunicationImpl which is not abstract? weird...
  public static /*final*/ long instanceCount()
  {
    return instanceCount_;
  }


  private
            		net.sourceforge.czt.z.ast.ParaList
  paraList_;

  public 
		net.sourceforge.czt.z.ast.ParaList
  getParaList()
  {
    return paraList_;
  }

  public void setParaList(
		net.sourceforge.czt.z.ast.ParaList
	paraList)
  {
                          paraList_ = paraList;
    }
  public net.sourceforge.czt.z.ast.ZParaList getZParaList()
  {
    net.sourceforge.czt.z.ast.ParaList pl = getParaList();
    if (pl instanceof net.sourceforge.czt.z.ast.ZParaList) {
      return (net.sourceforge.czt.z.ast.ZParaList) pl;
    }
    final String message = "Expected the default (Z) implementation of ParaList" +
      " but found " + String.valueOf(pl);
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }
    
  public net.sourceforge.czt.z.ast.AxPara getStatePara()
  {       
    for(net.sourceforge.czt.z.ast.Para para : getZParaList())
    {
      if (net.sourceforge.czt.circus.util.CircusUtils.isStatePara(para))
      {        
        assert net.sourceforge.czt.z.util.ZUtils.isHorizontalDef(para) : "state para is not horizontal AxPara";
        return (net.sourceforge.czt.z.ast.AxPara)para;
      }
    }
    return null;    
    // DESIGN: Parser now make both versions a horizontal box.
    //         This makes the type checker life easier and more uniform
    // state  is actionPara ==> OnTheFlyAction    
    // assert (!(r instanceof net.sourceforge.czt.circus.ast.ActionPara) || 
    //        net.sourceforge.czt.circus.util.CircusUtils.isOnTheFly(r)
    //       );
  }
  
  public boolean isStateValid()
  {
    net.sourceforge.czt.z.ast.AxPara state = getStatePara();
    boolean result = state != null;    
    if (result)
    {
      for(net.sourceforge.czt.z.ast.Para para : getZParaList())
      {
        if (net.sourceforge.czt.circus.util.CircusUtils.isStatePara(para))
        {        
          // if more than one is found, then stop and say "false".
          result = (para == state);
          if (!result) break;
        }
      }
    }
    return result;
  }
  
  public boolean isDefaultState()
  {
    boolean result = isStateValid();
    if (result)
    {
      net.sourceforge.czt.z.ast.AxPara state = getStatePara();
      result = net.sourceforge.czt.z.util.ZUtils.assertZName(
        net.sourceforge.czt.z.util.ZUtils.getSchemaName(state)).getWord().startsWith(
          net.sourceforge.czt.circus.util.CircusUtils.DEFAULT_PROCESS_STATE_NAME);
    }
    return result;
  }
  
  public net.sourceforge.czt.circus.ast.CircusAction getMainAction()
  {      
    for(net.sourceforge.czt.z.ast.Para para : getOnTheFlyPara())
    {
      if (para instanceof net.sourceforge.czt.circus.ast.ActionPara &&
          net.sourceforge.czt.circus.util.CircusUtils.isOnTheFly(para) &&
          ((net.sourceforge.czt.circus.ast.ActionPara)para).getZName().getWord().startsWith(
              net.sourceforge.czt.circus.util.CircusUtils.DEFAULT_MAIN_ACTION_NAME))          
      {
        return ((net.sourceforge.czt.circus.ast.ActionPara)para).getCircusAction();
      }  
    }
    return null;
  }
  
  public boolean isMainActionValid()
  {
    net.sourceforge.czt.circus.ast.CircusAction ma = getMainAction();
    boolean result = ma != null;    
    if (result)
    {
      for(net.sourceforge.czt.z.ast.Para para : getOnTheFlyPara())
      {
        if (para instanceof net.sourceforge.czt.circus.ast.ActionPara &&
            net.sourceforge.czt.circus.util.CircusUtils.isOnTheFly(para) &&
            ((net.sourceforge.czt.circus.ast.ActionPara)para).getZName().getWord().startsWith(
                net.sourceforge.czt.circus.util.CircusUtils.DEFAULT_MAIN_ACTION_NAME))          
        {
          // if more than one is found, then stop and say "false".
          result = (((net.sourceforge.czt.circus.ast.ActionPara)para).getCircusAction() == ma);
          if (!result) break;
        }  
      }
    }
    return result;
  }

  public java.util.List<? extends net.sourceforge.czt.z.ast.Para> getLocalPara()
  {
    net.sourceforge.czt.z.ast.ZParaList result = net.sourceforge.czt.z.util.ZUtils.FACTORY.createZParaList();    
    result.addAll(getZParaList());
    
    java.util.List<? extends net.sourceforge.czt.z.ast.Para> onTheFly = getOnTheFlyPara();    
    result.removeAll(onTheFly);
    
    assert (result.size() == getZParaList().size() - onTheFly.size());    
    return java.util.Collections.unmodifiableList(result);
  }  
  
  public java.util.List<? extends net.sourceforge.czt.z.ast.Para> getOnTheFlyPara()
  {
    net.sourceforge.czt.z.ast.ZParaList result = net.sourceforge.czt.z.util.ZUtils.FACTORY.createZParaList();    
    for(net.sourceforge.czt.z.ast.Para para : getZParaList())
    {
      if (net.sourceforge.czt.circus.util.CircusUtils.isOnTheFly(para))
      {
        result.add(para);
      }      
    }
    return java.util.Collections.unmodifiableList(result);
  }  

  public net.sourceforge.czt.z.ast.Name getStateParaName()
  {
    net.sourceforge.czt.z.ast.Name result = null;
    net.sourceforge.czt.z.ast.AxPara state = getStatePara();
    if (state != null)
    {
      result = net.sourceforge.czt.circus.util.CircusUtils.getSchemaName(state);
    }
    return result;    
  }

  public net.sourceforge.czt.z.ast.ZName getStateParaZName()
  {
    net.sourceforge.czt.z.ast.Name result = getStateParaName();
    if (result != null)
    {
      return net.sourceforge.czt.z.util.ZUtils.assertZName(result);
    }
    return null;
  }

}
