
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.zpatt.jaxb.AstToJaxb
  implements net.sourceforge.czt.circus.visitor.CircusVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circus.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circus.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.circus.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTransformerPara(net.sourceforge.czt.circus.ast.TransformerPara zedObject)
  {
    getLogger().entering(getClassName(), "visitTransformerPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.TransformerPara jaxbObject = objectFactory_.createTransformerPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = TransformerPred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getTransformerPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getTransformerPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.TransformerPred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.TransformerPred>)term.accept(this);
        jaxbObject.setTransformerPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitTransformerPara", jaxbObject);
      return objectFactory_.createTransformerPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TransformerPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitStateUpdate(net.sourceforge.czt.circus.ast.StateUpdate zedObject)
  {
    getLogger().entering(getClassName(), "visitStateUpdate", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.StateUpdate jaxbObject = objectFactory_.createStateUpdate();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = AssignmentPairs
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.AssignmentPairs o : zedObject.getAssignmentPairs()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs>)r;
				  jaxbObject.getAssignmentPairs().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitStateUpdate", jaxbObject);
      return objectFactory_.createStateUpdate(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StateUpdate to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIndexedProcess(net.sourceforge.czt.circus.ast.IndexedProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitIndexedProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IndexedProcess jaxbObject = objectFactory_.createIndexedProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitIndexedProcess", jaxbObject);
      return objectFactory_.createIndexedProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IndexedProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofObligationAnn(net.sourceforge.czt.circus.ast.ProofObligationAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitProofObligationAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProofObligationAnn jaxbObject = objectFactory_.createProofObligationAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitProofObligationAnn", jaxbObject);
      return objectFactory_.createProofObligationAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofObligationAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChannelSetPara(net.sourceforge.czt.circus.ast.ChannelSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSetPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara jaxbObject = objectFactory_.createChannelSetPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = GenFormals
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getGenFormals() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getGenFormals();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setGenFormals(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitChannelSetPara", jaxbObject);
      return objectFactory_.createChannelSetPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSetPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqProcessIdx(net.sourceforge.czt.circus.ast.SeqProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx jaxbObject = objectFactory_.createSeqProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSeqProcessIdx", jaxbObject);
      return objectFactory_.createSeqProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusCommunicationList(net.sourceforge.czt.circus.ast.CircusCommunicationList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusCommunicationList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusCommunicationList jaxbObject = objectFactory_.createCircusCommunicationList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Communication
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.Communication o : zedObject.getCommunication()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication>)r;
				  jaxbObject.getCommunication().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.Communication";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCircusCommunicationList", jaxbObject);
      return objectFactory_.createCircusCommunicationList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusCommunicationList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusChannelSet(net.sourceforge.czt.circus.ast.CircusChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusChannelSet", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusChannelSet jaxbObject = objectFactory_.createCircusChannelSet();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitCircusChannelSet", jaxbObject);
      return objectFactory_.createCircusChannelSet(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusChannelSet to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExtChoiceProcessIdx(net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx jaxbObject = objectFactory_.createExtChoiceProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitExtChoiceProcessIdx", jaxbObject);
      return objectFactory_.createExtChoiceProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionSignatureAnn(net.sourceforge.czt.circus.ast.ActionSignatureAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitActionSignatureAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionSignatureAnn jaxbObject = objectFactory_.createActionSignatureAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ActionSignature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getActionSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getActionSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature>)term.accept(this);
        jaxbObject.setActionSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitActionSignatureAnn", jaxbObject);
      return objectFactory_.createActionSignatureAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionSignatureAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessSignatureList(net.sourceforge.czt.circus.ast.ProcessSignatureList zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessSignatureList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureList jaxbObject = objectFactory_.createProcessSignatureList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProcessSignature
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.ProcessSignature o : zedObject.getProcessSignature()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature>)r;
				  jaxbObject.getProcessSignature().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.ProcessSignature";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProcessSignatureList", jaxbObject);
      return objectFactory_.createProcessSignatureList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessSignatureList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusChannelSetList(net.sourceforge.czt.circus.ast.CircusChannelSetList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusChannelSetList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusChannelSetList jaxbObject = objectFactory_.createCircusChannelSetList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ChannelSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.ChannelSet o : zedObject.getChannelSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)r;
				  jaxbObject.getChannelSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.ChannelSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCircusChannelSetList", jaxbObject);
      return objectFactory_.createCircusChannelSetList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusChannelSetList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitHideAction(net.sourceforge.czt.circus.ast.HideAction zedObject)
  {
    getLogger().entering(getClassName(), "visitHideAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.HideAction jaxbObject = objectFactory_.createHideAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitHideAction", jaxbObject);
      return objectFactory_.createHideAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelAction(net.sourceforge.czt.circus.ast.ParallelAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParallelAction jaxbObject = objectFactory_.createParallelAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = NameSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.NameSet o : zedObject.getNameSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)r;
				  jaxbObject.getNameSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.NameSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitParallelAction", jaxbObject);
      return objectFactory_.createParallelAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExtChoiceProcessIte(net.sourceforge.czt.circus.ast.ExtChoiceProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte jaxbObject = objectFactory_.createExtChoiceProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitExtChoiceProcessIte", jaxbObject);
      return objectFactory_.createExtChoiceProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelProcessIdx(net.sourceforge.czt.circus.ast.ParallelProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdx jaxbObject = objectFactory_.createParallelProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitParallelProcessIdx", jaxbObject);
      return objectFactory_.createParallelProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOutputFieldAnn(net.sourceforge.czt.circus.ast.OutputFieldAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitOutputFieldAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.OutputFieldAnn jaxbObject = objectFactory_.createOutputFieldAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitOutputFieldAnn", jaxbObject);
      return objectFactory_.createOutputFieldAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OutputFieldAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOnTheFlyDefAnn(net.sourceforge.czt.circus.ast.OnTheFlyDefAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitOnTheFlyDefAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnn jaxbObject = objectFactory_.createOnTheFlyDefAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitOnTheFlyDefAnn", jaxbObject);
      return objectFactory_.createOnTheFlyDefAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OnTheFlyDefAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLetVarAction(net.sourceforge.czt.circus.ast.LetVarAction zedObject)
  {
    getLogger().entering(getClassName(), "visitLetVarAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.LetVarAction jaxbObject = objectFactory_.createLetVarAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitLetVarAction", jaxbObject);
      return objectFactory_.createLetVarAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetVarAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParamProcess(net.sourceforge.czt.circus.ast.ParamProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitParamProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParamProcess jaxbObject = objectFactory_.createParamProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitParamProcess", jaxbObject);
      return objectFactory_.createParamProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNameSetPara(net.sourceforge.czt.circus.ast.NameSetPara zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSetPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.NameSetPara jaxbObject = objectFactory_.createNameSetPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = NameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)term.accept(this);
        jaxbObject.setNameSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitNameSetPara", jaxbObject);
      return objectFactory_.createNameSetPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSetPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqProcessIte(net.sourceforge.czt.circus.ast.SeqProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte jaxbObject = objectFactory_.createSeqProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSeqProcessIte", jaxbObject);
      return objectFactory_.createSeqProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelProcess(net.sourceforge.czt.circus.ast.ParallelProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParallelProcess jaxbObject = objectFactory_.createParallelProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitParallelProcess", jaxbObject);
      return objectFactory_.createParallelProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSchExprAction(net.sourceforge.czt.circus.ast.SchExprAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSchExprAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SchExprAction jaxbObject = objectFactory_.createSchExprAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitSchExprAction", jaxbObject);
      return objectFactory_.createSchExprAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchExprAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitStopAction(net.sourceforge.czt.circus.ast.StopAction zedObject)
  {
    getLogger().entering(getClassName(), "visitStopAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.StopAction jaxbObject = objectFactory_.createStopAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitStopAction", jaxbObject);
      return objectFactory_.createStopAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StopAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitQualifiedDecl(net.sourceforge.czt.circus.ast.QualifiedDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitQualifiedDecl", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.QualifiedDecl jaxbObject = objectFactory_.createQualifiedDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = ParamQualifier
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getParamQualifier() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setParamQualifier(net.sourceforge.czt.circus.jaxb.gen.ParamQualifier.fromValue(zedObject.getParamQualifier().toString()));
      }
      getLogger().exiting(getClassName(), "visitQualifiedDecl", jaxbObject);
      return objectFactory_.createQualifiedDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a QualifiedDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSigmaExpr(net.sourceforge.czt.circus.ast.SigmaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSigmaExpr", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SigmaExpr jaxbObject = objectFactory_.createSigmaExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Channel
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannel() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannel();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr>)term.accept(this);
        jaxbObject.setChannel(newValue);
      }
// prop.Name   = Value
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getValue() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getValue();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setValue(newValue);
      }
      getLogger().exiting(getClassName(), "visitSigmaExpr", jaxbObject);
      return objectFactory_.createSigmaExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SigmaExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelProcessIte(net.sourceforge.czt.circus.ast.ParallelProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIte jaxbObject = objectFactory_.createParallelProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitParallelProcessIte", jaxbObject);
      return objectFactory_.createParallelProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCallProcess(net.sourceforge.czt.circus.ast.CallProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitCallProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CallProcess jaxbObject = objectFactory_.createCallProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CallExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCallExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCallExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr>)term.accept(this);
        jaxbObject.setCallExpr(newValue);
      }
// prop.Name   = Actuals
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getActuals() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getActuals();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setActuals(newValue);
      }
// prop.Name   = CallUsage
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCallUsage() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCallUsage(net.sourceforge.czt.circus.jaxb.gen.CallUsage.fromValue(zedObject.getCallUsage().toString()));
      }
      getLogger().exiting(getClassName(), "visitCallProcess", jaxbObject);
      return objectFactory_.createCallProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIntChoiceProcessIte(net.sourceforge.czt.circus.ast.IntChoiceProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte jaxbObject = objectFactory_.createIntChoiceProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitIntChoiceProcessIte", jaxbObject);
      return objectFactory_.createIntChoiceProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessSignature(net.sourceforge.czt.circus.ast.ProcessSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessSignature", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessSignature jaxbObject = objectFactory_.createProcessSignature();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = GenFormals
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getGenFormals() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getGenFormals();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZNameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZNameList>)term.accept(this);
        jaxbObject.setGenFormals(newValue);
      }
// prop.Name   = SignatureList
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.SignatureList o : zedObject.getSignatureList()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.SignatureList> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.SignatureList>)r;
				  jaxbObject.getSignatureList().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.SignatureList";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ProcessChannelSets
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProcessChannelSets() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProcessChannelSets();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSetList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSetList>)term.accept(this);
        jaxbObject.setProcessChannelSets(newValue);
      }
// prop.Name   = StateUpdate
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStateUpdate() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStateUpdate();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.StateUpdate> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.StateUpdate>)term.accept(this);
        jaxbObject.setStateUpdate(newValue);
      }
// prop.Name   = CallUsage
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCallUsage() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCallUsage(net.sourceforge.czt.circus.jaxb.gen.CallUsage.fromValue(zedObject.getCallUsage().toString()));
      }
      getLogger().exiting(getClassName(), "visitProcessSignature", jaxbObject);
      return objectFactory_.createProcessSignature(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessSignature to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExtChoiceActionIte(net.sourceforge.czt.circus.ast.ExtChoiceActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte jaxbObject = objectFactory_.createExtChoiceActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitExtChoiceActionIte", jaxbObject);
      return objectFactory_.createExtChoiceActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIfGuardedCommand(net.sourceforge.czt.circus.ast.IfGuardedCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitIfGuardedCommand", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand jaxbObject = objectFactory_.createIfGuardedCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ActionList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getActionList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getActionList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionList>)term.accept(this);
        jaxbObject.setActionList(newValue);
      }
      getLogger().exiting(getClassName(), "visitIfGuardedCommand", jaxbObject);
      return objectFactory_.createIfGuardedCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IfGuardedCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessType(net.sourceforge.czt.circus.ast.ProcessType zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessType jaxbObject = objectFactory_.createProcessType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProcessSignature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProcessSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProcessSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature>)term.accept(this);
        jaxbObject.setProcessSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitProcessType", jaxbObject);
      return objectFactory_.createProcessType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterleaveAction(net.sourceforge.czt.circus.ast.InterleaveAction zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterleaveAction jaxbObject = objectFactory_.createInterleaveAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = NameSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.NameSet o : zedObject.getNameSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)r;
				  jaxbObject.getNameSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.NameSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitInterleaveAction", jaxbObject);
      return objectFactory_.createInterleaveAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPrefixingAction(net.sourceforge.czt.circus.ast.PrefixingAction zedObject)
  {
    getLogger().entering(getClassName(), "visitPrefixingAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.PrefixingAction jaxbObject = objectFactory_.createPrefixingAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Communication
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommunication() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCommunication();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication>)term.accept(this);
        jaxbObject.setCommunication(newValue);
      }
      getLogger().exiting(getClassName(), "visitPrefixingAction", jaxbObject);
      return objectFactory_.createPrefixingAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrefixingAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessTransformerPred(net.sourceforge.czt.circus.ast.ProcessTransformerPred zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessTransformerPred", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessTransformerPred jaxbObject = objectFactory_.createProcessTransformerPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Transformation
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getTransformation() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setTransformation(net.sourceforge.czt.circus.jaxb.gen.Transformation.fromValue(zedObject.getTransformation().toString()));
      }
// prop.Name   = Model
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getModel() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setModel(net.sourceforge.czt.circus.jaxb.gen.Model.fromValue(zedObject.getModel().toString()));
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProcessTransformerPred", jaxbObject);
      return objectFactory_.createProcessTransformerPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessTransformerPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusActionList(net.sourceforge.czt.circus.ast.CircusActionList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusActionList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusActionList jaxbObject = objectFactory_.createCircusActionList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCircusActionList", jaxbObject);
      return objectFactory_.createCircusActionList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusActionList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCommunication(net.sourceforge.czt.circus.ast.Communication zedObject)
  {
    getLogger().entering(getClassName(), "visitCommunication", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.Communication jaxbObject = objectFactory_.createCommunication();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ChannelExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr>)term.accept(this);
        jaxbObject.setChannelExpr(newValue);
      }
// prop.Name   = FieldList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getFieldList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getFieldList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.FieldList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.FieldList>)term.accept(this);
        jaxbObject.setFieldList(newValue);
      }
// prop.Name   = CommUsage
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCommUsage() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCommUsage(net.sourceforge.czt.circus.jaxb.gen.CommUsage.fromValue(zedObject.getCommUsage().toString()));
      }
// prop.Name   = CommPattern
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCommPattern() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCommPattern(net.sourceforge.czt.circus.jaxb.gen.CommPattern.fromValue(zedObject.getCommPattern().toString()));
      }
// prop.Name   = MultiSych
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getMultiSych() != null) {
        jaxbObject.setMultiSych(zedObject.getMultiSych());
      }
// prop.Name   = Indexed
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getIndexed() != null) {
        jaxbObject.setIndexed(zedObject.getIndexed());
      }
      getLogger().exiting(getClassName(), "visitCommunication", jaxbObject);
      return objectFactory_.createCommunication(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Communication to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIntChoiceProcessIdx(net.sourceforge.czt.circus.ast.IntChoiceProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx jaxbObject = objectFactory_.createIntChoiceProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitIntChoiceProcessIdx", jaxbObject);
      return objectFactory_.createIntChoiceProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInputField(net.sourceforge.czt.circus.ast.InputField zedObject)
  {
    getLogger().entering(getClassName(), "visitInputField", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InputField jaxbObject = objectFactory_.createInputField();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = VariableName
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getVariableName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getVariableName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setVariableName(newValue);
      }
// prop.Name   = Restriction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRestriction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRestriction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setRestriction(newValue);
      }
      getLogger().exiting(getClassName(), "visitInputField", jaxbObject);
      return objectFactory_.createInputField(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InputField to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitHideProcess(net.sourceforge.czt.circus.ast.HideProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitHideProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.HideProcess jaxbObject = objectFactory_.createHideProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitHideProcess", jaxbObject);
      return objectFactory_.createHideProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionPara(net.sourceforge.czt.circus.ast.ActionPara zedObject)
  {
    getLogger().entering(getClassName(), "visitActionPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionPara jaxbObject = objectFactory_.createActionPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
      getLogger().exiting(getClassName(), "visitActionPara", jaxbObject);
      return objectFactory_.createActionPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqAction(net.sourceforge.czt.circus.ast.SeqAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SeqAction jaxbObject = objectFactory_.createSeqAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSeqAction", jaxbObject);
      return objectFactory_.createSeqAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExtChoiceProcess(net.sourceforge.czt.circus.ast.ExtChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess jaxbObject = objectFactory_.createExtChoiceProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitExtChoiceProcess", jaxbObject);
      return objectFactory_.createExtChoiceProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLetMuAction(net.sourceforge.czt.circus.ast.LetMuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitLetMuAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.LetMuAction jaxbObject = objectFactory_.createLetMuAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = ParaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getParaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getParaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList>)term.accept(this);
        jaxbObject.setParaList(newValue);
      }
      getLogger().exiting(getClassName(), "visitLetMuAction", jaxbObject);
      return objectFactory_.createLetMuAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetMuAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZSignatureList(net.sourceforge.czt.circus.ast.ZSignatureList zedObject)
  {
    getLogger().entering(getClassName(), "visitZSignatureList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ZSignatureList jaxbObject = objectFactory_.createZSignatureList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Signature o : zedObject.getSignature()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)r;
				  jaxbObject.getSignature().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Signature";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZSignatureList", jaxbObject);
      return objectFactory_.createZSignatureList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZSignatureList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAssignmentCommand(net.sourceforge.czt.circus.ast.AssignmentCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentCommand", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand jaxbObject = objectFactory_.createAssignmentCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = AssignmentPairs
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getAssignmentPairs() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getAssignmentPairs();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs>)term.accept(this);
        jaxbObject.setAssignmentPairs(newValue);
      }
      getLogger().exiting(getClassName(), "visitAssignmentCommand", jaxbObject);
      return objectFactory_.createAssignmentCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChannelType(net.sourceforge.czt.circus.ast.ChannelType zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChannelType jaxbObject = objectFactory_.createChannelType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Type
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getType() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getType();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2>)term.accept(this);
        jaxbObject.setType(newValue);
      }
      getLogger().exiting(getClassName(), "visitChannelType", jaxbObject);
      return objectFactory_.createChannelType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionType(net.sourceforge.czt.circus.ast.ActionType zedObject)
  {
    getLogger().entering(getClassName(), "visitActionType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionType jaxbObject = objectFactory_.createActionType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ActionSignature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getActionSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getActionSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature>)term.accept(this);
        jaxbObject.setActionSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitActionType", jaxbObject);
      return objectFactory_.createActionType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqActionIte(net.sourceforge.czt.circus.ast.SeqActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SeqActionIte jaxbObject = objectFactory_.createSeqActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSeqActionIte", jaxbObject);
      return objectFactory_.createSeqActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIntChoiceActionIte(net.sourceforge.czt.circus.ast.IntChoiceActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte jaxbObject = objectFactory_.createIntChoiceActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitIntChoiceActionIte", jaxbObject);
      return objectFactory_.createIntChoiceActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCallAction(net.sourceforge.czt.circus.ast.CallAction zedObject)
  {
    getLogger().entering(getClassName(), "visitCallAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CallAction jaxbObject = objectFactory_.createCallAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitCallAction", jaxbObject);
      return objectFactory_.createCallAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CallAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSpecStmtCommand(net.sourceforge.czt.circus.ast.SpecStmtCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSpecStmtCommand", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand jaxbObject = objectFactory_.createSpecStmtCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Frame
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getFrame() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getFrame();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setFrame(newValue);
      }
// prop.Name   = Pred
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Pred o : zedObject.getPred()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)r;
				  jaxbObject.getPred().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Pred";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSpecStmtCommand", jaxbObject);
      return objectFactory_.createSpecStmtCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SpecStmtCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitStateUpdateAnn(net.sourceforge.czt.circus.ast.StateUpdateAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitStateUpdateAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.StateUpdateAnn jaxbObject = objectFactory_.createStateUpdateAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = StateUpdate
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStateUpdate() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStateUpdate();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.StateUpdate> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.StateUpdate>)term.accept(this);
        jaxbObject.setStateUpdate(newValue);
      }
      getLogger().exiting(getClassName(), "visitStateUpdateAnn", jaxbObject);
      return objectFactory_.createStateUpdateAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a StateUpdateAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChannelDecl(net.sourceforge.czt.circus.ast.ChannelDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelDecl", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChannelDecl jaxbObject = objectFactory_.createChannelDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameList o : zedObject.getNameList()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)r;
				  jaxbObject.getNameList().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameList";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitChannelDecl", jaxbObject);
      return objectFactory_.createChannelDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNameSetType(net.sourceforge.czt.circus.ast.NameSetType zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSetType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.NameSetType jaxbObject = objectFactory_.createNameSetType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitNameSetType", jaxbObject);
      return objectFactory_.createNameSetType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSetType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterleaveProcessIdx(net.sourceforge.czt.circus.ast.InterleaveProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx jaxbObject = objectFactory_.createInterleaveProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitInterleaveProcessIdx", jaxbObject);
      return objectFactory_.createInterleaveProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessSignatureAnn(net.sourceforge.czt.circus.ast.ProcessSignatureAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessSignatureAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureAnn jaxbObject = objectFactory_.createProcessSignatureAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProcessSignature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProcessSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProcessSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ProcessSignature>)term.accept(this);
        jaxbObject.setProcessSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitProcessSignatureAnn", jaxbObject);
      return objectFactory_.createProcessSignatureAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessSignatureAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitMuAction(net.sourceforge.czt.circus.ast.MuAction zedObject)
  {
    getLogger().entering(getClassName(), "visitMuAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.MuAction jaxbObject = objectFactory_.createMuAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitMuAction", jaxbObject);
      return objectFactory_.createMuAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExtChoiceAction(net.sourceforge.czt.circus.ast.ExtChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitExtChoiceAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction jaxbObject = objectFactory_.createExtChoiceAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitExtChoiceAction", jaxbObject);
      return objectFactory_.createExtChoiceAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExtChoiceAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSkipAction(net.sourceforge.czt.circus.ast.SkipAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSkipAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SkipAction jaxbObject = objectFactory_.createSkipAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitSkipAction", jaxbObject);
      return objectFactory_.createSkipAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SkipAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSubstitutionAction(net.sourceforge.czt.circus.ast.SubstitutionAction zedObject)
  {
    getLogger().entering(getClassName(), "visitSubstitutionAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SubstitutionAction jaxbObject = objectFactory_.createSubstitutionAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = RenameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRenameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRenameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList>)term.accept(this);
        jaxbObject.setRenameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSubstitutionAction", jaxbObject);
      return objectFactory_.createSubstitutionAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SubstitutionAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChannelSetType(net.sourceforge.czt.circus.ast.ChannelSetType zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelSetType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChannelSetType jaxbObject = objectFactory_.createChannelSetType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitChannelSetType", jaxbObject);
      return objectFactory_.createChannelSetType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelSetType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusNameSet(net.sourceforge.czt.circus.ast.CircusNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusNameSet", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusNameSet jaxbObject = objectFactory_.createCircusNameSet();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitCircusNameSet", jaxbObject);
      return objectFactory_.createCircusNameSet(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusNameSet to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIntChoiceAction(net.sourceforge.czt.circus.ast.IntChoiceAction zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction jaxbObject = objectFactory_.createIntChoiceAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitIntChoiceAction", jaxbObject);
      return objectFactory_.createIntChoiceAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParamAction(net.sourceforge.czt.circus.ast.ParamAction zedObject)
  {
    getLogger().entering(getClassName(), "visitParamAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParamAction jaxbObject = objectFactory_.createParamAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitParamAction", jaxbObject);
      return objectFactory_.createParamAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParamAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusNameSetList(net.sourceforge.czt.circus.ast.CircusNameSetList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusNameSetList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusNameSetList jaxbObject = objectFactory_.createCircusNameSetList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.NameSet o : zedObject.getNameSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)r;
				  jaxbObject.getNameSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.NameSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCircusNameSetList", jaxbObject);
      return objectFactory_.createCircusNameSetList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusNameSetList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProcessPara(net.sourceforge.czt.circus.ast.ProcessPara zedObject)
  {
    getLogger().entering(getClassName(), "visitProcessPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ProcessPara jaxbObject = objectFactory_.createProcessPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = GenFormals
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getGenFormals() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getGenFormals();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setGenFormals(newValue);
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
      getLogger().exiting(getClassName(), "visitProcessPara", jaxbObject);
      return objectFactory_.createProcessPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProcessPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAlphabetisedParallelAction(net.sourceforge.czt.circus.ast.AlphabetisedParallelAction zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelAction jaxbObject = objectFactory_.createAlphabetisedParallelAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = NameSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.NameSet o : zedObject.getNameSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)r;
				  jaxbObject.getNameSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.NameSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ChannelSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.ChannelSet o : zedObject.getChannelSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)r;
				  jaxbObject.getChannelSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.ChannelSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitAlphabetisedParallelAction", jaxbObject);
      return objectFactory_.createAlphabetisedParallelAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitBasicChannelSetExpr(net.sourceforge.czt.circus.ast.BasicChannelSetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicChannelSetExpr", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr jaxbObject = objectFactory_.createBasicChannelSetExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CommunicationList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommunicationList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCommunicationList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CommunicationList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CommunicationList>)term.accept(this);
        jaxbObject.setCommunicationList(newValue);
      }
      getLogger().exiting(getClassName(), "visitBasicChannelSetExpr", jaxbObject);
      return objectFactory_.createBasicChannelSetExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicChannelSetExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterleaveProcessIte(net.sourceforge.czt.circus.ast.InterleaveProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte jaxbObject = objectFactory_.createInterleaveProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitInterleaveProcessIte", jaxbObject);
      return objectFactory_.createInterleaveProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDoGuardedCommand(net.sourceforge.czt.circus.ast.DoGuardedCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitDoGuardedCommand", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.DoGuardedCommand jaxbObject = objectFactory_.createDoGuardedCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ActionList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getActionList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getActionList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionList>)term.accept(this);
        jaxbObject.setActionList(newValue);
      }
      getLogger().exiting(getClassName(), "visitDoGuardedCommand", jaxbObject);
      return objectFactory_.createDoGuardedCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DoGuardedCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitGuardedAction(net.sourceforge.czt.circus.ast.GuardedAction zedObject)
  {
    getLogger().entering(getClassName(), "visitGuardedAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.GuardedAction jaxbObject = objectFactory_.createGuardedAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitGuardedAction", jaxbObject);
      return objectFactory_.createGuardedAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GuardedAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqProcess(net.sourceforge.czt.circus.ast.SeqProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.SeqProcess jaxbObject = objectFactory_.createSeqProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSeqProcess", jaxbObject);
      return objectFactory_.createSeqProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterruptAction(net.sourceforge.czt.circus.ast.InterruptAction zedObject)
  {
    getLogger().entering(getClassName(), "visitInterruptAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterruptAction jaxbObject = objectFactory_.createInterruptAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitInterruptAction", jaxbObject);
      return objectFactory_.createInterruptAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterruptAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAlphabetisedParallelProcessIte(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcessIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte jaxbObject = objectFactory_.createAlphabetisedParallelProcessIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcessIte", jaxbObject);
      return objectFactory_.createAlphabetisedParallelProcessIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcessIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIntChoiceProcess(net.sourceforge.czt.circus.ast.IntChoiceProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitIntChoiceProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess jaxbObject = objectFactory_.createIntChoiceProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitIntChoiceProcess", jaxbObject);
      return objectFactory_.createIntChoiceProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IntChoiceProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusStateAnn(net.sourceforge.czt.circus.ast.CircusStateAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusStateAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusStateAnn jaxbObject = objectFactory_.createCircusStateAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitCircusStateAnn", jaxbObject);
      return objectFactory_.createCircusStateAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusStateAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelActionIte(net.sourceforge.czt.circus.ast.ParallelActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ParallelActionIte jaxbObject = objectFactory_.createParallelActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = NameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)term.accept(this);
        jaxbObject.setNameSet(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitParallelActionIte", jaxbObject);
      return objectFactory_.createParallelActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRenameProcess(net.sourceforge.czt.circus.ast.RenameProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.RenameProcess jaxbObject = objectFactory_.createRenameProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = AssignmentPairs
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getAssignmentPairs() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getAssignmentPairs();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs>)term.accept(this);
        jaxbObject.setAssignmentPairs(newValue);
      }
      getLogger().exiting(getClassName(), "visitRenameProcess", jaxbObject);
      return objectFactory_.createRenameProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitBasicProcess(net.sourceforge.czt.circus.ast.BasicProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitBasicProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.BasicProcess jaxbObject = objectFactory_.createBasicProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ParaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getParaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getParaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList>)term.accept(this);
        jaxbObject.setParaList(newValue);
      }
      getLogger().exiting(getClassName(), "visitBasicProcess", jaxbObject);
      return objectFactory_.createBasicProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BasicProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRenameAction(net.sourceforge.czt.circus.ast.RenameAction zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.RenameAction jaxbObject = objectFactory_.createRenameAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = AssignmentPairs
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getAssignmentPairs() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getAssignmentPairs();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs>)term.accept(this);
        jaxbObject.setAssignmentPairs(newValue);
      }
      getLogger().exiting(getClassName(), "visitRenameAction", jaxbObject);
      return objectFactory_.createRenameAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionSignature(net.sourceforge.czt.circus.ast.ActionSignature zedObject)
  {
    getLogger().entering(getClassName(), "visitActionSignature", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionSignature jaxbObject = objectFactory_.createActionSignature();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = SignatureList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignatureList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignatureList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.SignatureList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.SignatureList>)term.accept(this);
        jaxbObject.setSignatureList(newValue);
      }
// prop.Name   = CommunicationList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommunicationList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCommunicationList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CommunicationList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CommunicationList>)term.accept(this);
        jaxbObject.setCommunicationList(newValue);
      }
// prop.Name   = ChannelSetList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSetList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSetList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSetList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSetList>)term.accept(this);
        jaxbObject.setChannelSetList(newValue);
      }
// prop.Name   = NameSetList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSetList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSetList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSetList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSetList>)term.accept(this);
        jaxbObject.setNameSetList(newValue);
      }
      getLogger().exiting(getClassName(), "visitActionSignature", jaxbObject);
      return objectFactory_.createActionSignature(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionSignature to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChannelPara(net.sourceforge.czt.circus.ast.ChannelPara zedObject)
  {
    getLogger().entering(getClassName(), "visitChannelPara", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChannelPara jaxbObject = objectFactory_.createChannelPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitChannelPara", jaxbObject);
      return objectFactory_.createChannelPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChannelPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionTransformerPred(net.sourceforge.czt.circus.ast.ActionTransformerPred zedObject)
  {
    getLogger().entering(getClassName(), "visitActionTransformerPred", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionTransformerPred jaxbObject = objectFactory_.createActionTransformerPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Transformation
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getTransformation() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setTransformation(net.sourceforge.czt.circus.jaxb.gen.Transformation.fromValue(zedObject.getTransformation().toString()));
      }
// prop.Name   = Model
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getModel() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setModel(net.sourceforge.czt.circus.jaxb.gen.Model.fromValue(zedObject.getModel().toString()));
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitActionTransformerPred", jaxbObject);
      return objectFactory_.createActionTransformerPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionTransformerPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusFieldList(net.sourceforge.czt.circus.ast.CircusFieldList zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusFieldList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CircusFieldList jaxbObject = objectFactory_.createCircusFieldList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Field
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.Field o : zedObject.getField()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Field> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Field>)r;
				  jaxbObject.getField().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.Field";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCircusFieldList", jaxbObject);
      return objectFactory_.createCircusFieldList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusFieldList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitImplicitChannelAnn(net.sourceforge.czt.circus.ast.ImplicitChannelAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitImplicitChannelAnn", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ImplicitChannelAnn jaxbObject = objectFactory_.createImplicitChannelAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitImplicitChannelAnn", jaxbObject);
      return objectFactory_.createImplicitChannelAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ImplicitChannelAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitVarDeclCommand(net.sourceforge.czt.circus.ast.VarDeclCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDeclCommand", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand jaxbObject = objectFactory_.createVarDeclCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
      getLogger().exiting(getClassName(), "visitVarDeclCommand", jaxbObject);
      return objectFactory_.createVarDeclCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDeclCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCommunicationType(net.sourceforge.czt.circus.ast.CommunicationType zedObject)
  {
    getLogger().entering(getClassName(), "visitCommunicationType", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.CommunicationType jaxbObject = objectFactory_.createCommunicationType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitCommunicationType", jaxbObject);
      return objectFactory_.createCommunicationType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CommunicationType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterleaveActionIte(net.sourceforge.czt.circus.ast.InterleaveActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte jaxbObject = objectFactory_.createInterleaveActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = NameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)term.accept(this);
        jaxbObject.setNameSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitInterleaveActionIte", jaxbObject);
      return objectFactory_.createInterleaveActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDotField(net.sourceforge.czt.circus.ast.DotField zedObject)
  {
    getLogger().entering(getClassName(), "visitDotField", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.DotField jaxbObject = objectFactory_.createDotField();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitDotField", jaxbObject);
      return objectFactory_.createDotField(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DotField to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAlphabetisedParallelProcessIdx(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcessIdx", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx jaxbObject = objectFactory_.createAlphabetisedParallelProcessIdx();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcessIdx", jaxbObject);
      return objectFactory_.createAlphabetisedParallelProcessIdx(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcessIdx to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitChaosAction(net.sourceforge.czt.circus.ast.ChaosAction zedObject)
  {
    getLogger().entering(getClassName(), "visitChaosAction", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ChaosAction jaxbObject = objectFactory_.createChaosAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitChaosAction", jaxbObject);
      return objectFactory_.createChaosAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ChaosAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAlphabetisedParallelProcess(net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcess jaxbObject = objectFactory_.createAlphabetisedParallelProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ChannelSet
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.ChannelSet o : zedObject.getChannelSet()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)r;
				  jaxbObject.getChannelSet().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.ChannelSet";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitAlphabetisedParallelProcess", jaxbObject);
      return objectFactory_.createAlphabetisedParallelProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAlphabetisedParallelActionIte(net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte zedObject)
  {
    getLogger().entering(getClassName(), "visitAlphabetisedParallelActionIte", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte jaxbObject = objectFactory_.createAlphabetisedParallelActionIte();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = NameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)term.accept(this);
        jaxbObject.setNameSet(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitAlphabetisedParallelActionIte", jaxbObject);
      return objectFactory_.createAlphabetisedParallelActionIte(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AlphabetisedParallelActionIte to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAssignmentPairs(net.sourceforge.czt.circus.ast.AssignmentPairs zedObject)
  {
    getLogger().entering(getClassName(), "visitAssignmentPairs", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs jaxbObject = objectFactory_.createAssignmentPairs();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = LHS
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getLHS() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getLHS();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setLHS(newValue);
      }
// prop.Name   = RHS
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRHS() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRHS();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setRHS(newValue);
      }
      getLogger().exiting(getClassName(), "visitAssignmentPairs", jaxbObject);
      return objectFactory_.createAssignmentPairs(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssignmentPairs to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInterleaveProcess(net.sourceforge.czt.circus.ast.InterleaveProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitInterleaveProcess", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess jaxbObject = objectFactory_.createInterleaveProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitInterleaveProcess", jaxbObject);
      return objectFactory_.createInterleaveProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InterleaveProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitActionSignatureList(net.sourceforge.czt.circus.ast.ActionSignatureList zedObject)
  {
    getLogger().entering(getClassName(), "visitActionSignatureList", zedObject);
    try {
      net.sourceforge.czt.circus.jaxb.gen.ActionSignatureList jaxbObject = objectFactory_.createActionSignatureList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ActionSignature
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.ActionSignature o : zedObject.getActionSignature()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ActionSignature>)r;
				  jaxbObject.getActionSignature().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.ActionSignature";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitActionSignatureList", jaxbObject);
      return objectFactory_.createActionSignatureList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ActionSignatureList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
