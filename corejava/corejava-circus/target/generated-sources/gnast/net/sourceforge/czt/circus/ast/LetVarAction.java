
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

																																																				

/**
 * Local environment for prefixing actions involving input fields, parameterised actions, and variable commands.
        They are important to carry the declared type, and any type restrictions, of these constructs. Note thist 
        is different from the signature the referred variable in the let may occur in, as signatures only contain
        maximal types generated by the type checker.
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface LetVarAction extends 		 		net.sourceforge.czt.circus.ast.LetAction
 			{

  /**
   * Returns the DeclList element.
   *
   * @return the DeclList element.
   */
  net.sourceforge.czt.z.ast.DeclList getDeclList();


  /**
   * This is a convenience method.
   * It returns a ZDeclList if #getDeclList
   * returns an instance of ZDeclList
   * and throws an UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.z.ast.ZDeclList getZDeclList();

  /**
   * Sets the DeclList element.
   *
   * @param declList   the DeclList element.
   * @see #getDeclList
   */
  void setDeclList(net.sourceforge.czt.z.ast.DeclList declList);

  /**
   * Returns the ExprList element.
   *
   * @return the ExprList element.
   */
  net.sourceforge.czt.z.ast.ExprList getExprList();


  /**
   * This is a convenience method.
   * It returns a ZExprList if #getExprList
   * returns an instance of ZExprList
   * and throws an UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.z.ast.ZExprList getZExprList();

  /**
   * Sets the ExprList element.
   *
   * @param exprList   the ExprList element.
   * @see #getExprList
   */
  void setExprList(net.sourceforge.czt.z.ast.ExprList exprList);
}
