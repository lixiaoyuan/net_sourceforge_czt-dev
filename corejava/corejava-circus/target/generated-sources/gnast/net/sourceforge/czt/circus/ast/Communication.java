
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

																																																				

/**
 * <p>
          A CSP communication that is part of a prefixing process or action. 
          If the communicating channel has been declared with generic types, the communication 
          must carry the generic actual expressions, hence we have a <code>RefExpr</code> rather than
          a <code>Name</code>. It represents the <b>Communication</b> grammar rule.
        </p>
        <p>
          A communication can be either a communication for synchronisation, input, output, or mixed.
          A communication can also appear in a channel set expression, in which case no fields are allowed.
          Synchronisation has no fields. Input and Output has only input or output fields respectively. 
          Mixed communication has both input and output fields, such as <code>c?x:P!v -&gt; A</code>.
        </p>
        <p>
          The semantics of dot (c.x) and output (c!x) is equivalent. 
          However, for some applications/tools, their evaluation can be done differently.
          Except for references (without generics) and numerals, expressions MUST be 
          surrounded by parenthesis. Similarly, predicates on input prefix restrictions
          must also be surrounded by parenthesis.
        </p>
        <p>
          Communications are annotated by the type checker with a CommunicationType, which
          includes the declared channel name/type pair, as well as the communication pattern
          signature. This is useful because the communication pattern type might not necessarily
          be the same as the type of the channel. Also, we mark the channel within the communication 
          as a generic, indexed or normal channel.
        </p>
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface Communication extends   		net.sourceforge.czt.base.ast.Term
			{

  /**
   * Returns the ChannelExpr element.
   *
   * @return the ChannelExpr element.
   */
  net.sourceforge.czt.z.ast.RefExpr getChannelExpr();


  /**
   * Sets the ChannelExpr element.
   *
   * @param channelExpr   the ChannelExpr element.
   * @see #getChannelExpr
   */
  void setChannelExpr(net.sourceforge.czt.z.ast.RefExpr channelExpr);

  /**
   * Returns the FieldList element.
   *
   * @return the FieldList element.
   */
  net.sourceforge.czt.circus.ast.FieldList getFieldList();


  /**
   * Sets the FieldList element.
   *
   * @param fieldList   the FieldList element.
   * @see #getFieldList
   */
  void setFieldList(net.sourceforge.czt.circus.ast.FieldList fieldList);

  /**
   * Returns the CommUsage element.
   *
   * @return the CommUsage element.
   */
  CommUsage getCommUsage();


  /**
   * Sets the CommUsage element.
   *
   * @param commUsage   the CommUsage element.
   * @see #getCommUsage
   */
  void setCommUsage(CommUsage commUsage);

  /**
   * Returns the CommPattern element.
   *
   * @return the CommPattern element.
   */
  CommPattern getCommPattern();


  /**
   * Sets the CommPattern element.
   *
   * @param commPattern   the CommPattern element.
   * @see #getCommPattern
   */
  void setCommPattern(CommPattern commPattern);

  /**
   * Returns the MultiSych element.
   *
   * @return the MultiSych element.
   */
  java.math.BigInteger getMultiSych();


  /**
   * Sets the MultiSych element.
   *
   * @param multiSych   the MultiSych element.
   * @see #getMultiSych
   */
  void setMultiSych(java.math.BigInteger multiSych);

  /**
   * Returns the Indexed element.
   *
   * @return the Indexed element.
   */
  Boolean getIndexed();


  /**
   * Sets the Indexed element.
   *
   * @param indexed   the Indexed element.
   * @see #getIndexed
   */
  void setIndexed(Boolean indexed);
  /**
   * This is a convenience method.
   * It returns the CircusFieldList if FieldList is an instance of
   * CircusFieldList or throws an UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.circus.ast.CircusFieldList getCircusFieldList();}
