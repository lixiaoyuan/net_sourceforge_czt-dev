
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

																																																				

/**
 * <p>
          An action signature consists of the action name, formal parameters, 
          the channels used, the communications, channel sets and name sets used.
        </p>
        <p>
          <ul>
            <li>Signature getFormalParams() = getSignatureList().get(0)</li>            
            <li>Signature getLocalVars()    = getSignatureList().get(1)</li>
            <li>Signature getUsedChannels() = getSignatureList().get(2)</li>
          </ul>          
          One can also access the communication list containing all the 
          communications involved in this action. That is, all the 
          channel uses with resolved generic types and communication pattern.
          Note the communication pattern collective type may differ (and may be
          non-unifiable) from the channel declared type (e.g., c: X x Y x Z, c?x?w).
        </p>
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface ActionSignature extends 		 		net.sourceforge.czt.circus.ast.CircusSignature
 			{

  /**
   * Returns the SignatureList element.
   *
   * @return the SignatureList element.
   */
  net.sourceforge.czt.circus.ast.SignatureList getSignatureList();


  /**
   * Sets the SignatureList element.
   *
   * @param signatureList   the SignatureList element.
   * @see #getSignatureList
   */
  void setSignatureList(net.sourceforge.czt.circus.ast.SignatureList signatureList);

  /**
   * Returns the CommunicationList element.
   *
   * @return the CommunicationList element.
   */
  net.sourceforge.czt.circus.ast.CommunicationList getCommunicationList();


  /**
   * Sets the CommunicationList element.
   *
   * @param communicationList   the CommunicationList element.
   * @see #getCommunicationList
   */
  void setCommunicationList(net.sourceforge.czt.circus.ast.CommunicationList communicationList);

  /**
   * Returns the ChannelSetList element.
   *
   * @return the ChannelSetList element.
   */
  net.sourceforge.czt.circus.ast.ChannelSetList getChannelSetList();


  /**
   * Sets the ChannelSetList element.
   *
   * @param channelSetList   the ChannelSetList element.
   * @see #getChannelSetList
   */
  void setChannelSetList(net.sourceforge.czt.circus.ast.ChannelSetList channelSetList);

  /**
   * Returns the NameSetList element.
   *
   * @return the NameSetList element.
   */
  net.sourceforge.czt.circus.ast.NameSetList getNameSetList();


  /**
   * Sets the NameSetList element.
   *
   * @param nameSetList   the NameSetList element.
   * @see #getNameSetList
   */
  void setNameSetList(net.sourceforge.czt.circus.ast.NameSetList nameSetList);
  final static int FORMAL_PARAMS_INDEX = 0;
  final static int LOCAL_VARS_INDEX    = 1;
  final static int USED_CHANNELS_INDEX = 2;

  /**
   * This is a convenience method for getName.
   */
  net.sourceforge.czt.z.ast.Name getActionName();
  
  /**
   * Returns whether or not this is a signature for parameterised action or not
   * (i.e. it has a non-empty list of formal parameters).
   */
  boolean isParamAction();

  /**
   * This is a convenience method.
   * It returns the ZName if getName is an instance of
   * ZName and throws an UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.z.ast.ZName getActionZName();

  /**
   * This is a convenience method for setName.
   */
  void setActionName(net.sourceforge.czt.z.ast.Name name);

  /**
   * This is a convenience method.
   * It returns the ZSignatureList if getSignatureList() is an instance of
   * ZSignatureList and throws a UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.circus.ast.ZSignatureList getZSignatureList();

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * signature of arguments for this action signature (i.e. its declared formal parameters).
   * It returns the Signature from getZSignatureList().get(FORMAL_PARAMS_INDEX). It may throw a
   * a UnsupportedAstClassException from getZSignatureList().     
   */
  net.sourceforge.czt.z.ast.Signature getFormalParams();

  /**
   * This is a convenience method. It sets the given non-null (possibly empty)  
   * signature of the formal parameters signature of this action.
   * It is the same as getZSignatureList().set(FORMAL_PARAMS_INDEX, sig). It may throw a
   * a UnsupportedAstClassException from getMainSignatures(). The result is the old value 
   * previously stored (if any).
   */
  net.sourceforge.czt.z.ast.Signature setFormalParams(net.sourceforge.czt.z.ast.Signature sig);

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * signature of locally declared variables for this action signature (i.e. circvar commands).
   * It returns the Signature from getZSignatureList().get(LOCAL_VARS_INDEX). It may throw a
   * a UnsupportedAstClassException from getZSignatureList().
   */
  net.sourceforge.czt.z.ast.Signature getLocalVars();

  /**
   * This is a convenience method. It sets the given non-null (possibly empty)  
   * signature of the local variables signature of this action.
   * It is the same as getZSignatureList().set(LOCAL_VARS_INDEX, sig). It may throw a
   * a UnsupportedAstClassException from getMainSignatures(). The result is the old value 
   * previously stored (if any).
   */
  net.sourceforge.czt.z.ast.Signature setLocalVars(net.sourceforge.czt.z.ast.Signature sig);

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * signature of used channels for this action signature. This contains the channel
   * name and its declared type
   * It returns the Signature from getZSignatureList().get(USED_CHANNELS_INDEX). 
   * It may throw a a UnsupportedAstClassException from getZSignatureList().
   */
  net.sourceforge.czt.z.ast.Signature getUsedChannels();

  /**
   * This is a convenience method. It sets the given non-null (possibly empty)  
   * signature of used channels for this action signature. This contains the channel
   * name and its declared type
   * It is the same as getZSignatureList().set(USED_CHANNELS_INDEX, sig). The result is 
   * the old value previously stored (if any).
   */
  net.sourceforge.czt.z.ast.Signature setUsedChannels(net.sourceforge.czt.z.ast.Signature sig);

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * list of used channels within the communications of this action. This includes 
   * generic, implicit, or normal communications. It may throw a UnsupportedAstClassException 
   * from getCommunicationList().
   */
  net.sourceforge.czt.circus.ast.CircusCommunicationList getUsedCommunications();

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * list of used name sets within the name sets of this action. 
   * It may throw a UnsupportedAstClassException from getNameSetListList().
   */
  net.sourceforge.czt.circus.ast.CircusNameSetList getUsedNameSets();

  /**
   * This is a convenience method. It represents the non-null (possibly empty)
   * list of used channel sets within the name sets of this action. 
   * It may throw a UnsupportedAstClassException from getChannelSetListList().
   */
  net.sourceforge.czt.circus.ast.CircusChannelSetList getUsedChannelSets();
}
