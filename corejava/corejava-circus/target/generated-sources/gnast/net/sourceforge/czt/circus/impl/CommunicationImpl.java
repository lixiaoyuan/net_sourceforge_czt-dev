
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.circus.ast.Communication}.
 *
 * @author GnAST version 1.6-cdh
 */
public class CommunicationImpl
extends   		net.sourceforge.czt.base.impl.TermImpl
	  implements net.sourceforge.czt.circus.ast.Communication
{





  /**
   * static instance count for CommunicationImpl
   */
   private static long instanceCount_ = 0;
   
  /**
   * public attribute determining whether to log to the 
   * standard output information about who is creating 
   * this instance of CommunicationImpl (e.g., ic >= sl)
   */
  //private static final long startLoggingFrom_ = Long.MAX_VALUE;
   
    // cannot be final because JokerCommunicationImpl extends CommunicationImpl
  public /*final*/ static boolean countingFinaliser() { return false; }
  public /*final*/ static long instancesFinalised() 
  { 
    throw new UnsupportedOperationException("GnAST AST finalisers have not been set"); 
  }
  
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.circus.ast.CircusFactory object factory}.
   */
  protected CommunicationImpl()
  {
    this(null);
  }

  protected CommunicationImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
    countInstance();
  }
  
  private static synchronized void countInstance()
  {
	  instanceCount_++;
  }
  
  /**
   * Compares the specified object with this CommunicationImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) CommunicationImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //CommunicationImpl object = ((CommunicationImpl) obj);
        if (channelExpr_ != null) {
          if (!channelExpr_.equals(((CommunicationImpl) obj).channelExpr_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).channelExpr_ != null) {
            return false;
          }
        }
        if (fieldList_ != null) {
          if (!fieldList_.equals(((CommunicationImpl) obj).fieldList_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).fieldList_ != null) {
            return false;
          }
        }
        if (commUsage_ != null) {
          if (!commUsage_.equals(((CommunicationImpl) obj).commUsage_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).commUsage_ != null) {
            return false;
          }
        }
        if (commPattern_ != null) {
          if (!commPattern_.equals(((CommunicationImpl) obj).commPattern_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).commPattern_ != null) {
            return false;
          }
        }
        if (multiSych_ != null) {
          if (!multiSych_.equals(((CommunicationImpl) obj).multiSych_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).multiSych_ != null) {
            return false;
          }
        }
        if (indexed_ != null) {
          if (!indexed_.equals(((CommunicationImpl) obj).indexed_)) {
            return false;
          }
        }
        else {
          if (((CommunicationImpl) obj).indexed_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this CommunicationImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "CommunicationImpl".hashCode();
    if (channelExpr_ != null) {
      hashCode += 31 * channelExpr_.hashCode();
    }
    if (fieldList_ != null) {
      hashCode += 31 * fieldList_.hashCode();
    }
    if (commUsage_ != null) {
      hashCode += 31 * commUsage_.hashCode();
    }
    if (commPattern_ != null) {
      hashCode += 31 * commPattern_.hashCode();
    }
    if (multiSych_ != null) {
      hashCode += 31 * multiSych_.hashCode();
    }
    if (indexed_ != null) {
      hashCode += 31 * indexed_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.circus.visitor.CommunicationVisitor) {
      net.sourceforge.czt.circus.visitor.CommunicationVisitor<R> visitor = 
      	  (net.sourceforge.czt.circus.visitor.CommunicationVisitor<R>) v;
      return visitor.visitCommunication(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public CommunicationImpl create(Object[] args)
  {
    CommunicationImpl zedObject = null;
    try {
	  	  			  	net.sourceforge.czt.z.ast.RefExpr channelExpr = (
						net.sourceforge.czt.z.ast.RefExpr) args[0];
	  	  	  			  	net.sourceforge.czt.circus.ast.FieldList fieldList = (
						net.sourceforge.czt.circus.ast.FieldList) args[1];
	  	  	  									net.sourceforge.czt.circus.ast.
						  	CommUsage commUsage = (
												net.sourceforge.czt.circus.ast.
										CommUsage) args[2];
	  	  	  									net.sourceforge.czt.circus.ast.
						  	CommPattern commPattern = (
												net.sourceforge.czt.circus.ast.
										CommPattern) args[3];
	  	  	  								  	java.math.BigInteger multiSych = (
													java.math.BigInteger) args[4];
	  	  	  								  	Boolean indexed = (
													Boolean) args[5];
	        zedObject = new CommunicationImpl(getFactory());
      zedObject.setChannelExpr(channelExpr);
      zedObject.setFieldList(fieldList);
      zedObject.setCommUsage(commUsage);
      zedObject.setCommPattern(commPattern);
      zedObject.setMultiSych(multiSych);
      zedObject.setIndexed(indexed);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getChannelExpr(), getFieldList(), getCommUsage(), getCommPattern(), getMultiSych(), getIndexed() };
    return erg;
  }
  
  /** Only concrete classes get the instance count method visible */
  // JokerCommunication in circuspatt extends CommunicationImpl which is not abstract? weird...
  public static /*final*/ long instanceCount()
  {
    return instanceCount_;
  }


  private
            		net.sourceforge.czt.z.ast.RefExpr
  channelExpr_;

  public 
		net.sourceforge.czt.z.ast.RefExpr
  getChannelExpr()
  {
    return channelExpr_;
  }

  public void setChannelExpr(
		net.sourceforge.czt.z.ast.RefExpr
	channelExpr)
  {
                          channelExpr_ = channelExpr;
    }


  private
            		net.sourceforge.czt.circus.ast.FieldList
  fieldList_;

  public 
		net.sourceforge.czt.circus.ast.FieldList
  getFieldList()
  {
    return fieldList_;
  }

  public void setFieldList(
		net.sourceforge.czt.circus.ast.FieldList
	fieldList)
  {
                          fieldList_ = fieldList;
    }


  private
            						net.sourceforge.czt.circus.ast.
				CommUsage
  commUsage_;

  public 
						net.sourceforge.czt.circus.ast.
				CommUsage
  getCommUsage()
  {
    return commUsage_;
  }

  public void setCommUsage(
						net.sourceforge.czt.circus.ast.
				CommUsage
	commUsage)
  {
                          commUsage_ = commUsage;
    }


  private
            						net.sourceforge.czt.circus.ast.
				CommPattern
  commPattern_;

  public 
						net.sourceforge.czt.circus.ast.
				CommPattern
  getCommPattern()
  {
    return commPattern_;
  }

  public void setCommPattern(
						net.sourceforge.czt.circus.ast.
				CommPattern
	commPattern)
  {
                          commPattern_ = commPattern;
    }


  private
            					java.math.BigInteger
  multiSych_;

  public 
					java.math.BigInteger
  getMultiSych()
  {
    return multiSych_;
  }

  public void setMultiSych(
					java.math.BigInteger
	multiSych)
  {
                          multiSych_ = multiSych;
    }


  private
            					Boolean
  indexed_;

  public 
					Boolean
  getIndexed()
  {
    return indexed_;
  }

  public void setIndexed(
					Boolean
	indexed)
  {
                          indexed_ = indexed;
    }
  public net.sourceforge.czt.circus.ast.CircusFieldList getCircusFieldList()
  {
    net.sourceforge.czt.circus.ast.FieldList fl = getFieldList();
    if (fl instanceof net.sourceforge.czt.circus.ast.CircusFieldList) {
      return (net.sourceforge.czt.circus.ast.CircusFieldList) fl;
    }
    final String message = "Expected the default (Circus) implementation of FieldList" +
      " but found " + String.valueOf(fl);
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }
}
