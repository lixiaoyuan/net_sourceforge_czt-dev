
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

																																																				

/**
 * <p>
          Process state update is a list of assignment pairs representing
          how state updates took place sequentially. For complex compositional 
          operators, such as external choice and parallel composition, there are
          semantic functions that define how the state merge occurs, which
          is much like what happens in the UTP.
        </p>
        <p>
          These classes shall never be instantiated by the user manually.
          They are produced by Circus tools as they go along performing the
          varied state update forms the language allows.
        </p>
        <p>
          It is a Z quantified predicate extended to contain a list of
          assignment pairs. Essentially, a tool, say a typechecker, collects 
          the assignment pairs representing a particular branch of the AST.
          This can be built backwards as it traverses the AST during typechecking.
          After that, another tool, say an animator or model checker, can 
          apply necessary transformations needed to the assignment
          pairs list so that the merge of information reflect the denotational
          semantics of a particular construct. The resulting predicate representing
          the whole state update is then feed into the actual structure of a QntPred,
          where the SchText is the state components (and invariant), and the predicate
          is the calculated state merge. (!) 
        </p>
        <p>
          It is part of a ProcessSignature. It is also be part of a StateUpdateAnn.
        </p>
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface StateUpdate extends 		 						net.sourceforge.czt.z.ast.QntPred
						 			{

  /**
   * <p>Returns the AssignmentPairs elements.</p>
   * <p>To add or remove elements, use the methods provided by
   * the List interface (that's why there is no need for a setter
   * method).</p>
   *
   * @return a list of AssignmentPairs elements.
   */
  net.sourceforge.czt.base.ast.ListTerm<net.sourceforge.czt.circus.ast.AssignmentPairs> getAssignmentPairs();
}
