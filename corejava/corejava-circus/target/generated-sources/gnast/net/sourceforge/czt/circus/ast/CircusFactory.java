
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;


/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public interface CircusFactory
  extends net.sourceforge.czt.zpatt.ast.ZpattFactory
{
  /**
   * Creates an instance of {@link TransformerPara}.
   *
   * @return the new instance of TransformerPara.
   */
  net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara();

  /**
   * Creates an instance of {@link TransformerPara} with the given children.
   *
   * @return the new instance of TransformerPara.
   */
  net.sourceforge.czt.circus.ast.TransformerPara createTransformerPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.TransformerPred  transformerPred);

  /**
   * Creates an instance of {@link StateUpdate}.
   *
   * @return the new instance of StateUpdate.
   */
  net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate();

  /**
   * Creates an instance of {@link StateUpdate} with the given children.
   *
   * @return the new instance of StateUpdate.
   */
  net.sourceforge.czt.circus.ast.StateUpdate createStateUpdate( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.circus.ast.AssignmentPairs>
 assignmentPairs);

  /**
   * Creates an instance of {@link IndexedProcess}.
   *
   * @return the new instance of IndexedProcess.
   */
  net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess();

  /**
   * Creates an instance of {@link IndexedProcess} with the given children.
   *
   * @return the new instance of IndexedProcess.
   */
  net.sourceforge.czt.circus.ast.IndexedProcess createIndexedProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ProofObligationAnn}.
   *
   * @return the new instance of ProofObligationAnn.
   */
  net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn();

  /**
   * Creates an instance of {@link ProofObligationAnn} with the given children.
   *
   * @return the new instance of ProofObligationAnn.
   */
  net.sourceforge.czt.circus.ast.ProofObligationAnn createProofObligationAnn( net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link ChannelSetPara}.
   *
   * @return the new instance of ChannelSetPara.
   */
  net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara();

  /**
   * Creates an instance of {@link ChannelSetPara} with the given children.
   *
   * @return the new instance of ChannelSetPara.
   */
  net.sourceforge.czt.circus.ast.ChannelSetPara createChannelSetPara( net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link SeqProcessIdx}.
   *
   * @return the new instance of SeqProcessIdx.
   */
  net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx();

  /**
   * Creates an instance of {@link SeqProcessIdx} with the given children.
   *
   * @return the new instance of SeqProcessIdx.
   */
  net.sourceforge.czt.circus.ast.SeqProcessIdx createSeqProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link CircusCommunicationList}.
   *
   * @return the new instance of CircusCommunicationList.
   */
  net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList();

  /**
   * Creates an instance of {@link CircusCommunicationList} with the given children.
   *
   * @return the new instance of CircusCommunicationList.
   */
  net.sourceforge.czt.circus.ast.CircusCommunicationList createCircusCommunicationList(java.util.List<? extends net.sourceforge.czt.circus.ast.Communication>
 communication);

  /**
   * Creates an instance of {@link CircusChannelSet}.
   *
   * @return the new instance of CircusChannelSet.
   */
  net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet();

  /**
   * Creates an instance of {@link CircusChannelSet} with the given children.
   *
   * @return the new instance of CircusChannelSet.
   */
  net.sourceforge.czt.circus.ast.CircusChannelSet createCircusChannelSet( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx}.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx();

  /**
   * Creates an instance of {@link ExtChoiceProcessIdx} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIdx.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx createExtChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ActionSignatureAnn}.
   *
   * @return the new instance of ActionSignatureAnn.
   */
  net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn();

  /**
   * Creates an instance of {@link ActionSignatureAnn} with the given children.
   *
   * @return the new instance of ActionSignatureAnn.
   */
  net.sourceforge.czt.circus.ast.ActionSignatureAnn createActionSignatureAnn( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature);

  /**
   * Creates an instance of {@link ProcessSignatureList}.
   *
   * @return the new instance of ProcessSignatureList.
   */
  net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList();

  /**
   * Creates an instance of {@link ProcessSignatureList} with the given children.
   *
   * @return the new instance of ProcessSignatureList.
   */
  net.sourceforge.czt.circus.ast.ProcessSignatureList createProcessSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ProcessSignature>
 processSignature);

  /**
   * Creates an instance of {@link CircusChannelSetList}.
   *
   * @return the new instance of CircusChannelSetList.
   */
  net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList();

  /**
   * Creates an instance of {@link CircusChannelSetList} with the given children.
   *
   * @return the new instance of CircusChannelSetList.
   */
  net.sourceforge.czt.circus.ast.CircusChannelSetList createCircusChannelSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet);

  /**
   * Creates an instance of {@link HideAction}.
   *
   * @return the new instance of HideAction.
   */
  net.sourceforge.czt.circus.ast.HideAction createHideAction();

  /**
   * Creates an instance of {@link HideAction} with the given children.
   *
   * @return the new instance of HideAction.
   */
  net.sourceforge.czt.circus.ast.HideAction createHideAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link ParallelAction}.
   *
   * @return the new instance of ParallelAction.
   */
  net.sourceforge.czt.circus.ast.ParallelAction createParallelAction();

  /**
   * Creates an instance of {@link ParallelAction} with the given children.
   *
   * @return the new instance of ParallelAction.
   */
  net.sourceforge.czt.circus.ast.ParallelAction createParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link ExtChoiceProcessIte}.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte();

  /**
   * Creates an instance of {@link ExtChoiceProcessIte} with the given children.
   *
   * @return the new instance of ExtChoiceProcessIte.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcessIte createExtChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ParallelProcessIdx}.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx();

  /**
   * Creates an instance of {@link ParallelProcessIdx} with the given children.
   *
   * @return the new instance of ParallelProcessIdx.
   */
  net.sourceforge.czt.circus.ast.ParallelProcessIdx createParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link OutputFieldAnn}.
   *
   * @return the new instance of OutputFieldAnn.
   */
  net.sourceforge.czt.circus.ast.OutputFieldAnn createOutputFieldAnn();

  /**
   * Creates an instance of {@link OnTheFlyDefAnn}.
   *
   * @return the new instance of OnTheFlyDefAnn.
   */
  net.sourceforge.czt.circus.ast.OnTheFlyDefAnn createOnTheFlyDefAnn();

  /**
   * Creates an instance of {@link LetVarAction}.
   *
   * @return the new instance of LetVarAction.
   */
  net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction();

  /**
   * Creates an instance of {@link LetVarAction} with the given children.
   *
   * @return the new instance of LetVarAction.
   */
  net.sourceforge.czt.circus.ast.LetVarAction createLetVarAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.ExprList  exprList);

  /**
   * Creates an instance of {@link ParamProcess}.
   *
   * @return the new instance of ParamProcess.
   */
  net.sourceforge.czt.circus.ast.ParamProcess createParamProcess();

  /**
   * Creates an instance of {@link ParamProcess} with the given children.
   *
   * @return the new instance of ParamProcess.
   */
  net.sourceforge.czt.circus.ast.ParamProcess createParamProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link NameSetPara}.
   *
   * @return the new instance of NameSetPara.
   */
  net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara();

  /**
   * Creates an instance of {@link NameSetPara} with the given children.
   *
   * @return the new instance of NameSetPara.
   */
  net.sourceforge.czt.circus.ast.NameSetPara createNameSetPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.NameSet  nameSet);

  /**
   * Creates an instance of {@link SeqProcessIte}.
   *
   * @return the new instance of SeqProcessIte.
   */
  net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte();

  /**
   * Creates an instance of {@link SeqProcessIte} with the given children.
   *
   * @return the new instance of SeqProcessIte.
   */
  net.sourceforge.czt.circus.ast.SeqProcessIte createSeqProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ParallelProcess}.
   *
   * @return the new instance of ParallelProcess.
   */
  net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess();

  /**
   * Creates an instance of {@link ParallelProcess} with the given children.
   *
   * @return the new instance of ParallelProcess.
   */
  net.sourceforge.czt.circus.ast.ParallelProcess createParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link SchExprAction}.
   *
   * @return the new instance of SchExprAction.
   */
  net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction();

  /**
   * Creates an instance of {@link SchExprAction} with the given children.
   *
   * @return the new instance of SchExprAction.
   */
  net.sourceforge.czt.circus.ast.SchExprAction createSchExprAction( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link StopAction}.
   *
   * @return the new instance of StopAction.
   */
  net.sourceforge.czt.circus.ast.StopAction createStopAction();

  /**
   * Creates an instance of {@link QualifiedDecl}.
   *
   * @return the new instance of QualifiedDecl.
   */
  net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl();

  /**
   * Creates an instance of {@link QualifiedDecl} with the given children.
   *
   * @return the new instance of QualifiedDecl.
   */
  net.sourceforge.czt.circus.ast.QualifiedDecl createQualifiedDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr,net.sourceforge.czt.circus.ast.ParamQualifier
 paramQualifier);

  /**
   * Creates an instance of {@link SigmaExpr}.
   *
   * @return the new instance of SigmaExpr.
   */
  net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr();

  /**
   * Creates an instance of {@link SigmaExpr} with the given children.
   *
   * @return the new instance of SigmaExpr.
   */
  net.sourceforge.czt.circus.ast.SigmaExpr createSigmaExpr( net.sourceforge.czt.z.ast.RefExpr  channel, net.sourceforge.czt.z.ast.Expr  value);

  /**
   * Creates an instance of {@link ParallelProcessIte}.
   *
   * @return the new instance of ParallelProcessIte.
   */
  net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte();

  /**
   * Creates an instance of {@link ParallelProcessIte} with the given children.
   *
   * @return the new instance of ParallelProcessIte.
   */
  net.sourceforge.czt.circus.ast.ParallelProcessIte createParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link CallProcess}.
   *
   * @return the new instance of CallProcess.
   */
  net.sourceforge.czt.circus.ast.CallProcess createCallProcess();

  /**
   * Creates an instance of {@link CallProcess} with the given children.
   *
   * @return the new instance of CallProcess.
   */
  net.sourceforge.czt.circus.ast.CallProcess createCallProcess( net.sourceforge.czt.z.ast.RefExpr  callExpr, net.sourceforge.czt.z.ast.ExprList  actuals,net.sourceforge.czt.circus.ast.CallUsage
 callUsage);

  /**
   * Creates an instance of {@link IntChoiceProcessIte}.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte();

  /**
   * Creates an instance of {@link IntChoiceProcessIte} with the given children.
   *
   * @return the new instance of IntChoiceProcessIte.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcessIte createIntChoiceProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ProcessSignature}.
   *
   * @return the new instance of ProcessSignature.
   */
  net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature();

  /**
   * Creates an instance of {@link ProcessSignature} with the given children.
   *
   * @return the new instance of ProcessSignature.
   */
  net.sourceforge.czt.circus.ast.ProcessSignature createProcessSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ZNameList  genFormals,java.util.List<? extends net.sourceforge.czt.circus.ast.SignatureList>
 signatureList, net.sourceforge.czt.circus.ast.ChannelSetList  processChannelSets, net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate,net.sourceforge.czt.circus.ast.CallUsage
 callUsage);

  /**
   * Creates an instance of {@link ExtChoiceActionIte}.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte();

  /**
   * Creates an instance of {@link ExtChoiceActionIte} with the given children.
   *
   * @return the new instance of ExtChoiceActionIte.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceActionIte createExtChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link IfGuardedCommand}.
   *
   * @return the new instance of IfGuardedCommand.
   */
  net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand();

  /**
   * Creates an instance of {@link IfGuardedCommand} with the given children.
   *
   * @return the new instance of IfGuardedCommand.
   */
  net.sourceforge.czt.circus.ast.IfGuardedCommand createIfGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList);

  /**
   * Creates an instance of {@link ProcessType}.
   *
   * @return the new instance of ProcessType.
   */
  net.sourceforge.czt.circus.ast.ProcessType createProcessType();

  /**
   * Creates an instance of {@link ProcessType} with the given children.
   *
   * @return the new instance of ProcessType.
   */
  net.sourceforge.czt.circus.ast.ProcessType createProcessType( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature);

  /**
   * Creates an instance of {@link InterleaveAction}.
   *
   * @return the new instance of InterleaveAction.
   */
  net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction();

  /**
   * Creates an instance of {@link InterleaveAction} with the given children.
   *
   * @return the new instance of InterleaveAction.
   */
  net.sourceforge.czt.circus.ast.InterleaveAction createInterleaveAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet);

  /**
   * Creates an instance of {@link PrefixingAction}.
   *
   * @return the new instance of PrefixingAction.
   */
  net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction();

  /**
   * Creates an instance of {@link PrefixingAction} with the given children.
   *
   * @return the new instance of PrefixingAction.
   */
  net.sourceforge.czt.circus.ast.PrefixingAction createPrefixingAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.Communication  communication);

  /**
   * Creates an instance of {@link ProcessTransformerPred}.
   *
   * @return the new instance of ProcessTransformerPred.
   */
  net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred();

  /**
   * Creates an instance of {@link ProcessTransformerPred} with the given children.
   *
   * @return the new instance of ProcessTransformerPred.
   */
  net.sourceforge.czt.circus.ast.ProcessTransformerPred createProcessTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess);

  /**
   * Creates an instance of {@link CircusActionList}.
   *
   * @return the new instance of CircusActionList.
   */
  net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList();

  /**
   * Creates an instance of {@link CircusActionList} with the given children.
   *
   * @return the new instance of CircusActionList.
   */
  net.sourceforge.czt.circus.ast.CircusActionList createCircusActionList(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link Communication}.
   *
   * @return the new instance of Communication.
   */
  net.sourceforge.czt.circus.ast.Communication createCommunication();

  /**
   * Creates an instance of {@link Communication} with the given children.
   *
   * @return the new instance of Communication.
   */
  net.sourceforge.czt.circus.ast.Communication createCommunication( net.sourceforge.czt.z.ast.RefExpr  channelExpr, net.sourceforge.czt.circus.ast.FieldList  fieldList,net.sourceforge.czt.circus.ast.CommUsage
 commUsage,net.sourceforge.czt.circus.ast.CommPattern
 commPattern, java.math.BigInteger  multiSych, Boolean  indexed);

  /**
   * Creates an instance of {@link IntChoiceProcessIdx}.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx();

  /**
   * Creates an instance of {@link IntChoiceProcessIdx} with the given children.
   *
   * @return the new instance of IntChoiceProcessIdx.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcessIdx createIntChoiceProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link InputField}.
   *
   * @return the new instance of InputField.
   */
  net.sourceforge.czt.circus.ast.InputField createInputField();

  /**
   * Creates an instance of {@link InputField} with the given children.
   *
   * @return the new instance of InputField.
   */
  net.sourceforge.czt.circus.ast.InputField createInputField( net.sourceforge.czt.z.ast.Name  variableName, net.sourceforge.czt.z.ast.Pred  restriction);

  /**
   * Creates an instance of {@link HideProcess}.
   *
   * @return the new instance of HideProcess.
   */
  net.sourceforge.czt.circus.ast.HideProcess createHideProcess();

  /**
   * Creates an instance of {@link HideProcess} with the given children.
   *
   * @return the new instance of HideProcess.
   */
  net.sourceforge.czt.circus.ast.HideProcess createHideProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link ActionPara}.
   *
   * @return the new instance of ActionPara.
   */
  net.sourceforge.czt.circus.ast.ActionPara createActionPara();

  /**
   * Creates an instance of {@link ActionPara} with the given children.
   *
   * @return the new instance of ActionPara.
   */
  net.sourceforge.czt.circus.ast.ActionPara createActionPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.CircusAction  circusAction);

  /**
   * Creates an instance of {@link SeqAction}.
   *
   * @return the new instance of SeqAction.
   */
  net.sourceforge.czt.circus.ast.SeqAction createSeqAction();

  /**
   * Creates an instance of {@link SeqAction} with the given children.
   *
   * @return the new instance of SeqAction.
   */
  net.sourceforge.czt.circus.ast.SeqAction createSeqAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link ExtChoiceProcess}.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess();

  /**
   * Creates an instance of {@link ExtChoiceProcess} with the given children.
   *
   * @return the new instance of ExtChoiceProcess.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceProcess createExtChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess);

  /**
   * Creates an instance of {@link LetMuAction}.
   *
   * @return the new instance of LetMuAction.
   */
  net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction();

  /**
   * Creates an instance of {@link LetMuAction} with the given children.
   *
   * @return the new instance of LetMuAction.
   */
  net.sourceforge.czt.circus.ast.LetMuAction createLetMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.ParaList  paraList);

  /**
   * Creates an instance of {@link ZSignatureList}.
   *
   * @return the new instance of ZSignatureList.
   */
  net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList();

  /**
   * Creates an instance of {@link ZSignatureList} with the given children.
   *
   * @return the new instance of ZSignatureList.
   */
  net.sourceforge.czt.circus.ast.ZSignatureList createZSignatureList(java.util.List<? extends net.sourceforge.czt.z.ast.Signature>
 signature);

  /**
   * Creates an instance of {@link AssignmentCommand}.
   *
   * @return the new instance of AssignmentCommand.
   */
  net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand();

  /**
   * Creates an instance of {@link AssignmentCommand} with the given children.
   *
   * @return the new instance of AssignmentCommand.
   */
  net.sourceforge.czt.circus.ast.AssignmentCommand createAssignmentCommand( net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs);

  /**
   * Creates an instance of {@link ChannelType}.
   *
   * @return the new instance of ChannelType.
   */
  net.sourceforge.czt.circus.ast.ChannelType createChannelType();

  /**
   * Creates an instance of {@link ChannelType} with the given children.
   *
   * @return the new instance of ChannelType.
   */
  net.sourceforge.czt.circus.ast.ChannelType createChannelType( net.sourceforge.czt.z.ast.Type2  type);

  /**
   * Creates an instance of {@link ActionType}.
   *
   * @return the new instance of ActionType.
   */
  net.sourceforge.czt.circus.ast.ActionType createActionType();

  /**
   * Creates an instance of {@link ActionType} with the given children.
   *
   * @return the new instance of ActionType.
   */
  net.sourceforge.czt.circus.ast.ActionType createActionType( net.sourceforge.czt.circus.ast.ActionSignature  actionSignature);

  /**
   * Creates an instance of {@link SeqActionIte}.
   *
   * @return the new instance of SeqActionIte.
   */
  net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte();

  /**
   * Creates an instance of {@link SeqActionIte} with the given children.
   *
   * @return the new instance of SeqActionIte.
   */
  net.sourceforge.czt.circus.ast.SeqActionIte createSeqActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link IntChoiceActionIte}.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte();

  /**
   * Creates an instance of {@link IntChoiceActionIte} with the given children.
   *
   * @return the new instance of IntChoiceActionIte.
   */
  net.sourceforge.czt.circus.ast.IntChoiceActionIte createIntChoiceActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link CallAction}.
   *
   * @return the new instance of CallAction.
   */
  net.sourceforge.czt.circus.ast.CallAction createCallAction();

  /**
   * Creates an instance of {@link CallAction} with the given children.
   *
   * @return the new instance of CallAction.
   */
  net.sourceforge.czt.circus.ast.CallAction createCallAction( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList);

  /**
   * Creates an instance of {@link SpecStmtCommand}.
   *
   * @return the new instance of SpecStmtCommand.
   */
  net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand();

  /**
   * Creates an instance of {@link SpecStmtCommand} with the given children.
   *
   * @return the new instance of SpecStmtCommand.
   */
  net.sourceforge.czt.circus.ast.SpecStmtCommand createSpecStmtCommand( net.sourceforge.czt.z.ast.NameList  frame,java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred);

  /**
   * Creates an instance of {@link StateUpdateAnn}.
   *
   * @return the new instance of StateUpdateAnn.
   */
  net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn();

  /**
   * Creates an instance of {@link StateUpdateAnn} with the given children.
   *
   * @return the new instance of StateUpdateAnn.
   */
  net.sourceforge.czt.circus.ast.StateUpdateAnn createStateUpdateAnn( net.sourceforge.czt.circus.ast.StateUpdate  stateUpdate);

  /**
   * Creates an instance of {@link ChannelDecl}.
   *
   * @return the new instance of ChannelDecl.
   */
  net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl();

  /**
   * Creates an instance of {@link ChannelDecl} with the given children.
   *
   * @return the new instance of ChannelDecl.
   */
  net.sourceforge.czt.circus.ast.ChannelDecl createChannelDecl(java.util.List<? extends net.sourceforge.czt.z.ast.NameList>
 nameList, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link NameSetType}.
   *
   * @return the new instance of NameSetType.
   */
  net.sourceforge.czt.circus.ast.NameSetType createNameSetType();

  /**
   * Creates an instance of {@link NameSetType} with the given children.
   *
   * @return the new instance of NameSetType.
   */
  net.sourceforge.czt.circus.ast.NameSetType createNameSetType( net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link InterleaveProcessIdx}.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx();

  /**
   * Creates an instance of {@link InterleaveProcessIdx} with the given children.
   *
   * @return the new instance of InterleaveProcessIdx.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcessIdx createInterleaveProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ProcessSignatureAnn}.
   *
   * @return the new instance of ProcessSignatureAnn.
   */
  net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn();

  /**
   * Creates an instance of {@link ProcessSignatureAnn} with the given children.
   *
   * @return the new instance of ProcessSignatureAnn.
   */
  net.sourceforge.czt.circus.ast.ProcessSignatureAnn createProcessSignatureAnn( net.sourceforge.czt.circus.ast.ProcessSignature  processSignature);

  /**
   * Creates an instance of {@link MuAction}.
   *
   * @return the new instance of MuAction.
   */
  net.sourceforge.czt.circus.ast.MuAction createMuAction();

  /**
   * Creates an instance of {@link MuAction} with the given children.
   *
   * @return the new instance of MuAction.
   */
  net.sourceforge.czt.circus.ast.MuAction createMuAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Name  name);

  /**
   * Creates an instance of {@link ExtChoiceAction}.
   *
   * @return the new instance of ExtChoiceAction.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction();

  /**
   * Creates an instance of {@link ExtChoiceAction} with the given children.
   *
   * @return the new instance of ExtChoiceAction.
   */
  net.sourceforge.czt.circus.ast.ExtChoiceAction createExtChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link SkipAction}.
   *
   * @return the new instance of SkipAction.
   */
  net.sourceforge.czt.circus.ast.SkipAction createSkipAction();

  /**
   * Creates an instance of {@link SubstitutionAction}.
   *
   * @return the new instance of SubstitutionAction.
   */
  net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction();

  /**
   * Creates an instance of {@link SubstitutionAction} with the given children.
   *
   * @return the new instance of SubstitutionAction.
   */
  net.sourceforge.czt.circus.ast.SubstitutionAction createSubstitutionAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.RenameList  renameList);

  /**
   * Creates an instance of {@link ChannelSetType}.
   *
   * @return the new instance of ChannelSetType.
   */
  net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType();

  /**
   * Creates an instance of {@link ChannelSetType} with the given children.
   *
   * @return the new instance of ChannelSetType.
   */
  net.sourceforge.czt.circus.ast.ChannelSetType createChannelSetType( net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link CircusNameSet}.
   *
   * @return the new instance of CircusNameSet.
   */
  net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet();

  /**
   * Creates an instance of {@link CircusNameSet} with the given children.
   *
   * @return the new instance of CircusNameSet.
   */
  net.sourceforge.czt.circus.ast.CircusNameSet createCircusNameSet( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link IntChoiceAction}.
   *
   * @return the new instance of IntChoiceAction.
   */
  net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction();

  /**
   * Creates an instance of {@link IntChoiceAction} with the given children.
   *
   * @return the new instance of IntChoiceAction.
   */
  net.sourceforge.czt.circus.ast.IntChoiceAction createIntChoiceAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link ParamAction}.
   *
   * @return the new instance of ParamAction.
   */
  net.sourceforge.czt.circus.ast.ParamAction createParamAction();

  /**
   * Creates an instance of {@link ParamAction} with the given children.
   *
   * @return the new instance of ParamAction.
   */
  net.sourceforge.czt.circus.ast.ParamAction createParamAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link CircusNameSetList}.
   *
   * @return the new instance of CircusNameSetList.
   */
  net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList();

  /**
   * Creates an instance of {@link CircusNameSetList} with the given children.
   *
   * @return the new instance of CircusNameSetList.
   */
  net.sourceforge.czt.circus.ast.CircusNameSetList createCircusNameSetList(java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet);

  /**
   * Creates an instance of {@link ProcessPara}.
   *
   * @return the new instance of ProcessPara.
   */
  net.sourceforge.czt.circus.ast.ProcessPara createProcessPara();

  /**
   * Creates an instance of {@link ProcessPara} with the given children.
   *
   * @return the new instance of ProcessPara.
   */
  net.sourceforge.czt.circus.ast.ProcessPara createProcessPara( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.NameList  genFormals, net.sourceforge.czt.circus.ast.CircusProcess  circusProcess);

  /**
   * Creates an instance of {@link AlphabetisedParallelAction}.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction();

  /**
   * Creates an instance of {@link AlphabetisedParallelAction} with the given children.
   *
   * @return the new instance of AlphabetisedParallelAction.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelAction createAlphabetisedParallelAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction,java.util.List<? extends net.sourceforge.czt.circus.ast.NameSet>
 nameSet,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet);

  /**
   * Creates an instance of {@link BasicChannelSetExpr}.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr();

  /**
   * Creates an instance of {@link BasicChannelSetExpr} with the given children.
   *
   * @return the new instance of BasicChannelSetExpr.
   */
  net.sourceforge.czt.circus.ast.BasicChannelSetExpr createBasicChannelSetExpr( net.sourceforge.czt.circus.ast.CommunicationList  communicationList);

  /**
   * Creates an instance of {@link InterleaveProcessIte}.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte();

  /**
   * Creates an instance of {@link InterleaveProcessIte} with the given children.
   *
   * @return the new instance of InterleaveProcessIte.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcessIte createInterleaveProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link DoGuardedCommand}.
   *
   * @return the new instance of DoGuardedCommand.
   */
  net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand();

  /**
   * Creates an instance of {@link DoGuardedCommand} with the given children.
   *
   * @return the new instance of DoGuardedCommand.
   */
  net.sourceforge.czt.circus.ast.DoGuardedCommand createDoGuardedCommand( net.sourceforge.czt.circus.ast.ActionList  actionList);

  /**
   * Creates an instance of {@link GuardedAction}.
   *
   * @return the new instance of GuardedAction.
   */
  net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction();

  /**
   * Creates an instance of {@link GuardedAction} with the given children.
   *
   * @return the new instance of GuardedAction.
   */
  net.sourceforge.czt.circus.ast.GuardedAction createGuardedAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link SeqProcess}.
   *
   * @return the new instance of SeqProcess.
   */
  net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess();

  /**
   * Creates an instance of {@link SeqProcess} with the given children.
   *
   * @return the new instance of SeqProcess.
   */
  net.sourceforge.czt.circus.ast.SeqProcess createSeqProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess);

  /**
   * Creates an instance of {@link InterruptAction}.
   *
   * @return the new instance of InterruptAction.
   */
  net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction();

  /**
   * Creates an instance of {@link InterruptAction} with the given children.
   *
   * @return the new instance of InterruptAction.
   */
  net.sourceforge.czt.circus.ast.InterruptAction createInterruptAction(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte}.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte();

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIte.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte createAlphabetisedParallelProcessIte( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link IntChoiceProcess}.
   *
   * @return the new instance of IntChoiceProcess.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess();

  /**
   * Creates an instance of {@link IntChoiceProcess} with the given children.
   *
   * @return the new instance of IntChoiceProcess.
   */
  net.sourceforge.czt.circus.ast.IntChoiceProcess createIntChoiceProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess);

  /**
   * Creates an instance of {@link CircusStateAnn}.
   *
   * @return the new instance of CircusStateAnn.
   */
  net.sourceforge.czt.circus.ast.CircusStateAnn createCircusStateAnn();

  /**
   * Creates an instance of {@link ParallelActionIte}.
   *
   * @return the new instance of ParallelActionIte.
   */
  net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte();

  /**
   * Creates an instance of {@link ParallelActionIte} with the given children.
   *
   * @return the new instance of ParallelActionIte.
   */
  net.sourceforge.czt.circus.ast.ParallelActionIte createParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link RenameProcess}.
   *
   * @return the new instance of RenameProcess.
   */
  net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess();

  /**
   * Creates an instance of {@link RenameProcess} with the given children.
   *
   * @return the new instance of RenameProcess.
   */
  net.sourceforge.czt.circus.ast.RenameProcess createRenameProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs);

  /**
   * Creates an instance of {@link BasicProcess}.
   *
   * @return the new instance of BasicProcess.
   */
  net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess();

  /**
   * Creates an instance of {@link BasicProcess} with the given children.
   *
   * @return the new instance of BasicProcess.
   */
  net.sourceforge.czt.circus.ast.BasicProcess createBasicProcess( net.sourceforge.czt.z.ast.ParaList  paraList);

  /**
   * Creates an instance of {@link RenameAction}.
   *
   * @return the new instance of RenameAction.
   */
  net.sourceforge.czt.circus.ast.RenameAction createRenameAction();

  /**
   * Creates an instance of {@link RenameAction} with the given children.
   *
   * @return the new instance of RenameAction.
   */
  net.sourceforge.czt.circus.ast.RenameAction createRenameAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.circus.ast.AssignmentPairs  assignmentPairs);

  /**
   * Creates an instance of {@link ActionSignature}.
   *
   * @return the new instance of ActionSignature.
   */
  net.sourceforge.czt.circus.ast.ActionSignature createActionSignature();

  /**
   * Creates an instance of {@link ActionSignature} with the given children.
   *
   * @return the new instance of ActionSignature.
   */
  net.sourceforge.czt.circus.ast.ActionSignature createActionSignature( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.circus.ast.SignatureList  signatureList, net.sourceforge.czt.circus.ast.CommunicationList  communicationList, net.sourceforge.czt.circus.ast.ChannelSetList  channelSetList, net.sourceforge.czt.circus.ast.NameSetList  nameSetList);

  /**
   * Creates an instance of {@link ChannelPara}.
   *
   * @return the new instance of ChannelPara.
   */
  net.sourceforge.czt.circus.ast.ChannelPara createChannelPara();

  /**
   * Creates an instance of {@link ChannelPara} with the given children.
   *
   * @return the new instance of ChannelPara.
   */
  net.sourceforge.czt.circus.ast.ChannelPara createChannelPara( net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link ActionTransformerPred}.
   *
   * @return the new instance of ActionTransformerPred.
   */
  net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred();

  /**
   * Creates an instance of {@link ActionTransformerPred} with the given children.
   *
   * @return the new instance of ActionTransformerPred.
   */
  net.sourceforge.czt.circus.ast.ActionTransformerPred createActionTransformerPred( net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.circus.ast.Transformation
 transformation,net.sourceforge.czt.circus.ast.Model
 model,java.util.List<? extends net.sourceforge.czt.circus.ast.CircusAction>
 circusAction);

  /**
   * Creates an instance of {@link CircusFieldList}.
   *
   * @return the new instance of CircusFieldList.
   */
  net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList();

  /**
   * Creates an instance of {@link CircusFieldList} with the given children.
   *
   * @return the new instance of CircusFieldList.
   */
  net.sourceforge.czt.circus.ast.CircusFieldList createCircusFieldList(java.util.List<? extends net.sourceforge.czt.circus.ast.Field>
 field);

  /**
   * Creates an instance of {@link ImplicitChannelAnn}.
   *
   * @return the new instance of ImplicitChannelAnn.
   */
  net.sourceforge.czt.circus.ast.ImplicitChannelAnn createImplicitChannelAnn();

  /**
   * Creates an instance of {@link VarDeclCommand}.
   *
   * @return the new instance of VarDeclCommand.
   */
  net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand();

  /**
   * Creates an instance of {@link VarDeclCommand} with the given children.
   *
   * @return the new instance of VarDeclCommand.
   */
  net.sourceforge.czt.circus.ast.VarDeclCommand createVarDeclCommand( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.CircusAction  circusAction);

  /**
   * Creates an instance of {@link CommunicationType}.
   *
   * @return the new instance of CommunicationType.
   */
  net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType();

  /**
   * Creates an instance of {@link CommunicationType} with the given children.
   *
   * @return the new instance of CommunicationType.
   */
  net.sourceforge.czt.circus.ast.CommunicationType createCommunicationType( net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link InterleaveActionIte}.
   *
   * @return the new instance of InterleaveActionIte.
   */
  net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte();

  /**
   * Creates an instance of {@link InterleaveActionIte} with the given children.
   *
   * @return the new instance of InterleaveActionIte.
   */
  net.sourceforge.czt.circus.ast.InterleaveActionIte createInterleaveActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet);

  /**
   * Creates an instance of {@link DotField}.
   *
   * @return the new instance of DotField.
   */
  net.sourceforge.czt.circus.ast.DotField createDotField();

  /**
   * Creates an instance of {@link DotField} with the given children.
   *
   * @return the new instance of DotField.
   */
  net.sourceforge.czt.circus.ast.DotField createDotField( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx}.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx();

  /**
   * Creates an instance of {@link AlphabetisedParallelProcessIdx} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcessIdx.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx createAlphabetisedParallelProcessIdx( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link ChaosAction}.
   *
   * @return the new instance of ChaosAction.
   */
  net.sourceforge.czt.circus.ast.ChaosAction createChaosAction();

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess}.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess();

  /**
   * Creates an instance of {@link AlphabetisedParallelProcess} with the given children.
   *
   * @return the new instance of AlphabetisedParallelProcess.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess createAlphabetisedParallelProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess,java.util.List<? extends net.sourceforge.czt.circus.ast.ChannelSet>
 channelSet);

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte}.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte();

  /**
   * Creates an instance of {@link AlphabetisedParallelActionIte} with the given children.
   *
   * @return the new instance of AlphabetisedParallelActionIte.
   */
  net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte createAlphabetisedParallelActionIte( net.sourceforge.czt.circus.ast.CircusAction  circusAction, net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.circus.ast.NameSet  nameSet, net.sourceforge.czt.circus.ast.ChannelSet  channelSet);

  /**
   * Creates an instance of {@link AssignmentPairs}.
   *
   * @return the new instance of AssignmentPairs.
   */
  net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs();

  /**
   * Creates an instance of {@link AssignmentPairs} with the given children.
   *
   * @return the new instance of AssignmentPairs.
   */
  net.sourceforge.czt.circus.ast.AssignmentPairs createAssignmentPairs( net.sourceforge.czt.z.ast.NameList  lHS, net.sourceforge.czt.z.ast.ExprList  rHS);

  /**
   * Creates an instance of {@link InterleaveProcess}.
   *
   * @return the new instance of InterleaveProcess.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess();

  /**
   * Creates an instance of {@link InterleaveProcess} with the given children.
   *
   * @return the new instance of InterleaveProcess.
   */
  net.sourceforge.czt.circus.ast.InterleaveProcess createInterleaveProcess(java.util.List<? extends net.sourceforge.czt.circus.ast.CircusProcess>
 circusProcess);

  /**
   * Creates an instance of {@link ActionSignatureList}.
   *
   * @return the new instance of ActionSignatureList.
   */
  net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList();

  /**
   * Creates an instance of {@link ActionSignatureList} with the given children.
   *
   * @return the new instance of ActionSignatureList.
   */
  net.sourceforge.czt.circus.ast.ActionSignatureList createActionSignatureList(java.util.List<? extends net.sourceforge.czt.circus.ast.ActionSignature>
 actionSignature);

  /** Creates a parameterless call action. This is a convenience method */
  CallAction createCallAction(net.sourceforge.czt.z.ast.Name name);

  /** Creates a parameterless call process with empty generic actuals. This is a convenience method */
  CallProcess createCallProcess(net.sourceforge.czt.z.ast.Name name);

  /** Creates an empty BasicNameSet. This is a convenience method */
  CircusNameSet createEmptyCircusNameSet();

  /** Creates an empty BasicChannelSet. This is a convenience method */
  CircusChannelSet createEmptyCircusChannelSet();

  /**
   * Creates the synchronisation channel name. This creates a ZName without strokes or ID
   * and with CircusString.CIRCUSSYNCH string as the name.
   */
  net.sourceforge.czt.z.ast.ZName createSynchName();

  /**
   * Creates the synchronisation channel type. It creates a power type of a given type 
   * containing createSynchName() as the given type name.
   */
  net.sourceforge.czt.z.ast.PowerType createSynchType();

  /**
   * Convenience method that creates a DotField and annotates it with an OutputFieldAnn
   */
  DotField createOutputField(net.sourceforge.czt.z.ast.Expr e);

  ActionSignature createCompleteActionSignature(
    net.sourceforge.czt.z.ast.Name actionName,
    net.sourceforge.czt.z.ast.Signature formals,
    net.sourceforge.czt.z.ast.Signature localVars,
    net.sourceforge.czt.z.ast.Signature usedChannels,
    CommunicationList usedComms,
    ChannelSetList usedChannelSets,
    NameSetList usedNameSets);
    
  /**
   * Creates an empty action signature. That is, an action signature with null name,
   * empty communication, channel set and name set lists; as well as empty local variables 
   * and formal parameters and used channels signature. The MuAction signature flag is off.
   * Note that the signature itself is not totally empty since getZSignatureList() returns a list
   * containing the two empty signatures for formal parameters and local variables.
   */
  ActionSignature createEmptyActionSignature();
  
  /**
   * The initial action signature for a MuAction just contain its name. That is, it is
   * an empty action signature with the given name and the MuAction signature flag on.
   * Also, it requires that the given name is not null. It throws an IllegalArgumentException if it is. 
   */
  ActionSignature createInitialMuActionSignature(net.sourceforge.czt.z.ast.Name actionName);

  /**
   * Convenience method that adds the signatures passed to the SignatureList for
   * the main ActionSignature constructor. The MuAction signature flag is off.
   */
  ActionSignature createActionSignature(
    net.sourceforge.czt.z.ast.Name actionName,
    net.sourceforge.czt.z.ast.Signature formals,
    net.sourceforge.czt.z.ast.Signature localVars,
    net.sourceforge.czt.z.ast.Signature usedChannels,
    CommunicationList usedComms,
    ChannelSetList usedChannelSets,
    NameSetList usedNameSets);

 ProcessSignature createCompleteProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    ProcessSignatureList processSignatures,
    ActionSignatureList actionSignatures,
    ZSignatureList basicProcessLocalZSignatures,
    ChannelSetList parallelProcessChannelSets,
    StateUpdate stateUpdate,
    CallUsage usage);
  
  /**
   * Creates an empty process signature. That is, an process signature with null name,
   * empty generic formals, empty formal parameters or indexes, empty list of 
   * process signatures, empty list of action signatures, empty list of process 
   * channel sets, empty state update, and Parameterised as default usage.
   */
  ProcessSignature createEmptyProcessSignature();

  /** 
   * Creates a ProcessSignature properly packing the various parameters
   * within the rather complex AST structure underneath. This is useful
   * for a general process (i.e. extenal choice or call process).
   */
  ProcessSignature createProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    ProcessSignatureList processSignatures,
    CallUsage usage);

  /** 
   * Creates a ProcessSignature properly packing the various parameters
   * within the rather complex AST structure underneath. This is useful
   * for a parallel or hiding processes, which contain channel sets explicitly.
   */
  ProcessSignature createChannelSetProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    ProcessSignatureList processSignatures,
    ChannelSetList channelSets,
    CallUsage usage);

  /** 
   * Creates a ProcessSignature properly packing the various parameters
   * within the rather complex AST structure underneath. This is useful
   * for a basic processes with state update information, like those with
   * assignment commands or schema expression actions.
   */
  ProcessSignature createBasicProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    ActionSignatureList actionSignatures,
    ZSignatureList basicProcessLocalZSignatures,
    StateUpdate stateUpdate,
    CallUsage usage);

  /** 
   * Creates a ProcessSignature properly packing the various parameters
   * within the rather complex AST structure underneath. This is useful
   * for a basic processes in general. An empty state update information 
   * is added (i.e., nothing from the stateSignature goes into it!).
   */
  ProcessSignature createBasicProcessSignature(
    net.sourceforge.czt.z.ast.Name name,
    net.sourceforge.czt.z.ast.ZNameList genFormals,
    net.sourceforge.czt.z.ast.Signature paramOrIndexes,
    net.sourceforge.czt.z.ast.Signature stateSignature,
    ActionSignatureList actionSignatures,
    ZSignatureList basicProcessLocalZSignatures,
    CallUsage usage);

}
