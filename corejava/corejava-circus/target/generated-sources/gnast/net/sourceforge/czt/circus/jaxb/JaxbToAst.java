
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.zpatt.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.circus.ast.CircusFactory mCircusFactory_;

  public JaxbToAst()
  {
    mCircusFactory_ =
      new net.sourceforge.czt.circus.impl.CircusFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zpatt.ast.ZpattFactory vZpattFactory, net.sourceforge.czt.circus.ast.CircusFactory vCircusFactory)
  {
    super(vZFactory, vZpattFactory);
    mCircusFactory_ = vCircusFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.circus.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitTransformerPara(net.sourceforge.czt.circus.jaxb.gen.TransformerPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTransformerPara", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.TransformerPred transformerPred =
      (net.sourceforge.czt.circus.ast.TransformerPred) dispatch(jaxbObject.getTransformerPred());
    net.sourceforge.czt.circus.ast.TransformerPara erg = mCircusFactory_.createTransformerPara(name, transformerPred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTransformerPara", erg);
    return erg;
  }

  public Object visitStateUpdate(net.sourceforge.czt.circus.jaxb.gen.StateUpdate jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStateUpdate", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
            
    java.util.List<net.sourceforge.czt.circus.ast.AssignmentPairs> assignmentPairs = new java.util.Vector<net.sourceforge.czt.circus.ast.AssignmentPairs>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs> 
					
		obj : jaxbObject.getAssignmentPairs()) {
	  net.sourceforge.czt.circus.ast.AssignmentPairs o = (net.sourceforge.czt.circus.ast.AssignmentPairs) dispatch(obj);
	  assignmentPairs.add(o);
	}
    
    net.sourceforge.czt.circus.ast.StateUpdate erg = mCircusFactory_.createStateUpdate(schText, pred, assignmentPairs);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitStateUpdate", erg);
    return erg;
  }

  public Object visitIndexedProcess(net.sourceforge.czt.circus.jaxb.gen.IndexedProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIndexedProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.IndexedProcess erg = mCircusFactory_.createIndexedProcess(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIndexedProcess", erg);
    return erg;
  }

  public Object visitProofObligationAnn(net.sourceforge.czt.circus.jaxb.gen.ProofObligationAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofObligationAnn", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.circus.ast.ProofObligationAnn erg = mCircusFactory_.createProofObligationAnn(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofObligationAnn", erg);
    return erg;
  }

  public Object visitChannelSetPara(net.sourceforge.czt.circus.jaxb.gen.ChannelSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.NameList genFormals =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ChannelSetPara erg = mCircusFactory_.createChannelSetPara(genFormals, name, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelSetPara", erg);
    return erg;
  }

  public Object visitSeqProcessIdx(net.sourceforge.czt.circus.jaxb.gen.SeqProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.SeqProcessIdx erg = mCircusFactory_.createSeqProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcessIdx", erg);
    return erg;
  }

  public Object visitCircusCommunicationList(net.sourceforge.czt.circus.jaxb.gen.CircusCommunicationList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusCommunicationList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.Communication> communication = new java.util.Vector<net.sourceforge.czt.circus.ast.Communication>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.Communication> 
					
		obj : jaxbObject.getCommunication()) {
	  net.sourceforge.czt.circus.ast.Communication o = (net.sourceforge.czt.circus.ast.Communication) dispatch(obj);
	  communication.add(o);
	}
    
    net.sourceforge.czt.circus.ast.CircusCommunicationList erg = mCircusFactory_.createCircusCommunicationList(communication);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusCommunicationList", erg);
    return erg;
  }

  public Object visitCircusChannelSet(net.sourceforge.czt.circus.jaxb.gen.CircusChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusChannelSet", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circus.ast.CircusChannelSet erg = mCircusFactory_.createCircusChannelSet(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusChannelSet", erg);
    return erg;
  }

  public Object visitExtChoiceProcessIdx(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIdx erg = mCircusFactory_.createExtChoiceProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessIdx", erg);
    return erg;
  }

  public Object visitActionSignatureAnn(net.sourceforge.czt.circus.jaxb.gen.ActionSignatureAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionSignatureAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.ActionSignature actionSignature =
      (net.sourceforge.czt.circus.ast.ActionSignature) dispatch(jaxbObject.getActionSignature());
    net.sourceforge.czt.circus.ast.ActionSignatureAnn erg = mCircusFactory_.createActionSignatureAnn(actionSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionSignatureAnn", erg);
    return erg;
  }

  public Object visitProcessSignatureList(net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessSignatureList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.ProcessSignature> processSignature = new java.util.Vector<net.sourceforge.czt.circus.ast.ProcessSignature>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.ProcessSignature> 
					
		obj : jaxbObject.getProcessSignature()) {
	  net.sourceforge.czt.circus.ast.ProcessSignature o = (net.sourceforge.czt.circus.ast.ProcessSignature) dispatch(obj);
	  processSignature.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ProcessSignatureList erg = mCircusFactory_.createProcessSignatureList(processSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessSignatureList", erg);
    return erg;
  }

  public Object visitCircusChannelSetList(net.sourceforge.czt.circus.jaxb.gen.CircusChannelSetList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusChannelSetList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.ChannelSet> channelSet = new java.util.Vector<net.sourceforge.czt.circus.ast.ChannelSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.ChannelSet> 
					
		obj : jaxbObject.getChannelSet()) {
	  net.sourceforge.czt.circus.ast.ChannelSet o = (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(obj);
	  channelSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.CircusChannelSetList erg = mCircusFactory_.createCircusChannelSetList(channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusChannelSetList", erg);
    return erg;
  }

  public Object visitHideAction(net.sourceforge.czt.circus.jaxb.gen.HideAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.HideAction erg = mCircusFactory_.createHideAction(circusAction, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideAction", erg);
    return erg;
  }

  public Object visitParallelAction(net.sourceforge.czt.circus.jaxb.gen.ParallelAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.circus.ast.NameSet> nameSet = new java.util.Vector<net.sourceforge.czt.circus.ast.NameSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.NameSet> 
					
		obj : jaxbObject.getNameSet()) {
	  net.sourceforge.czt.circus.ast.NameSet o = (net.sourceforge.czt.circus.ast.NameSet) dispatch(obj);
	  nameSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ParallelAction erg = mCircusFactory_.createParallelAction(circusAction, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelAction", erg);
    return erg;
  }

  public Object visitExtChoiceProcessIte(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ExtChoiceProcessIte erg = mCircusFactory_.createExtChoiceProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcessIte", erg);
    return erg;
  }

  public Object visitParallelProcessIdx(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ParallelProcessIdx erg = mCircusFactory_.createParallelProcessIdx(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcessIdx", erg);
    return erg;
  }

  public Object visitOutputFieldAnn(net.sourceforge.czt.circus.jaxb.gen.OutputFieldAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOutputFieldAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.OutputFieldAnn erg = mCircusFactory_.createOutputFieldAnn();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOutputFieldAnn", erg);
    return erg;
  }

  public Object visitOnTheFlyDefAnn(net.sourceforge.czt.circus.jaxb.gen.OnTheFlyDefAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOnTheFlyDefAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.OnTheFlyDefAnn erg = mCircusFactory_.createOnTheFlyDefAnn();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOnTheFlyDefAnn", erg);
    return erg;
  }

  public Object visitLetVarAction(net.sourceforge.czt.circus.jaxb.gen.LetVarAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetVarAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    net.sourceforge.czt.circus.ast.LetVarAction erg = mCircusFactory_.createLetVarAction(circusAction, declList, exprList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLetVarAction", erg);
    return erg;
  }

  public Object visitParamProcess(net.sourceforge.czt.circus.jaxb.gen.ParamProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParamProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ParamProcess erg = mCircusFactory_.createParamProcess(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParamProcess", erg);
    return erg;
  }

  public Object visitNameSetPara(net.sourceforge.czt.circus.jaxb.gen.NameSetPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSetPara", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.NameSet nameSet =
      (net.sourceforge.czt.circus.ast.NameSet) dispatch(jaxbObject.getNameSet());
    net.sourceforge.czt.circus.ast.NameSetPara erg = mCircusFactory_.createNameSetPara(name, nameSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSetPara", erg);
    return erg;
  }

  public Object visitSeqProcessIte(net.sourceforge.czt.circus.jaxb.gen.SeqProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.SeqProcessIte erg = mCircusFactory_.createSeqProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcessIte", erg);
    return erg;
  }

  public Object visitParallelProcess(net.sourceforge.czt.circus.jaxb.gen.ParallelProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ParallelProcess erg = mCircusFactory_.createParallelProcess(circusProcess, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcess", erg);
    return erg;
  }

  public Object visitSchExprAction(net.sourceforge.czt.circus.jaxb.gen.SchExprAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchExprAction", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circus.ast.SchExprAction erg = mCircusFactory_.createSchExprAction(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSchExprAction", erg);
    return erg;
  }

  public Object visitStopAction(net.sourceforge.czt.circus.jaxb.gen.StopAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStopAction", jaxbObject);
    net.sourceforge.czt.circus.ast.StopAction erg = mCircusFactory_.createStopAction();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitStopAction", erg);
    return erg;
  }

  public Object visitQualifiedDecl(net.sourceforge.czt.circus.jaxb.gen.QualifiedDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitQualifiedDecl", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.ParamQualifier paramQualifier = null;
    if (jaxbObject.getParamQualifier() != null) {
      String paramQualifierJaxb = jaxbObject.getParamQualifier().value();
            
      paramQualifier = net.sourceforge.czt.circus.ast.ParamQualifier.valueOf(paramQualifierJaxb);
    }
    net.sourceforge.czt.circus.ast.QualifiedDecl erg = mCircusFactory_.createQualifiedDecl(nameList, expr, paramQualifier);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitQualifiedDecl", erg);
    return erg;
  }

  public Object visitSigmaExpr(net.sourceforge.czt.circus.jaxb.gen.SigmaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSigmaExpr", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr channel =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getChannel());
    net.sourceforge.czt.z.ast.Expr value =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getValue());
    net.sourceforge.czt.circus.ast.SigmaExpr erg = mCircusFactory_.createSigmaExpr(channel, value);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSigmaExpr", erg);
    return erg;
  }

  public Object visitParallelProcessIte(net.sourceforge.czt.circus.jaxb.gen.ParallelProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ParallelProcessIte erg = mCircusFactory_.createParallelProcessIte(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelProcessIte", erg);
    return erg;
  }

  public Object visitCallProcess(net.sourceforge.czt.circus.jaxb.gen.CallProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallProcess", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr callExpr =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getCallExpr());
    net.sourceforge.czt.z.ast.ExprList actuals =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getActuals());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CallUsage callUsage = null;
    if (jaxbObject.getCallUsage() != null) {
      String callUsageJaxb = jaxbObject.getCallUsage().value();
            
      callUsage = net.sourceforge.czt.circus.ast.CallUsage.valueOf(callUsageJaxb);
    }
    net.sourceforge.czt.circus.ast.CallProcess erg = mCircusFactory_.createCallProcess(callExpr, actuals, callUsage);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCallProcess", erg);
    return erg;
  }

  public Object visitIntChoiceProcessIte(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.IntChoiceProcessIte erg = mCircusFactory_.createIntChoiceProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessIte", erg);
    return erg;
  }

  public Object visitProcessSignature(net.sourceforge.czt.circus.jaxb.gen.ProcessSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessSignature", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.ZNameList genFormals =
      (net.sourceforge.czt.z.ast.ZNameList) dispatch(jaxbObject.getGenFormals());
            
    java.util.List<net.sourceforge.czt.circus.ast.SignatureList> signatureList = new java.util.Vector<net.sourceforge.czt.circus.ast.SignatureList>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.SignatureList> 
					
		obj : jaxbObject.getSignatureList()) {
	  net.sourceforge.czt.circus.ast.SignatureList o = (net.sourceforge.czt.circus.ast.SignatureList) dispatch(obj);
	  signatureList.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ChannelSetList processChannelSets =
      (net.sourceforge.czt.circus.ast.ChannelSetList) dispatch(jaxbObject.getProcessChannelSets());
    net.sourceforge.czt.circus.ast.StateUpdate stateUpdate =
      (net.sourceforge.czt.circus.ast.StateUpdate) dispatch(jaxbObject.getStateUpdate());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CallUsage callUsage = null;
    if (jaxbObject.getCallUsage() != null) {
      String callUsageJaxb = jaxbObject.getCallUsage().value();
            
      callUsage = net.sourceforge.czt.circus.ast.CallUsage.valueOf(callUsageJaxb);
    }
    net.sourceforge.czt.circus.ast.ProcessSignature erg = mCircusFactory_.createProcessSignature(name, genFormals, signatureList, processChannelSets, stateUpdate, callUsage);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessSignature", erg);
    return erg;
  }

  public Object visitExtChoiceActionIte(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ExtChoiceActionIte erg = mCircusFactory_.createExtChoiceActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceActionIte", erg);
    return erg;
  }

  public Object visitIfGuardedCommand(net.sourceforge.czt.circus.jaxb.gen.IfGuardedCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIfGuardedCommand", jaxbObject);
    net.sourceforge.czt.circus.ast.ActionList actionList =
      (net.sourceforge.czt.circus.ast.ActionList) dispatch(jaxbObject.getActionList());
    net.sourceforge.czt.circus.ast.IfGuardedCommand erg = mCircusFactory_.createIfGuardedCommand(actionList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIfGuardedCommand", erg);
    return erg;
  }

  public Object visitProcessType(net.sourceforge.czt.circus.jaxb.gen.ProcessType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessType", jaxbObject);
    net.sourceforge.czt.circus.ast.ProcessSignature processSignature =
      (net.sourceforge.czt.circus.ast.ProcessSignature) dispatch(jaxbObject.getProcessSignature());
    net.sourceforge.czt.circus.ast.ProcessType erg = mCircusFactory_.createProcessType(processSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessType", erg);
    return erg;
  }

  public Object visitInterleaveAction(net.sourceforge.czt.circus.jaxb.gen.InterleaveAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.circus.ast.NameSet> nameSet = new java.util.Vector<net.sourceforge.czt.circus.ast.NameSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.NameSet> 
					
		obj : jaxbObject.getNameSet()) {
	  net.sourceforge.czt.circus.ast.NameSet o = (net.sourceforge.czt.circus.ast.NameSet) dispatch(obj);
	  nameSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.InterleaveAction erg = mCircusFactory_.createInterleaveAction(circusAction, nameSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveAction", erg);
    return erg;
  }

  public Object visitPrefixingAction(net.sourceforge.czt.circus.jaxb.gen.PrefixingAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrefixingAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.Communication communication =
      (net.sourceforge.czt.circus.ast.Communication) dispatch(jaxbObject.getCommunication());
    net.sourceforge.czt.circus.ast.PrefixingAction erg = mCircusFactory_.createPrefixingAction(circusAction, communication);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPrefixingAction", erg);
    return erg;
  }

  public Object visitProcessTransformerPred(net.sourceforge.czt.circus.jaxb.gen.ProcessTransformerPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessTransformerPred", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.Transformation transformation = null;
    if (jaxbObject.getTransformation() != null) {
      String transformationJaxb = jaxbObject.getTransformation().value();
            
      transformation = net.sourceforge.czt.circus.ast.Transformation.valueOf(transformationJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.Model model = null;
    if (jaxbObject.getModel() != null) {
      String modelJaxb = jaxbObject.getModel().value();
            
      model = net.sourceforge.czt.circus.ast.Model.valueOf(modelJaxb);
    }
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ProcessTransformerPred erg = mCircusFactory_.createProcessTransformerPred(schText, transformation, model, circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessTransformerPred", erg);
    return erg;
  }

  public Object visitCircusActionList(net.sourceforge.czt.circus.jaxb.gen.CircusActionList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusActionList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.CircusActionList erg = mCircusFactory_.createCircusActionList(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusActionList", erg);
    return erg;
  }

  public Object visitCommunication(net.sourceforge.czt.circus.jaxb.gen.Communication jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommunication", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr channelExpr =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getChannelExpr());
    net.sourceforge.czt.circus.ast.FieldList fieldList =
      (net.sourceforge.czt.circus.ast.FieldList) dispatch(jaxbObject.getFieldList());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CommUsage commUsage = null;
    if (jaxbObject.getCommUsage() != null) {
      String commUsageJaxb = jaxbObject.getCommUsage().value();
            
      commUsage = net.sourceforge.czt.circus.ast.CommUsage.valueOf(commUsageJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CommPattern commPattern = null;
    if (jaxbObject.getCommPattern() != null) {
      String commPatternJaxb = jaxbObject.getCommPattern().value();
            
      commPattern = net.sourceforge.czt.circus.ast.CommPattern.valueOf(commPatternJaxb);
    }
    java.math.BigInteger multiSych =
      (java.math.BigInteger) dispatch(jaxbObject.getMultiSych());
    Boolean indexed =
      (Boolean) jaxbObject.isIndexed();
    net.sourceforge.czt.circus.ast.Communication erg = mCircusFactory_.createCommunication(channelExpr, fieldList, commUsage, commPattern, multiSych, indexed);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCommunication", erg);
    return erg;
  }

  public Object visitIntChoiceProcessIdx(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.IntChoiceProcessIdx erg = mCircusFactory_.createIntChoiceProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcessIdx", erg);
    return erg;
  }

  public Object visitInputField(net.sourceforge.czt.circus.jaxb.gen.InputField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInputField", jaxbObject);
    net.sourceforge.czt.z.ast.Name variableName =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getVariableName());
    net.sourceforge.czt.z.ast.Pred restriction =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getRestriction());
    net.sourceforge.czt.circus.ast.InputField erg = mCircusFactory_.createInputField(variableName, restriction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInputField", erg);
    return erg;
  }

  public Object visitHideProcess(net.sourceforge.czt.circus.jaxb.gen.HideProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.HideProcess erg = mCircusFactory_.createHideProcess(circusProcess, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideProcess", erg);
    return erg;
  }

  public Object visitActionPara(net.sourceforge.czt.circus.jaxb.gen.ActionPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionPara", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.ActionPara erg = mCircusFactory_.createActionPara(name, circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionPara", erg);
    return erg;
  }

  public Object visitSeqAction(net.sourceforge.czt.circus.jaxb.gen.SeqAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.SeqAction erg = mCircusFactory_.createSeqAction(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqAction", erg);
    return erg;
  }

  public Object visitExtChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ExtChoiceProcess erg = mCircusFactory_.createExtChoiceProcess(circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceProcess", erg);
    return erg;
  }

  public Object visitLetMuAction(net.sourceforge.czt.circus.jaxb.gen.LetMuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetMuAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.ParaList paraList =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getParaList());
    net.sourceforge.czt.circus.ast.LetMuAction erg = mCircusFactory_.createLetMuAction(circusAction, paraList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLetMuAction", erg);
    return erg;
  }

  public Object visitZSignatureList(net.sourceforge.czt.circus.jaxb.gen.ZSignatureList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZSignatureList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Signature> signature = new java.util.Vector<net.sourceforge.czt.z.ast.Signature>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Signature> 
					
		obj : jaxbObject.getSignature()) {
	  net.sourceforge.czt.z.ast.Signature o = (net.sourceforge.czt.z.ast.Signature) dispatch(obj);
	  signature.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ZSignatureList erg = mCircusFactory_.createZSignatureList(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZSignatureList", erg);
    return erg;
  }

  public Object visitAssignmentCommand(net.sourceforge.czt.circus.jaxb.gen.AssignmentCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentCommand", jaxbObject);
    net.sourceforge.czt.circus.ast.AssignmentPairs assignmentPairs =
      (net.sourceforge.czt.circus.ast.AssignmentPairs) dispatch(jaxbObject.getAssignmentPairs());
    net.sourceforge.czt.circus.ast.AssignmentCommand erg = mCircusFactory_.createAssignmentCommand(assignmentPairs);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAssignmentCommand", erg);
    return erg;
  }

  public Object visitChannelType(net.sourceforge.czt.circus.jaxb.gen.ChannelType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelType", jaxbObject);
    net.sourceforge.czt.z.ast.Type2 type =
      (net.sourceforge.czt.z.ast.Type2) dispatch(jaxbObject.getType());
    net.sourceforge.czt.circus.ast.ChannelType erg = mCircusFactory_.createChannelType(type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelType", erg);
    return erg;
  }

  public Object visitActionType(net.sourceforge.czt.circus.jaxb.gen.ActionType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionType", jaxbObject);
    net.sourceforge.czt.circus.ast.ActionSignature actionSignature =
      (net.sourceforge.czt.circus.ast.ActionSignature) dispatch(jaxbObject.getActionSignature());
    net.sourceforge.czt.circus.ast.ActionType erg = mCircusFactory_.createActionType(actionSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionType", erg);
    return erg;
  }

  public Object visitSeqActionIte(net.sourceforge.czt.circus.jaxb.gen.SeqActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.SeqActionIte erg = mCircusFactory_.createSeqActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqActionIte", erg);
    return erg;
  }

  public Object visitIntChoiceActionIte(net.sourceforge.czt.circus.jaxb.gen.IntChoiceActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.IntChoiceActionIte erg = mCircusFactory_.createIntChoiceActionIte(circusAction, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceActionIte", erg);
    return erg;
  }

  public Object visitCallAction(net.sourceforge.czt.circus.jaxb.gen.CallAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCallAction", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    net.sourceforge.czt.circus.ast.CallAction erg = mCircusFactory_.createCallAction(name, exprList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCallAction", erg);
    return erg;
  }

  public Object visitSpecStmtCommand(net.sourceforge.czt.circus.jaxb.gen.SpecStmtCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpecStmtCommand", jaxbObject);
    net.sourceforge.czt.z.ast.NameList frame =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getFrame());
            
    java.util.List<net.sourceforge.czt.z.ast.Pred> pred = new java.util.Vector<net.sourceforge.czt.z.ast.Pred>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Pred> 
					
		obj : jaxbObject.getPred()) {
	  net.sourceforge.czt.z.ast.Pred o = (net.sourceforge.czt.z.ast.Pred) dispatch(obj);
	  pred.add(o);
	}
    
    net.sourceforge.czt.circus.ast.SpecStmtCommand erg = mCircusFactory_.createSpecStmtCommand(frame, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSpecStmtCommand", erg);
    return erg;
  }

  public Object visitStateUpdateAnn(net.sourceforge.czt.circus.jaxb.gen.StateUpdateAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitStateUpdateAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.StateUpdate stateUpdate =
      (net.sourceforge.czt.circus.ast.StateUpdate) dispatch(jaxbObject.getStateUpdate());
    net.sourceforge.czt.circus.ast.StateUpdateAnn erg = mCircusFactory_.createStateUpdateAnn(stateUpdate);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitStateUpdateAnn", erg);
    return erg;
  }

  public Object visitChannelDecl(net.sourceforge.czt.circus.jaxb.gen.ChannelDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelDecl", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.NameList> nameList = new java.util.Vector<net.sourceforge.czt.z.ast.NameList>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameList> 
					
		obj : jaxbObject.getNameList()) {
	  net.sourceforge.czt.z.ast.NameList o = (net.sourceforge.czt.z.ast.NameList) dispatch(obj);
	  nameList.add(o);
	}
    
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circus.ast.ChannelDecl erg = mCircusFactory_.createChannelDecl(nameList, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelDecl", erg);
    return erg;
  }

  public Object visitNameSetType(net.sourceforge.czt.circus.jaxb.gen.NameSetType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSetType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.circus.ast.NameSetType erg = mCircusFactory_.createNameSetType(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSetType", erg);
    return erg;
  }

  public Object visitInterleaveProcessIdx(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.InterleaveProcessIdx erg = mCircusFactory_.createInterleaveProcessIdx(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcessIdx", erg);
    return erg;
  }

  public Object visitProcessSignatureAnn(net.sourceforge.czt.circus.jaxb.gen.ProcessSignatureAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessSignatureAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.ProcessSignature processSignature =
      (net.sourceforge.czt.circus.ast.ProcessSignature) dispatch(jaxbObject.getProcessSignature());
    net.sourceforge.czt.circus.ast.ProcessSignatureAnn erg = mCircusFactory_.createProcessSignatureAnn(processSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessSignatureAnn", erg);
    return erg;
  }

  public Object visitMuAction(net.sourceforge.czt.circus.jaxb.gen.MuAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.MuAction erg = mCircusFactory_.createMuAction(circusAction, name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitMuAction", erg);
    return erg;
  }

  public Object visitExtChoiceAction(net.sourceforge.czt.circus.jaxb.gen.ExtChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExtChoiceAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ExtChoiceAction erg = mCircusFactory_.createExtChoiceAction(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExtChoiceAction", erg);
    return erg;
  }

  public Object visitSkipAction(net.sourceforge.czt.circus.jaxb.gen.SkipAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSkipAction", jaxbObject);
    net.sourceforge.czt.circus.ast.SkipAction erg = mCircusFactory_.createSkipAction();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSkipAction", erg);
    return erg;
  }

  public Object visitSubstitutionAction(net.sourceforge.czt.circus.jaxb.gen.SubstitutionAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSubstitutionAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.RenameList renameList =
      (net.sourceforge.czt.z.ast.RenameList) dispatch(jaxbObject.getRenameList());
    net.sourceforge.czt.circus.ast.SubstitutionAction erg = mCircusFactory_.createSubstitutionAction(circusAction, renameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSubstitutionAction", erg);
    return erg;
  }

  public Object visitChannelSetType(net.sourceforge.czt.circus.jaxb.gen.ChannelSetType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelSetType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.circus.ast.ChannelSetType erg = mCircusFactory_.createChannelSetType(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelSetType", erg);
    return erg;
  }

  public Object visitCircusNameSet(net.sourceforge.czt.circus.jaxb.gen.CircusNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusNameSet", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circus.ast.CircusNameSet erg = mCircusFactory_.createCircusNameSet(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusNameSet", erg);
    return erg;
  }

  public Object visitIntChoiceAction(net.sourceforge.czt.circus.jaxb.gen.IntChoiceAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.IntChoiceAction erg = mCircusFactory_.createIntChoiceAction(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceAction", erg);
    return erg;
  }

  public Object visitParamAction(net.sourceforge.czt.circus.jaxb.gen.ParamAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParamAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ParamAction erg = mCircusFactory_.createParamAction(circusAction, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParamAction", erg);
    return erg;
  }

  public Object visitCircusNameSetList(net.sourceforge.czt.circus.jaxb.gen.CircusNameSetList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusNameSetList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.NameSet> nameSet = new java.util.Vector<net.sourceforge.czt.circus.ast.NameSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.NameSet> 
					
		obj : jaxbObject.getNameSet()) {
	  net.sourceforge.czt.circus.ast.NameSet o = (net.sourceforge.czt.circus.ast.NameSet) dispatch(obj);
	  nameSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.CircusNameSetList erg = mCircusFactory_.createCircusNameSetList(nameSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusNameSetList", erg);
    return erg;
  }

  public Object visitProcessPara(net.sourceforge.czt.circus.jaxb.gen.ProcessPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProcessPara", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.NameList genFormals =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getGenFormals());
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.circus.ast.ProcessPara erg = mCircusFactory_.createProcessPara(name, genFormals, circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProcessPara", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelAction(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.circus.ast.NameSet> nameSet = new java.util.Vector<net.sourceforge.czt.circus.ast.NameSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.NameSet> 
					
		obj : jaxbObject.getNameSet()) {
	  net.sourceforge.czt.circus.ast.NameSet o = (net.sourceforge.czt.circus.ast.NameSet) dispatch(obj);
	  nameSet.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.circus.ast.ChannelSet> channelSet = new java.util.Vector<net.sourceforge.czt.circus.ast.ChannelSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.ChannelSet> 
					
		obj : jaxbObject.getChannelSet()) {
	  net.sourceforge.czt.circus.ast.ChannelSet o = (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(obj);
	  channelSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.AlphabetisedParallelAction erg = mCircusFactory_.createAlphabetisedParallelAction(circusAction, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelAction", erg);
    return erg;
  }

  public Object visitBasicChannelSetExpr(net.sourceforge.czt.circus.jaxb.gen.BasicChannelSetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBasicChannelSetExpr", jaxbObject);
    net.sourceforge.czt.circus.ast.CommunicationList communicationList =
      (net.sourceforge.czt.circus.ast.CommunicationList) dispatch(jaxbObject.getCommunicationList());
    net.sourceforge.czt.circus.ast.BasicChannelSetExpr erg = mCircusFactory_.createBasicChannelSetExpr(communicationList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBasicChannelSetExpr", erg);
    return erg;
  }

  public Object visitInterleaveProcessIte(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.InterleaveProcessIte erg = mCircusFactory_.createInterleaveProcessIte(circusProcess, declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcessIte", erg);
    return erg;
  }

  public Object visitDoGuardedCommand(net.sourceforge.czt.circus.jaxb.gen.DoGuardedCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDoGuardedCommand", jaxbObject);
    net.sourceforge.czt.circus.ast.ActionList actionList =
      (net.sourceforge.czt.circus.ast.ActionList) dispatch(jaxbObject.getActionList());
    net.sourceforge.czt.circus.ast.DoGuardedCommand erg = mCircusFactory_.createDoGuardedCommand(actionList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDoGuardedCommand", erg);
    return erg;
  }

  public Object visitGuardedAction(net.sourceforge.czt.circus.jaxb.gen.GuardedAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGuardedAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.circus.ast.GuardedAction erg = mCircusFactory_.createGuardedAction(circusAction, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGuardedAction", erg);
    return erg;
  }

  public Object visitSeqProcess(net.sourceforge.czt.circus.jaxb.gen.SeqProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.SeqProcess erg = mCircusFactory_.createSeqProcess(circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqProcess", erg);
    return erg;
  }

  public Object visitInterruptAction(net.sourceforge.czt.circus.jaxb.gen.InterruptAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterruptAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.InterruptAction erg = mCircusFactory_.createInterruptAction(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterruptAction", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcessIte(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcessIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIte erg = mCircusFactory_.createAlphabetisedParallelProcessIte(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcessIte", erg);
    return erg;
  }

  public Object visitIntChoiceProcess(net.sourceforge.czt.circus.jaxb.gen.IntChoiceProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIntChoiceProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.IntChoiceProcess erg = mCircusFactory_.createIntChoiceProcess(circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIntChoiceProcess", erg);
    return erg;
  }

  public Object visitCircusStateAnn(net.sourceforge.czt.circus.jaxb.gen.CircusStateAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusStateAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusStateAnn erg = mCircusFactory_.createCircusStateAnn();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusStateAnn", erg);
    return erg;
  }

  public Object visitParallelActionIte(net.sourceforge.czt.circus.jaxb.gen.ParallelActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.NameSet nameSet =
      (net.sourceforge.czt.circus.ast.NameSet) dispatch(jaxbObject.getNameSet());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.ParallelActionIte erg = mCircusFactory_.createParallelActionIte(circusAction, declList, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelActionIte", erg);
    return erg;
  }

  public Object visitRenameProcess(net.sourceforge.czt.circus.jaxb.gen.RenameProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.circus.ast.AssignmentPairs assignmentPairs =
      (net.sourceforge.czt.circus.ast.AssignmentPairs) dispatch(jaxbObject.getAssignmentPairs());
    net.sourceforge.czt.circus.ast.RenameProcess erg = mCircusFactory_.createRenameProcess(circusProcess, assignmentPairs);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRenameProcess", erg);
    return erg;
  }

  public Object visitBasicProcess(net.sourceforge.czt.circus.jaxb.gen.BasicProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBasicProcess", jaxbObject);
    net.sourceforge.czt.z.ast.ParaList paraList =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getParaList());
    net.sourceforge.czt.circus.ast.BasicProcess erg = mCircusFactory_.createBasicProcess(paraList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBasicProcess", erg);
    return erg;
  }

  public Object visitRenameAction(net.sourceforge.czt.circus.jaxb.gen.RenameAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.AssignmentPairs assignmentPairs =
      (net.sourceforge.czt.circus.ast.AssignmentPairs) dispatch(jaxbObject.getAssignmentPairs());
    net.sourceforge.czt.circus.ast.RenameAction erg = mCircusFactory_.createRenameAction(circusAction, assignmentPairs);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRenameAction", erg);
    return erg;
  }

  public Object visitActionSignature(net.sourceforge.czt.circus.jaxb.gen.ActionSignature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionSignature", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circus.ast.SignatureList signatureList =
      (net.sourceforge.czt.circus.ast.SignatureList) dispatch(jaxbObject.getSignatureList());
    net.sourceforge.czt.circus.ast.CommunicationList communicationList =
      (net.sourceforge.czt.circus.ast.CommunicationList) dispatch(jaxbObject.getCommunicationList());
    net.sourceforge.czt.circus.ast.ChannelSetList channelSetList =
      (net.sourceforge.czt.circus.ast.ChannelSetList) dispatch(jaxbObject.getChannelSetList());
    net.sourceforge.czt.circus.ast.NameSetList nameSetList =
      (net.sourceforge.czt.circus.ast.NameSetList) dispatch(jaxbObject.getNameSetList());
    net.sourceforge.czt.circus.ast.ActionSignature erg = mCircusFactory_.createActionSignature(name, signatureList, communicationList, channelSetList, nameSetList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionSignature", erg);
    return erg;
  }

  public Object visitChannelPara(net.sourceforge.czt.circus.jaxb.gen.ChannelPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChannelPara", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ChannelPara erg = mCircusFactory_.createChannelPara(declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChannelPara", erg);
    return erg;
  }

  public Object visitActionTransformerPred(net.sourceforge.czt.circus.jaxb.gen.ActionTransformerPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionTransformerPred", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.Transformation transformation = null;
    if (jaxbObject.getTransformation() != null) {
      String transformationJaxb = jaxbObject.getTransformation().value();
            
      transformation = net.sourceforge.czt.circus.ast.Transformation.valueOf(transformationJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.Model model = null;
    if (jaxbObject.getModel() != null) {
      String modelJaxb = jaxbObject.getModel().value();
            
      model = net.sourceforge.czt.circus.ast.Model.valueOf(modelJaxb);
    }
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ActionTransformerPred erg = mCircusFactory_.createActionTransformerPred(schText, transformation, model, circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionTransformerPred", erg);
    return erg;
  }

  public Object visitCircusFieldList(net.sourceforge.czt.circus.jaxb.gen.CircusFieldList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusFieldList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.Field> field = new java.util.Vector<net.sourceforge.czt.circus.ast.Field>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.Field> 
					
		obj : jaxbObject.getField()) {
	  net.sourceforge.czt.circus.ast.Field o = (net.sourceforge.czt.circus.ast.Field) dispatch(obj);
	  field.add(o);
	}
    
    net.sourceforge.czt.circus.ast.CircusFieldList erg = mCircusFactory_.createCircusFieldList(field);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusFieldList", erg);
    return erg;
  }

  public Object visitImplicitChannelAnn(net.sourceforge.czt.circus.jaxb.gen.ImplicitChannelAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitImplicitChannelAnn", jaxbObject);
    net.sourceforge.czt.circus.ast.ImplicitChannelAnn erg = mCircusFactory_.createImplicitChannelAnn();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitImplicitChannelAnn", erg);
    return erg;
  }

  public Object visitVarDeclCommand(net.sourceforge.czt.circus.jaxb.gen.VarDeclCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDeclCommand", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.VarDeclCommand erg = mCircusFactory_.createVarDeclCommand(declList, circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitVarDeclCommand", erg);
    return erg;
  }

  public Object visitCommunicationType(net.sourceforge.czt.circus.jaxb.gen.CommunicationType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCommunicationType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.circus.ast.CommunicationType erg = mCircusFactory_.createCommunicationType(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCommunicationType", erg);
    return erg;
  }

  public Object visitInterleaveActionIte(net.sourceforge.czt.circus.jaxb.gen.InterleaveActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.NameSet nameSet =
      (net.sourceforge.czt.circus.ast.NameSet) dispatch(jaxbObject.getNameSet());
    net.sourceforge.czt.circus.ast.InterleaveActionIte erg = mCircusFactory_.createInterleaveActionIte(circusAction, declList, nameSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveActionIte", erg);
    return erg;
  }

  public Object visitDotField(net.sourceforge.czt.circus.jaxb.gen.DotField jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDotField", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circus.ast.DotField erg = mCircusFactory_.createDotField(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDotField", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcessIdx(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcessIdx jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcessIdx", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcessIdx erg = mCircusFactory_.createAlphabetisedParallelProcessIdx(circusProcess, declList, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcessIdx", erg);
    return erg;
  }

  public Object visitChaosAction(net.sourceforge.czt.circus.jaxb.gen.ChaosAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitChaosAction", jaxbObject);
    net.sourceforge.czt.circus.ast.ChaosAction erg = mCircusFactory_.createChaosAction();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitChaosAction", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelProcess(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.circus.ast.ChannelSet> channelSet = new java.util.Vector<net.sourceforge.czt.circus.ast.ChannelSet>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.ChannelSet> 
					
		obj : jaxbObject.getChannelSet()) {
	  net.sourceforge.czt.circus.ast.ChannelSet o = (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(obj);
	  channelSet.add(o);
	}
    
    net.sourceforge.czt.circus.ast.AlphabetisedParallelProcess erg = mCircusFactory_.createAlphabetisedParallelProcess(circusProcess, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelProcess", erg);
    return erg;
  }

  public Object visitAlphabetisedParallelActionIte(net.sourceforge.czt.circus.jaxb.gen.AlphabetisedParallelActionIte jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAlphabetisedParallelActionIte", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.circus.ast.NameSet nameSet =
      (net.sourceforge.czt.circus.ast.NameSet) dispatch(jaxbObject.getNameSet());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circus.ast.AlphabetisedParallelActionIte erg = mCircusFactory_.createAlphabetisedParallelActionIte(circusAction, declList, nameSet, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAlphabetisedParallelActionIte", erg);
    return erg;
  }

  public Object visitAssignmentPairs(net.sourceforge.czt.circus.jaxb.gen.AssignmentPairs jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssignmentPairs", jaxbObject);
    net.sourceforge.czt.z.ast.NameList lHS =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getLHS());
    net.sourceforge.czt.z.ast.ExprList rHS =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getRHS());
    net.sourceforge.czt.circus.ast.AssignmentPairs erg = mCircusFactory_.createAssignmentPairs(lHS, rHS);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAssignmentPairs", erg);
    return erg;
  }

  public Object visitInterleaveProcess(net.sourceforge.czt.circus.jaxb.gen.InterleaveProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInterleaveProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.circus.ast.InterleaveProcess erg = mCircusFactory_.createInterleaveProcess(circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInterleaveProcess", erg);
    return erg;
  }

  public Object visitActionSignatureList(net.sourceforge.czt.circus.jaxb.gen.ActionSignatureList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitActionSignatureList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.ActionSignature> actionSignature = new java.util.Vector<net.sourceforge.czt.circus.ast.ActionSignature>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.ActionSignature> 
					
		obj : jaxbObject.getActionSignature()) {
	  net.sourceforge.czt.circus.ast.ActionSignature o = (net.sourceforge.czt.circus.ast.ActionSignature) dispatch(obj);
	  actionSignature.add(o);
	}
    
    net.sourceforge.czt.circus.ast.ActionSignatureList erg = mCircusFactory_.createActionSignatureList(actionSignature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitActionSignatureList", erg);
    return erg;
  }
}
