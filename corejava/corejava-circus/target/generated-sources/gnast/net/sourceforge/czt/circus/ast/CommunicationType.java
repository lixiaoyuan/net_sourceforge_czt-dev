
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circus.ast;

																																																				

/**
 * <p>
          In a declaration like "channel [X] c: X \cross X", the type will be ChannelType(GenericType(List(X), ProdType(List(X, X)))).
          Whenever it is used, a communication involving "c" may have different signatures. For instance, "c!0!2" 
          and "c[\nat]?x". Thus, a communication breaks down the structure to the underlying fields. This is the type for SigmaExpr.
        </p>
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface CommunicationType extends 		 		net.sourceforge.czt.circus.ast.CircusSigType
 			{
  static final int CHANNEL_NTP_INDEX  = 0;
  static final int COMM_PATTERN_INDEX = 1;

  /**
   * This is a convenience method. It represents the non-null channel name
   * for this communication type. It returns the Name from the first element
   * in the underlying signature as getSignature().getNameTypePair().get(CHANNEL_NTP_INDEX).getName().
   */
  net.sourceforge.czt.z.ast.Name getChannelName();
  
  /**
   * This is a convenience method. It represents the non-null channel name
   * for this communication type. It returns the Name from the first element
   * in the underlying signature as getSignature().getNameTypePair().get(CHANNEL_NTP_INDEX).getName().
   * It may throw a UnsupportedAstClassException in case the name is not a ZName
   */
  net.sourceforge.czt.z.ast.ZName getChannelZName();
  
  /**
   * This is a convenience method. It represents the non-null channel type
   * for this communication type. It returns the Type from the first element
   * in the underlying signature as getSignature().getNameTypePair().get(CHANNEL_NTP_INDEX).getType().
   * The reulst should have its generic type resolved (i.e., be an instance of Type2).
   */
  net.sourceforge.czt.z.ast.Type getChannelType();
  
  /**
   * This is a convenience method. It represents the non-null non-empty signature
   * corresponding to the communication pattern for this communication type. It 
   * returns the remainder signature from getSignature().getNameTypePair().sublist(COMM_PATTERN_INDEX, getSignature().getNameTypePair().size()).
   */
  java.util.List<net.sourceforge.czt.z.ast.NameTypePair> getCommunicationPattern();
   
  /**
   * Returns whether or not the communication type is a synchronisation or not.
   */ 
  boolean isSynchronisation();

}
