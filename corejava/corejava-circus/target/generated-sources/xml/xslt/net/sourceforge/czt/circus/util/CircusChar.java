
/*
  Copyright 2005, 2006, 2007 Leonardo Freitas
  This file is part of the czt project.

  The czt project contains free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  The czt project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with czt; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.circus.util;

import net.sourceforge.czt.zpatt.util.*;

/**
 * An interface for commonly used Circus characters.
 *
 * @author generated by Gnast XSL script circuschar2class.xsl
 */
public class CircusChar extends ZPattChar
{
  public CircusChar(char[] chars)
  {
    super(chars);
  }



  /**
   * left channel set bracket.
   */
  public static final CircusChar LCIRCCHANSET = new CircusChar(Character.toChars(0x2983));

  /**
   * right channel set bracket.
   */
  public static final CircusChar RCIRCCHANSET = new CircusChar(Character.toChars(0x2984));

  /**
   * left indexed process instantiation angle bracket.
   */
  public static final CircusChar CIRCLINST = new CircusChar(Character.toChars(0x230A));

  /**
   * right indexed process instantiation angle bracket.
   */
  public static final CircusChar CIRCRINST = new CircusChar(Character.toChars(0x230B));

  /**
   * left guarded action bracket.
   */
  public static final CircusChar LCIRCGUARD = new CircusChar(Character.toChars(0x3014));

  /**
   * right guarded action bracket.
   */
  public static final CircusChar RCIRCGUARD = new CircusChar(Character.toChars(0x3015));

  /**
   * left schema expression action bracket.
   */
  public static final CircusChar LSCHEXPRACT = new CircusChar(Character.toChars(0x2768));

  /**
   * right schema expression action bracket.
   */
  public static final CircusChar RSCHEXPRACT = new CircusChar(Character.toChars(0x2769));

  /**
   * left process renaming bracket.
   */
  public static final CircusChar LCIRCRENAME = new CircusChar(Character.toChars(0x3016));

  /**
   * right process renaming bracket.
   */
  public static final CircusChar RCIRCRENAME = new CircusChar(Character.toChars(0x3017));

  /**
   * left parallel bracket.
   */
  public static final CircusChar LPAR = new CircusChar(Character.toChars(0x27E6));

  /**
   * right parallel bracket.
   */
  public static final CircusChar RPAR = new CircusChar(Character.toChars(0x27E7));

  /**
   * left interleave bracket.
   */
  public static final CircusChar LINTER = new CircusChar(Character.toChars(0x27E6));

  /**
   * right interleave bracket.
   */
  public static final CircusChar RINTER = new CircusChar(Character.toChars(0x27E7));

  /**
   * box drawings thick horizontal line to the right..
   */
  public static final CircusChar CIRCUSCHAR = new CircusChar(Character.toChars(0x257A));

  /**
   * box drawings thin horizontal line to the right..
   */
  public static final CircusChar CIRCUSACTIONCHAR = new CircusChar(Character.toChars(0x2576));

  /**
   * refinement.
   */
  public static final CircusChar CIRCREFINES = new CircusChar(Character.toChars(0x2291));

  /**
   * simulation.
   */
  public static final CircusChar CIRCSIMULATES = new CircusChar(Character.toChars(0x227C));

  /**
   * prefix input field colon.
   */
  public static final CircusChar PREFIXCOLON = new CircusChar(Character.toChars(0x2236));

  /**
   * Spivey's like definition symbol (or just \defs?).
   */
  public static final CircusChar CIRCDEF = new CircusChar(Character.toChars(0x2259));

  /**
   * Process indexing spot or 2A00.
   */
  public static final CircusChar CIRCINDEX = new CircusChar(Character.toChars(0x2299));

  /**
   * Circus spot (bullet separator) or 25E6.
   */
  public static final CircusChar CIRCSPOT = new CircusChar(Character.toChars(0x2219));

  /**
   * recursive (least fixed-point) operator.
   */
  public static final CircusChar CIRCMU = new CircusChar(Character.toChars(0x00B5));

  /**
   * then for if guarded command.
   */
  public static final CircusChar CIRCTHEN = new CircusChar(Character.toChars(0x27FC));

  /**
   * else for if guarded command.
   */
  public static final CircusChar CIRCELSE = new CircusChar(Character.toChars(0x25AF));

  /**
   * prefixing.
   */
  public static final CircusChar PREFIXTHEN = new CircusChar(Character.toChars(0x27F6));

  /**
   * sequential composition.
   */
  public static final CircusChar CIRCSEQ = new CircusChar(Character.toChars(0x037E));

  /**
   * interrupt operator.
   */
  public static final CircusChar CIRCINTERRUPT = new CircusChar(Character.toChars(0x25B3));

  /**
   * Process interleave.
   */
  public static final CircusChar INTERLEAVE = new CircusChar(Character.toChars(0x2980));

  /**
   * Replicated interleave.
   */
  public static final CircusChar REPINTERLEAVE = new CircusChar(Character.toChars(0x2AFC));

  /**
   * Replicated Parallelism or 01C1.
   */
  public static final CircusChar REPPARALLEL = new CircusChar(Character.toChars(0x2225));

  /**
   * Hiding operator.
   */
  public static final CircusChar CIRCHIDING = new CircusChar(Character.toChars(0x2AF5));

  /**
   * External choice.
   */
  public static final CircusChar EXTCHOICE = new CircusChar(Character.toChars(0x25FB));

  /**
   * Replicated external choice.
   */
  public static final CircusChar REPEXTCHOICE = new CircusChar(Character.toChars(0x25A1));

  /**
   * Internal choice.
   */
  public static final CircusChar INTCHOICE = new CircusChar(Character.toChars(0x2293));

  /**
   * Replicated internal choice (TODO:Change Unicode char).
   */
  public static final CircusChar REPINTCHOICE = new CircusChar(Character.toChars(0x2294));

  /**
   * mathematical blackboard capital B.
   */
  public static final CircusChar BOOLEAN = new CircusChar(Character.toChars(0x1D539));

  /**
   * generalised disjointness.
   */
  public static final CircusChar GENDJ = new CircusChar(Character.toChars(0x2A46));

  /**
   * regions of a set of sets.
   */
  public static final CircusChar REGIONS = new CircusChar(Character.toChars(0x2A02));

  /**
   * distributed set difference.
   */
  public static final CircusChar DSETMINUS = new CircusChar(Character.toChars(0x21F2));

  /**
   * distributed set intersection.
   */
  public static final CircusChar DCAP = new CircusChar(Character.toChars(0x25C7));

  /**
   * mathematical blackboard capital U.
   */
  public static final CircusChar UNIVERSE = new CircusChar(Character.toChars(0x1D54C));
}
