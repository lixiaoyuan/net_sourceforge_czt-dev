//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.10.18 at 08:37:58 AM UTC 
//


package net.sourceforge.czt.z.jaxb.gen;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the net.sourceforge.czt.z.jaxb.gen package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _CondExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "CondExpr");
    private final static QName _Oper_QNAME = new QName("http://czt.sourceforge.net/zml", "Oper");
    private final static QName _Operand_QNAME = new QName("http://czt.sourceforge.net/zml", "Operand");
    private final static QName _RenameExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "RenameExpr");
    private final static QName _Sect_QNAME = new QName("http://czt.sourceforge.net/zml", "Sect");
    private final static QName _Exists1Pred_QNAME = new QName("http://czt.sourceforge.net/zml", "Exists1Pred");
    private final static QName _SchExpr2_QNAME = new QName("http://czt.sourceforge.net/zml", "SchExpr2");
    private final static QName _ZNumeral_QNAME = new QName("http://czt.sourceforge.net/zml", "ZNumeral");
    private final static QName _LocAnn_QNAME = new QName("http://czt.sourceforge.net/zml", "LocAnn");
    private final static QName _ZDeclList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZDeclList");
    private final static QName _ProjExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ProjExpr");
    private final static QName _NextStroke_QNAME = new QName("http://czt.sourceforge.net/zml", "NextStroke");
    private final static QName _ZStrokeList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZStrokeList");
    private final static QName _PowerType_QNAME = new QName("http://czt.sourceforge.net/zml", "PowerType");
    private final static QName _NameTypePair_QNAME = new QName("http://czt.sourceforge.net/zml", "NameTypePair");
    private final static QName _LatexMarkupPara_QNAME = new QName("http://czt.sourceforge.net/zml", "LatexMarkupPara");
    private final static QName _ZRenameList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZRenameList");
    private final static QName _Pred_QNAME = new QName("http://czt.sourceforge.net/zml", "Pred");
    private final static QName _Exists1Expr_QNAME = new QName("http://czt.sourceforge.net/zml", "Exists1Expr");
    private final static QName _NameSectTypeTriple_QNAME = new QName("http://czt.sourceforge.net/zml", "NameSectTypeTriple");
    private final static QName _Stroke_QNAME = new QName("http://czt.sourceforge.net/zml", "Stroke");
    private final static QName _SchExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "SchExpr");
    private final static QName _NameList_QNAME = new QName("http://czt.sourceforge.net/zml", "NameList");
    private final static QName _GenericType_QNAME = new QName("http://czt.sourceforge.net/zml", "GenericType");
    private final static QName _HideExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "HideExpr");
    private final static QName _AxPara_QNAME = new QName("http://czt.sourceforge.net/zml", "AxPara");
    private final static QName _QntExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "QntExpr");
    private final static QName _Expr0N_QNAME = new QName("http://czt.sourceforge.net/zml", "Expr0N");
    private final static QName _PipeExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "PipeExpr");
    private final static QName _TypeAnn_QNAME = new QName("http://czt.sourceforge.net/zml", "TypeAnn");
    private final static QName _ExprList_QNAME = new QName("http://czt.sourceforge.net/zml", "ExprList");
    private final static QName _Type_QNAME = new QName("http://czt.sourceforge.net/zml", "Type");
    private final static QName _ParenAnn_QNAME = new QName("http://czt.sourceforge.net/zml", "ParenAnn");
    private final static QName _ZSchText_QNAME = new QName("http://czt.sourceforge.net/zml", "ZSchText");
    private final static QName _NewOldPair_QNAME = new QName("http://czt.sourceforge.net/zml", "NewOldPair");
    private final static QName _UnparsedPara_QNAME = new QName("http://czt.sourceforge.net/zml", "UnparsedPara");
    private final static QName _DecorExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "DecorExpr");
    private final static QName _Numeral_QNAME = new QName("http://czt.sourceforge.net/zml", "Numeral");
    private final static QName _NarrPara_QNAME = new QName("http://czt.sourceforge.net/zml", "NarrPara");
    private final static QName _TupleSelExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "TupleSelExpr");
    private final static QName _ZName_QNAME = new QName("http://czt.sourceforge.net/zml", "ZName");
    private final static QName _UnparsedZSect_QNAME = new QName("http://czt.sourceforge.net/zml", "UnparsedZSect");
    private final static QName _OptempPara_QNAME = new QName("http://czt.sourceforge.net/zml", "OptempPara");
    private final static QName _InclDecl_QNAME = new QName("http://czt.sourceforge.net/zml", "InclDecl");
    private final static QName _VarDecl_QNAME = new QName("http://czt.sourceforge.net/zml", "VarDecl");
    private final static QName _IffExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "IffExpr");
    private final static QName _MuExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "MuExpr");
    private final static QName _TruePred_QNAME = new QName("http://czt.sourceforge.net/zml", "TruePred");
    private final static QName _RenameList_QNAME = new QName("http://czt.sourceforge.net/zml", "RenameList");
    private final static QName _Para_QNAME = new QName("http://czt.sourceforge.net/zml", "Para");
    private final static QName _ParaList_QNAME = new QName("http://czt.sourceforge.net/zml", "ParaList");
    private final static QName _DeclList_QNAME = new QName("http://czt.sourceforge.net/zml", "DeclList");
    private final static QName _StrokeList_QNAME = new QName("http://czt.sourceforge.net/zml", "StrokeList");
    private final static QName _BindExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "BindExpr");
    private final static QName _ForallPred_QNAME = new QName("http://czt.sourceforge.net/zml", "ForallPred");
    private final static QName _Directive_QNAME = new QName("http://czt.sourceforge.net/zml", "Directive");
    private final static QName _NumStroke_QNAME = new QName("http://czt.sourceforge.net/zml", "NumStroke");
    private final static QName _ConjPara_QNAME = new QName("http://czt.sourceforge.net/zml", "ConjPara");
    private final static QName _ApplExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ApplExpr");
    private final static QName _SetCompExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "SetCompExpr");
    private final static QName _Expr_QNAME = new QName("http://czt.sourceforge.net/zml", "Expr");
    private final static QName _SignatureAnn_QNAME = new QName("http://czt.sourceforge.net/zml", "SignatureAnn");
    private final static QName _GivenType_QNAME = new QName("http://czt.sourceforge.net/zml", "GivenType");
    private final static QName _SchText_QNAME = new QName("http://czt.sourceforge.net/zml", "SchText");
    private final static QName _PreExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "PreExpr");
    private final static QName _ForallExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ForallExpr");
    private final static QName _CompExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "CompExpr");
    private final static QName _NegExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "NegExpr");
    private final static QName _MemPred_QNAME = new QName("http://czt.sourceforge.net/zml", "MemPred");
    private final static QName _Parent_QNAME = new QName("http://czt.sourceforge.net/zml", "Parent");
    private final static QName _Ann_QNAME = new QName("http://czt.sourceforge.net/zml", "Ann");
    private final static QName _Type2_QNAME = new QName("http://czt.sourceforge.net/zml", "Type2");
    private final static QName _Operator_QNAME = new QName("http://czt.sourceforge.net/zml", "Operator");
    private final static QName _RefExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "RefExpr");
    private final static QName _GivenPara_QNAME = new QName("http://czt.sourceforge.net/zml", "GivenPara");
    private final static QName _FalsePred_QNAME = new QName("http://czt.sourceforge.net/zml", "FalsePred");
    private final static QName _ZNameList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZNameList");
    private final static QName _BindSelExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "BindSelExpr");
    private final static QName _Branch_QNAME = new QName("http://czt.sourceforge.net/zml", "Branch");
    private final static QName _SetExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "SetExpr");
    private final static QName _Decl_QNAME = new QName("http://czt.sourceforge.net/zml", "Decl");
    private final static QName _SectTypeEnvAnn_QNAME = new QName("http://czt.sourceforge.net/zml", "SectTypeEnvAnn");
    private final static QName _NegPred_QNAME = new QName("http://czt.sourceforge.net/zml", "NegPred");
    private final static QName _GenParamType_QNAME = new QName("http://czt.sourceforge.net/zml", "GenParamType");
    private final static QName _ExprPred_QNAME = new QName("http://czt.sourceforge.net/zml", "ExprPred");
    private final static QName _ZFreetypeList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZFreetypeList");
    private final static QName _OrPred_QNAME = new QName("http://czt.sourceforge.net/zml", "OrPred");
    private final static QName _Spec_QNAME = new QName("http://czt.sourceforge.net/zml", "Spec");
    private final static QName _ProdExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ProdExpr");
    private final static QName _NarrSect_QNAME = new QName("http://czt.sourceforge.net/zml", "NarrSect");
    private final static QName _ImpliesPred_QNAME = new QName("http://czt.sourceforge.net/zml", "ImpliesPred");
    private final static QName _Signature_QNAME = new QName("http://czt.sourceforge.net/zml", "Signature");
    private final static QName _BranchList_QNAME = new QName("http://czt.sourceforge.net/zml", "BranchList");
    private final static QName _IffPred_QNAME = new QName("http://czt.sourceforge.net/zml", "IffPred");
    private final static QName _Freetype_QNAME = new QName("http://czt.sourceforge.net/zml", "Freetype");
    private final static QName _QntPred_QNAME = new QName("http://czt.sourceforge.net/zml", "QntPred");
    private final static QName _SchemaType_QNAME = new QName("http://czt.sourceforge.net/zml", "SchemaType");
    private final static QName _Name_QNAME = new QName("http://czt.sourceforge.net/zml", "Name");
    private final static QName _Pred2_QNAME = new QName("http://czt.sourceforge.net/zml", "Pred2");
    private final static QName _ZBranchList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZBranchList");
    private final static QName _ImpliesExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ImpliesExpr");
    private final static QName _InStroke_QNAME = new QName("http://czt.sourceforge.net/zml", "InStroke");
    private final static QName _AndExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "AndExpr");
    private final static QName _ExistsExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ExistsExpr");
    private final static QName _ZExprList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZExprList");
    private final static QName _FreetypeList_QNAME = new QName("http://czt.sourceforge.net/zml", "FreetypeList");
    private final static QName _NumExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "NumExpr");
    private final static QName _OutStroke_QNAME = new QName("http://czt.sourceforge.net/zml", "OutStroke");
    private final static QName _OrExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "OrExpr");
    private final static QName _TupleExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "TupleExpr");
    private final static QName _Fact_QNAME = new QName("http://czt.sourceforge.net/zml", "Fact");
    private final static QName _FreePara_QNAME = new QName("http://czt.sourceforge.net/zml", "FreePara");
    private final static QName _AndPred_QNAME = new QName("http://czt.sourceforge.net/zml", "AndPred");
    private final static QName _ExistsPred_QNAME = new QName("http://czt.sourceforge.net/zml", "ExistsPred");
    private final static QName _ZSect_QNAME = new QName("http://czt.sourceforge.net/zml", "ZSect");
    private final static QName _LetExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "LetExpr");
    private final static QName _ProdType_QNAME = new QName("http://czt.sourceforge.net/zml", "ProdType");
    private final static QName _LambdaExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "LambdaExpr");
    private final static QName _Expr2N_QNAME = new QName("http://czt.sourceforge.net/zml", "Expr2N");
    private final static QName _Qnt1Expr_QNAME = new QName("http://czt.sourceforge.net/zml", "Qnt1Expr");
    private final static QName _ThetaExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "ThetaExpr");
    private final static QName _Expr1_QNAME = new QName("http://czt.sourceforge.net/zml", "Expr1");
    private final static QName _Expr2_QNAME = new QName("http://czt.sourceforge.net/zml", "Expr2");
    private final static QName _ConstDecl_QNAME = new QName("http://czt.sourceforge.net/zml", "ConstDecl");
    private final static QName _ZParaList_QNAME = new QName("http://czt.sourceforge.net/zml", "ZParaList");
    private final static QName _PowerExpr_QNAME = new QName("http://czt.sourceforge.net/zml", "PowerExpr");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sourceforge.czt.z.jaxb.gen
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Term }
     * 
     */
    public Term createTerm() {
        return new Term();
    }

    /**
     * Create an instance of {@link Numeral }
     * 
     */
    public Numeral createNumeral() {
        return new Numeral();
    }

    /**
     * Create an instance of {@link DecorExpr }
     * 
     */
    public DecorExpr createDecorExpr() {
        return new DecorExpr();
    }

    /**
     * Create an instance of {@link Expr1 }
     * 
     */
    public Expr1 createExpr1() {
        return new Expr1();
    }

    /**
     * Create an instance of {@link Expr }
     * 
     */
    public Expr createExpr() {
        return new Expr();
    }

    /**
     * Create an instance of {@link UnparsedPara }
     * 
     */
    public UnparsedPara createUnparsedPara() {
        return new UnparsedPara();
    }

    /**
     * Create an instance of {@link Para }
     * 
     */
    public Para createPara() {
        return new Para();
    }

    /**
     * Create an instance of {@link ZSchText }
     * 
     */
    public ZSchText createZSchText() {
        return new ZSchText();
    }

    /**
     * Create an instance of {@link SchText }
     * 
     */
    public SchText createSchText() {
        return new SchText();
    }

    /**
     * Create an instance of {@link NewOldPair }
     * 
     */
    public NewOldPair createNewOldPair() {
        return new NewOldPair();
    }

    /**
     * Create an instance of {@link VarDecl }
     * 
     */
    public VarDecl createVarDecl() {
        return new VarDecl();
    }

    /**
     * Create an instance of {@link Decl }
     * 
     */
    public Decl createDecl() {
        return new Decl();
    }

    /**
     * Create an instance of {@link ZName }
     * 
     */
    public ZName createZName() {
        return new ZName();
    }

    /**
     * Create an instance of {@link Name }
     * 
     */
    public Name createName() {
        return new Name();
    }

    /**
     * Create an instance of {@link UnparsedZSect }
     * 
     */
    public UnparsedZSect createUnparsedZSect() {
        return new UnparsedZSect();
    }

    /**
     * Create an instance of {@link Sect }
     * 
     */
    public Sect createSect() {
        return new Sect();
    }

    /**
     * Create an instance of {@link OptempPara }
     * 
     */
    public OptempPara createOptempPara() {
        return new OptempPara();
    }

    /**
     * Create an instance of {@link InclDecl }
     * 
     */
    public InclDecl createInclDecl() {
        return new InclDecl();
    }

    /**
     * Create an instance of {@link NarrPara }
     * 
     */
    public NarrPara createNarrPara() {
        return new NarrPara();
    }

    /**
     * Create an instance of {@link TupleSelExpr }
     * 
     */
    public TupleSelExpr createTupleSelExpr() {
        return new TupleSelExpr();
    }

    /**
     * Create an instance of {@link BindExpr }
     * 
     */
    public BindExpr createBindExpr() {
        return new BindExpr();
    }

    /**
     * Create an instance of {@link ParaList }
     * 
     */
    public ParaList createParaList() {
        return new ParaList();
    }

    /**
     * Create an instance of {@link DeclList }
     * 
     */
    public DeclList createDeclList() {
        return new DeclList();
    }

    /**
     * Create an instance of {@link StrokeList }
     * 
     */
    public StrokeList createStrokeList() {
        return new StrokeList();
    }

    /**
     * Create an instance of {@link MuExpr }
     * 
     */
    public MuExpr createMuExpr() {
        return new MuExpr();
    }

    /**
     * Create an instance of {@link QntExpr }
     * 
     */
    public QntExpr createQntExpr() {
        return new QntExpr();
    }

    /**
     * Create an instance of {@link TruePred }
     * 
     */
    public TruePred createTruePred() {
        return new TruePred();
    }

    /**
     * Create an instance of {@link Fact }
     * 
     */
    public Fact createFact() {
        return new Fact();
    }

    /**
     * Create an instance of {@link Pred }
     * 
     */
    public Pred createPred() {
        return new Pred();
    }

    /**
     * Create an instance of {@link RenameList }
     * 
     */
    public RenameList createRenameList() {
        return new RenameList();
    }

    /**
     * Create an instance of {@link IffExpr }
     * 
     */
    public IffExpr createIffExpr() {
        return new IffExpr();
    }

    /**
     * Create an instance of {@link SchExpr2 }
     * 
     */
    public SchExpr2 createSchExpr2() {
        return new SchExpr2();
    }

    /**
     * Create an instance of {@link Expr2 }
     * 
     */
    public Expr2 createExpr2() {
        return new Expr2();
    }

    /**
     * Create an instance of {@link SignatureAnn }
     * 
     */
    public SignatureAnn createSignatureAnn() {
        return new SignatureAnn();
    }

    /**
     * Create an instance of {@link Ann }
     * 
     */
    public Ann createAnn() {
        return new Ann();
    }

    /**
     * Create an instance of {@link GivenType }
     * 
     */
    public GivenType createGivenType() {
        return new GivenType();
    }

    /**
     * Create an instance of {@link Type2 }
     * 
     */
    public Type2 createType2() {
        return new Type2();
    }

    /**
     * Create an instance of {@link Type }
     * 
     */
    public Type createType() {
        return new Type();
    }

    /**
     * Create an instance of {@link PreExpr }
     * 
     */
    public PreExpr createPreExpr() {
        return new PreExpr();
    }

    /**
     * Create an instance of {@link SetCompExpr }
     * 
     */
    public SetCompExpr createSetCompExpr() {
        return new SetCompExpr();
    }

    /**
     * Create an instance of {@link ApplExpr }
     * 
     */
    public ApplExpr createApplExpr() {
        return new ApplExpr();
    }

    /**
     * Create an instance of {@link NumStroke }
     * 
     */
    public NumStroke createNumStroke() {
        return new NumStroke();
    }

    /**
     * Create an instance of {@link Stroke }
     * 
     */
    public Stroke createStroke() {
        return new Stroke();
    }

    /**
     * Create an instance of {@link ConjPara }
     * 
     */
    public ConjPara createConjPara() {
        return new ConjPara();
    }

    /**
     * Create an instance of {@link Directive }
     * 
     */
    public Directive createDirective() {
        return new Directive();
    }

    /**
     * Create an instance of {@link ForallPred }
     * 
     */
    public ForallPred createForallPred() {
        return new ForallPred();
    }

    /**
     * Create an instance of {@link QntPred }
     * 
     */
    public QntPred createQntPred() {
        return new QntPred();
    }

    /**
     * Create an instance of {@link ZNumeral }
     * 
     */
    public ZNumeral createZNumeral() {
        return new ZNumeral();
    }

    /**
     * Create an instance of {@link Exists1Pred }
     * 
     */
    public Exists1Pred createExists1Pred() {
        return new Exists1Pred();
    }

    /**
     * Create an instance of {@link Operand }
     * 
     */
    public Operand createOperand() {
        return new Operand();
    }

    /**
     * Create an instance of {@link Oper }
     * 
     */
    public Oper createOper() {
        return new Oper();
    }

    /**
     * Create an instance of {@link RenameExpr }
     * 
     */
    public RenameExpr createRenameExpr() {
        return new RenameExpr();
    }

    /**
     * Create an instance of {@link CondExpr }
     * 
     */
    public CondExpr createCondExpr() {
        return new CondExpr();
    }

    /**
     * Create an instance of {@link NextStroke }
     * 
     */
    public NextStroke createNextStroke() {
        return new NextStroke();
    }

    /**
     * Create an instance of {@link ProjExpr }
     * 
     */
    public ProjExpr createProjExpr() {
        return new ProjExpr();
    }

    /**
     * Create an instance of {@link ZDeclList }
     * 
     */
    public ZDeclList createZDeclList() {
        return new ZDeclList();
    }

    /**
     * Create an instance of {@link LocAnn }
     * 
     */
    public LocAnn createLocAnn() {
        return new LocAnn();
    }

    /**
     * Create an instance of {@link HideExpr }
     * 
     */
    public HideExpr createHideExpr() {
        return new HideExpr();
    }

    /**
     * Create an instance of {@link SchExpr }
     * 
     */
    public SchExpr createSchExpr() {
        return new SchExpr();
    }

    /**
     * Create an instance of {@link NameList }
     * 
     */
    public NameList createNameList() {
        return new NameList();
    }

    /**
     * Create an instance of {@link GenericType }
     * 
     */
    public GenericType createGenericType() {
        return new GenericType();
    }

    /**
     * Create an instance of {@link NameSectTypeTriple }
     * 
     */
    public NameSectTypeTriple createNameSectTypeTriple() {
        return new NameSectTypeTriple();
    }

    /**
     * Create an instance of {@link Exists1Expr }
     * 
     */
    public Exists1Expr createExists1Expr() {
        return new Exists1Expr();
    }

    /**
     * Create an instance of {@link Qnt1Expr }
     * 
     */
    public Qnt1Expr createQnt1Expr() {
        return new Qnt1Expr();
    }

    /**
     * Create an instance of {@link LatexMarkupPara }
     * 
     */
    public LatexMarkupPara createLatexMarkupPara() {
        return new LatexMarkupPara();
    }

    /**
     * Create an instance of {@link ZRenameList }
     * 
     */
    public ZRenameList createZRenameList() {
        return new ZRenameList();
    }

    /**
     * Create an instance of {@link NameTypePair }
     * 
     */
    public NameTypePair createNameTypePair() {
        return new NameTypePair();
    }

    /**
     * Create an instance of {@link ZStrokeList }
     * 
     */
    public ZStrokeList createZStrokeList() {
        return new ZStrokeList();
    }

    /**
     * Create an instance of {@link PowerType }
     * 
     */
    public PowerType createPowerType() {
        return new PowerType();
    }

    /**
     * Create an instance of {@link ParenAnn }
     * 
     */
    public ParenAnn createParenAnn() {
        return new ParenAnn();
    }

    /**
     * Create an instance of {@link ExprList }
     * 
     */
    public ExprList createExprList() {
        return new ExprList();
    }

    /**
     * Create an instance of {@link PipeExpr }
     * 
     */
    public PipeExpr createPipeExpr() {
        return new PipeExpr();
    }

    /**
     * Create an instance of {@link TypeAnn }
     * 
     */
    public TypeAnn createTypeAnn() {
        return new TypeAnn();
    }

    /**
     * Create an instance of {@link AxPara }
     * 
     */
    public AxPara createAxPara() {
        return new AxPara();
    }

    /**
     * Create an instance of {@link Expr0N }
     * 
     */
    public Expr0N createExpr0N() {
        return new Expr0N();
    }

    /**
     * Create an instance of {@link InStroke }
     * 
     */
    public InStroke createInStroke() {
        return new InStroke();
    }

    /**
     * Create an instance of {@link AndExpr }
     * 
     */
    public AndExpr createAndExpr() {
        return new AndExpr();
    }

    /**
     * Create an instance of {@link ImpliesExpr }
     * 
     */
    public ImpliesExpr createImpliesExpr() {
        return new ImpliesExpr();
    }

    /**
     * Create an instance of {@link ZBranchList }
     * 
     */
    public ZBranchList createZBranchList() {
        return new ZBranchList();
    }

    /**
     * Create an instance of {@link BranchList }
     * 
     */
    public BranchList createBranchList() {
        return new BranchList();
    }

    /**
     * Create an instance of {@link Pred2 }
     * 
     */
    public Pred2 createPred2() {
        return new Pred2();
    }

    /**
     * Create an instance of {@link SchemaType }
     * 
     */
    public SchemaType createSchemaType() {
        return new SchemaType();
    }

    /**
     * Create an instance of {@link OutStroke }
     * 
     */
    public OutStroke createOutStroke() {
        return new OutStroke();
    }

    /**
     * Create an instance of {@link FreetypeList }
     * 
     */
    public FreetypeList createFreetypeList() {
        return new FreetypeList();
    }

    /**
     * Create an instance of {@link NumExpr }
     * 
     */
    public NumExpr createNumExpr() {
        return new NumExpr();
    }

    /**
     * Create an instance of {@link ZExprList }
     * 
     */
    public ZExprList createZExprList() {
        return new ZExprList();
    }

    /**
     * Create an instance of {@link ExistsExpr }
     * 
     */
    public ExistsExpr createExistsExpr() {
        return new ExistsExpr();
    }

    /**
     * Create an instance of {@link ZSect }
     * 
     */
    public ZSect createZSect() {
        return new ZSect();
    }

    /**
     * Create an instance of {@link LetExpr }
     * 
     */
    public LetExpr createLetExpr() {
        return new LetExpr();
    }

    /**
     * Create an instance of {@link ProdType }
     * 
     */
    public ProdType createProdType() {
        return new ProdType();
    }

    /**
     * Create an instance of {@link LambdaExpr }
     * 
     */
    public LambdaExpr createLambdaExpr() {
        return new LambdaExpr();
    }

    /**
     * Create an instance of {@link AndPred }
     * 
     */
    public AndPred createAndPred() {
        return new AndPred();
    }

    /**
     * Create an instance of {@link ExistsPred }
     * 
     */
    public ExistsPred createExistsPred() {
        return new ExistsPred();
    }

    /**
     * Create an instance of {@link FreePara }
     * 
     */
    public FreePara createFreePara() {
        return new FreePara();
    }

    /**
     * Create an instance of {@link OrExpr }
     * 
     */
    public OrExpr createOrExpr() {
        return new OrExpr();
    }

    /**
     * Create an instance of {@link TupleExpr }
     * 
     */
    public TupleExpr createTupleExpr() {
        return new TupleExpr();
    }

    /**
     * Create an instance of {@link Expr2N }
     * 
     */
    public Expr2N createExpr2N() {
        return new Expr2N();
    }

    /**
     * Create an instance of {@link PowerExpr }
     * 
     */
    public PowerExpr createPowerExpr() {
        return new PowerExpr();
    }

    /**
     * Create an instance of {@link ConstDecl }
     * 
     */
    public ConstDecl createConstDecl() {
        return new ConstDecl();
    }

    /**
     * Create an instance of {@link ZParaList }
     * 
     */
    public ZParaList createZParaList() {
        return new ZParaList();
    }

    /**
     * Create an instance of {@link ThetaExpr }
     * 
     */
    public ThetaExpr createThetaExpr() {
        return new ThetaExpr();
    }

    /**
     * Create an instance of {@link Operator }
     * 
     */
    public Operator createOperator() {
        return new Operator();
    }

    /**
     * Create an instance of {@link Parent }
     * 
     */
    public Parent createParent() {
        return new Parent();
    }

    /**
     * Create an instance of {@link NegExpr }
     * 
     */
    public NegExpr createNegExpr() {
        return new NegExpr();
    }

    /**
     * Create an instance of {@link MemPred }
     * 
     */
    public MemPred createMemPred() {
        return new MemPred();
    }

    /**
     * Create an instance of {@link CompExpr }
     * 
     */
    public CompExpr createCompExpr() {
        return new CompExpr();
    }

    /**
     * Create an instance of {@link ForallExpr }
     * 
     */
    public ForallExpr createForallExpr() {
        return new ForallExpr();
    }

    /**
     * Create an instance of {@link SetExpr }
     * 
     */
    public SetExpr createSetExpr() {
        return new SetExpr();
    }

    /**
     * Create an instance of {@link BindSelExpr }
     * 
     */
    public BindSelExpr createBindSelExpr() {
        return new BindSelExpr();
    }

    /**
     * Create an instance of {@link Branch }
     * 
     */
    public Branch createBranch() {
        return new Branch();
    }

    /**
     * Create an instance of {@link FalsePred }
     * 
     */
    public FalsePred createFalsePred() {
        return new FalsePred();
    }

    /**
     * Create an instance of {@link ZNameList }
     * 
     */
    public ZNameList createZNameList() {
        return new ZNameList();
    }

    /**
     * Create an instance of {@link RefExpr }
     * 
     */
    public RefExpr createRefExpr() {
        return new RefExpr();
    }

    /**
     * Create an instance of {@link GivenPara }
     * 
     */
    public GivenPara createGivenPara() {
        return new GivenPara();
    }

    /**
     * Create an instance of {@link NegPred }
     * 
     */
    public NegPred createNegPred() {
        return new NegPred();
    }

    /**
     * Create an instance of {@link GenParamType }
     * 
     */
    public GenParamType createGenParamType() {
        return new GenParamType();
    }

    /**
     * Create an instance of {@link SectTypeEnvAnn }
     * 
     */
    public SectTypeEnvAnn createSectTypeEnvAnn() {
        return new SectTypeEnvAnn();
    }

    /**
     * Create an instance of {@link Freetype }
     * 
     */
    public Freetype createFreetype() {
        return new Freetype();
    }

    /**
     * Create an instance of {@link IffPred }
     * 
     */
    public IffPred createIffPred() {
        return new IffPred();
    }

    /**
     * Create an instance of {@link ImpliesPred }
     * 
     */
    public ImpliesPred createImpliesPred() {
        return new ImpliesPred();
    }

    /**
     * Create an instance of {@link Signature }
     * 
     */
    public Signature createSignature() {
        return new Signature();
    }

    /**
     * Create an instance of {@link NarrSect }
     * 
     */
    public NarrSect createNarrSect() {
        return new NarrSect();
    }

    /**
     * Create an instance of {@link Spec }
     * 
     */
    public Spec createSpec() {
        return new Spec();
    }

    /**
     * Create an instance of {@link ProdExpr }
     * 
     */
    public ProdExpr createProdExpr() {
        return new ProdExpr();
    }

    /**
     * Create an instance of {@link ExprPred }
     * 
     */
    public ExprPred createExprPred() {
        return new ExprPred();
    }

    /**
     * Create an instance of {@link ZFreetypeList }
     * 
     */
    public ZFreetypeList createZFreetypeList() {
        return new ZFreetypeList();
    }

    /**
     * Create an instance of {@link OrPred }
     * 
     */
    public OrPred createOrPred() {
        return new OrPred();
    }

    /**
     * Create an instance of {@link Term.Anns }
     * 
     */
    public Term.Anns createTermAnns() {
        return new Term.Anns();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CondExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "CondExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<CondExpr> createCondExpr(CondExpr value) {
        return new JAXBElement<CondExpr>(_CondExpr_QNAME, CondExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Oper }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Oper")
    public JAXBElement<Oper> createOper(Oper value) {
        return new JAXBElement<Oper>(_Oper_QNAME, Oper.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Operand }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Operand", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Oper")
    public JAXBElement<Operand> createOperand(Operand value) {
        return new JAXBElement<Operand>(_Operand_QNAME, Operand.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RenameExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "RenameExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<RenameExpr> createRenameExpr(RenameExpr value) {
        return new JAXBElement<RenameExpr>(_RenameExpr_QNAME, RenameExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Sect }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Sect")
    public JAXBElement<Sect> createSect(Sect value) {
        return new JAXBElement<Sect>(_Sect_QNAME, Sect.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Exists1Pred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Exists1Pred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntPred")
    public JAXBElement<Exists1Pred> createExists1Pred(Exists1Pred value) {
        return new JAXBElement<Exists1Pred>(_Exists1Pred_QNAME, Exists1Pred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SchExpr2 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SchExpr2", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr2")
    public JAXBElement<SchExpr2> createSchExpr2(SchExpr2 value) {
        return new JAXBElement<SchExpr2>(_SchExpr2_QNAME, SchExpr2 .class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZNumeral }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZNumeral", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Numeral")
    public JAXBElement<ZNumeral> createZNumeral(ZNumeral value) {
        return new JAXBElement<ZNumeral>(_ZNumeral_QNAME, ZNumeral.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LocAnn }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "LocAnn", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Ann")
    public JAXBElement<LocAnn> createLocAnn(LocAnn value) {
        return new JAXBElement<LocAnn>(_LocAnn_QNAME, LocAnn.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZDeclList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZDeclList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "DeclList")
    public JAXBElement<ZDeclList> createZDeclList(ZDeclList value) {
        return new JAXBElement<ZDeclList>(_ZDeclList_QNAME, ZDeclList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ProjExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ProjExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<ProjExpr> createProjExpr(ProjExpr value) {
        return new JAXBElement<ProjExpr>(_ProjExpr_QNAME, ProjExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NextStroke }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NextStroke", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Stroke")
    public JAXBElement<NextStroke> createNextStroke(NextStroke value) {
        return new JAXBElement<NextStroke>(_NextStroke_QNAME, NextStroke.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZStrokeList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZStrokeList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "StrokeList")
    public JAXBElement<ZStrokeList> createZStrokeList(ZStrokeList value) {
        return new JAXBElement<ZStrokeList>(_ZStrokeList_QNAME, ZStrokeList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PowerType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "PowerType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type2")
    public JAXBElement<PowerType> createPowerType(PowerType value) {
        return new JAXBElement<PowerType>(_PowerType_QNAME, PowerType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NameTypePair }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NameTypePair")
    public JAXBElement<NameTypePair> createNameTypePair(NameTypePair value) {
        return new JAXBElement<NameTypePair>(_NameTypePair_QNAME, NameTypePair.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LatexMarkupPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "LatexMarkupPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<LatexMarkupPara> createLatexMarkupPara(LatexMarkupPara value) {
        return new JAXBElement<LatexMarkupPara>(_LatexMarkupPara_QNAME, LatexMarkupPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZRenameList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZRenameList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "RenameList")
    public JAXBElement<ZRenameList> createZRenameList(ZRenameList value) {
        return new JAXBElement<ZRenameList>(_ZRenameList_QNAME, ZRenameList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Pred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Pred")
    public JAXBElement<Pred> createPred(Pred value) {
        return new JAXBElement<Pred>(_Pred_QNAME, Pred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Exists1Expr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Exists1Expr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Qnt1Expr")
    public JAXBElement<Exists1Expr> createExists1Expr(Exists1Expr value) {
        return new JAXBElement<Exists1Expr>(_Exists1Expr_QNAME, Exists1Expr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NameSectTypeTriple }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NameSectTypeTriple")
    public JAXBElement<NameSectTypeTriple> createNameSectTypeTriple(NameSectTypeTriple value) {
        return new JAXBElement<NameSectTypeTriple>(_NameSectTypeTriple_QNAME, NameSectTypeTriple.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Stroke }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Stroke")
    public JAXBElement<Stroke> createStroke(Stroke value) {
        return new JAXBElement<Stroke>(_Stroke_QNAME, Stroke.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SchExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SchExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<SchExpr> createSchExpr(SchExpr value) {
        return new JAXBElement<SchExpr>(_SchExpr_QNAME, SchExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NameList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NameList")
    public JAXBElement<NameList> createNameList(NameList value) {
        return new JAXBElement<NameList>(_NameList_QNAME, NameList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GenericType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "GenericType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type")
    public JAXBElement<GenericType> createGenericType(GenericType value) {
        return new JAXBElement<GenericType>(_GenericType_QNAME, GenericType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HideExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "HideExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<HideExpr> createHideExpr(HideExpr value) {
        return new JAXBElement<HideExpr>(_HideExpr_QNAME, HideExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AxPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "AxPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<AxPara> createAxPara(AxPara value) {
        return new JAXBElement<AxPara>(_AxPara_QNAME, AxPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link QntExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "QntExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<QntExpr> createQntExpr(QntExpr value) {
        return new JAXBElement<QntExpr>(_QntExpr_QNAME, QntExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Expr0N }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Expr0N", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<Expr0N> createExpr0N(Expr0N value) {
        return new JAXBElement<Expr0N>(_Expr0N_QNAME, Expr0N.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PipeExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "PipeExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<PipeExpr> createPipeExpr(PipeExpr value) {
        return new JAXBElement<PipeExpr>(_PipeExpr_QNAME, PipeExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TypeAnn }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "TypeAnn", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Ann")
    public JAXBElement<TypeAnn> createTypeAnn(TypeAnn value) {
        return new JAXBElement<TypeAnn>(_TypeAnn_QNAME, TypeAnn.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExprList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ExprList")
    public JAXBElement<ExprList> createExprList(ExprList value) {
        return new JAXBElement<ExprList>(_ExprList_QNAME, ExprList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Type }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Type")
    public JAXBElement<Type> createType(Type value) {
        return new JAXBElement<Type>(_Type_QNAME, Type.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ParenAnn }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ParenAnn", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Ann")
    public JAXBElement<ParenAnn> createParenAnn(ParenAnn value) {
        return new JAXBElement<ParenAnn>(_ParenAnn_QNAME, ParenAnn.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZSchText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZSchText", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchText")
    public JAXBElement<ZSchText> createZSchText(ZSchText value) {
        return new JAXBElement<ZSchText>(_ZSchText_QNAME, ZSchText.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NewOldPair }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NewOldPair")
    public JAXBElement<NewOldPair> createNewOldPair(NewOldPair value) {
        return new JAXBElement<NewOldPair>(_NewOldPair_QNAME, NewOldPair.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UnparsedPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "UnparsedPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<UnparsedPara> createUnparsedPara(UnparsedPara value) {
        return new JAXBElement<UnparsedPara>(_UnparsedPara_QNAME, UnparsedPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DecorExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "DecorExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<DecorExpr> createDecorExpr(DecorExpr value) {
        return new JAXBElement<DecorExpr>(_DecorExpr_QNAME, DecorExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Numeral }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Numeral")
    public JAXBElement<Numeral> createNumeral(Numeral value) {
        return new JAXBElement<Numeral>(_Numeral_QNAME, Numeral.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NarrPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NarrPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<NarrPara> createNarrPara(NarrPara value) {
        return new JAXBElement<NarrPara>(_NarrPara_QNAME, NarrPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TupleSelExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "TupleSelExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<TupleSelExpr> createTupleSelExpr(TupleSelExpr value) {
        return new JAXBElement<TupleSelExpr>(_TupleSelExpr_QNAME, TupleSelExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZName }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZName", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Name")
    public JAXBElement<ZName> createZName(ZName value) {
        return new JAXBElement<ZName>(_ZName_QNAME, ZName.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UnparsedZSect }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "UnparsedZSect", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Sect")
    public JAXBElement<UnparsedZSect> createUnparsedZSect(UnparsedZSect value) {
        return new JAXBElement<UnparsedZSect>(_UnparsedZSect_QNAME, UnparsedZSect.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OptempPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "OptempPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<OptempPara> createOptempPara(OptempPara value) {
        return new JAXBElement<OptempPara>(_OptempPara_QNAME, OptempPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InclDecl }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "InclDecl", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Decl")
    public JAXBElement<InclDecl> createInclDecl(InclDecl value) {
        return new JAXBElement<InclDecl>(_InclDecl_QNAME, InclDecl.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link VarDecl }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "VarDecl", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Decl")
    public JAXBElement<VarDecl> createVarDecl(VarDecl value) {
        return new JAXBElement<VarDecl>(_VarDecl_QNAME, VarDecl.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IffExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "IffExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<IffExpr> createIffExpr(IffExpr value) {
        return new JAXBElement<IffExpr>(_IffExpr_QNAME, IffExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MuExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "MuExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntExpr")
    public JAXBElement<MuExpr> createMuExpr(MuExpr value) {
        return new JAXBElement<MuExpr>(_MuExpr_QNAME, MuExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TruePred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "TruePred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Fact")
    public JAXBElement<TruePred> createTruePred(TruePred value) {
        return new JAXBElement<TruePred>(_TruePred_QNAME, TruePred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RenameList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "RenameList")
    public JAXBElement<RenameList> createRenameList(RenameList value) {
        return new JAXBElement<RenameList>(_RenameList_QNAME, RenameList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Para }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Para")
    public JAXBElement<Para> createPara(Para value) {
        return new JAXBElement<Para>(_Para_QNAME, Para.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ParaList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ParaList")
    public JAXBElement<ParaList> createParaList(ParaList value) {
        return new JAXBElement<ParaList>(_ParaList_QNAME, ParaList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DeclList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "DeclList")
    public JAXBElement<DeclList> createDeclList(DeclList value) {
        return new JAXBElement<DeclList>(_DeclList_QNAME, DeclList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StrokeList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "StrokeList")
    public JAXBElement<StrokeList> createStrokeList(StrokeList value) {
        return new JAXBElement<StrokeList>(_StrokeList_QNAME, StrokeList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BindExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "BindExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<BindExpr> createBindExpr(BindExpr value) {
        return new JAXBElement<BindExpr>(_BindExpr_QNAME, BindExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ForallPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ForallPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntPred")
    public JAXBElement<ForallPred> createForallPred(ForallPred value) {
        return new JAXBElement<ForallPred>(_ForallPred_QNAME, ForallPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Directive }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Directive")
    public JAXBElement<Directive> createDirective(Directive value) {
        return new JAXBElement<Directive>(_Directive_QNAME, Directive.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NumStroke }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NumStroke", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Stroke")
    public JAXBElement<NumStroke> createNumStroke(NumStroke value) {
        return new JAXBElement<NumStroke>(_NumStroke_QNAME, NumStroke.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConjPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ConjPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<ConjPara> createConjPara(ConjPara value) {
        return new JAXBElement<ConjPara>(_ConjPara_QNAME, ConjPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ApplExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ApplExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr2")
    public JAXBElement<ApplExpr> createApplExpr(ApplExpr value) {
        return new JAXBElement<ApplExpr>(_ApplExpr_QNAME, ApplExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SetCompExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SetCompExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntExpr")
    public JAXBElement<SetCompExpr> createSetCompExpr(SetCompExpr value) {
        return new JAXBElement<SetCompExpr>(_SetCompExpr_QNAME, SetCompExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Expr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Expr")
    public JAXBElement<Expr> createExpr(Expr value) {
        return new JAXBElement<Expr>(_Expr_QNAME, Expr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SignatureAnn }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SignatureAnn", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Ann")
    public JAXBElement<SignatureAnn> createSignatureAnn(SignatureAnn value) {
        return new JAXBElement<SignatureAnn>(_SignatureAnn_QNAME, SignatureAnn.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GivenType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "GivenType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type2")
    public JAXBElement<GivenType> createGivenType(GivenType value) {
        return new JAXBElement<GivenType>(_GivenType_QNAME, GivenType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SchText }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SchText")
    public JAXBElement<SchText> createSchText(SchText value) {
        return new JAXBElement<SchText>(_SchText_QNAME, SchText.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PreExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "PreExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<PreExpr> createPreExpr(PreExpr value) {
        return new JAXBElement<PreExpr>(_PreExpr_QNAME, PreExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ForallExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ForallExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Qnt1Expr")
    public JAXBElement<ForallExpr> createForallExpr(ForallExpr value) {
        return new JAXBElement<ForallExpr>(_ForallExpr_QNAME, ForallExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CompExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "CompExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<CompExpr> createCompExpr(CompExpr value) {
        return new JAXBElement<CompExpr>(_CompExpr_QNAME, CompExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NegExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NegExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<NegExpr> createNegExpr(NegExpr value) {
        return new JAXBElement<NegExpr>(_NegExpr_QNAME, NegExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MemPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "MemPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<MemPred> createMemPred(MemPred value) {
        return new JAXBElement<MemPred>(_MemPred_QNAME, MemPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Parent }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Parent")
    public JAXBElement<Parent> createParent(Parent value) {
        return new JAXBElement<Parent>(_Parent_QNAME, Parent.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ann }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Ann")
    public JAXBElement<Ann> createAnn(Ann value) {
        return new JAXBElement<Ann>(_Ann_QNAME, Ann.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Type2 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Type2", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type")
    public JAXBElement<Type2> createType2(Type2 value) {
        return new JAXBElement<Type2>(_Type2_QNAME, Type2 .class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Operator }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Operator", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Oper")
    public JAXBElement<Operator> createOperator(Operator value) {
        return new JAXBElement<Operator>(_Operator_QNAME, Operator.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RefExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "RefExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<RefExpr> createRefExpr(RefExpr value) {
        return new JAXBElement<RefExpr>(_RefExpr_QNAME, RefExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GivenPara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "GivenPara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<GivenPara> createGivenPara(GivenPara value) {
        return new JAXBElement<GivenPara>(_GivenPara_QNAME, GivenPara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FalsePred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "FalsePred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Fact")
    public JAXBElement<FalsePred> createFalsePred(FalsePred value) {
        return new JAXBElement<FalsePred>(_FalsePred_QNAME, FalsePred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZNameList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZNameList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "NameList")
    public JAXBElement<ZNameList> createZNameList(ZNameList value) {
        return new JAXBElement<ZNameList>(_ZNameList_QNAME, ZNameList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BindSelExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "BindSelExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<BindSelExpr> createBindSelExpr(BindSelExpr value) {
        return new JAXBElement<BindSelExpr>(_BindSelExpr_QNAME, BindSelExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Branch }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Branch")
    public JAXBElement<Branch> createBranch(Branch value) {
        return new JAXBElement<Branch>(_Branch_QNAME, Branch.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SetExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SetExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr0N")
    public JAXBElement<SetExpr> createSetExpr(SetExpr value) {
        return new JAXBElement<SetExpr>(_SetExpr_QNAME, SetExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Decl }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Decl")
    public JAXBElement<Decl> createDecl(Decl value) {
        return new JAXBElement<Decl>(_Decl_QNAME, Decl.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SectTypeEnvAnn }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SectTypeEnvAnn", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Ann")
    public JAXBElement<SectTypeEnvAnn> createSectTypeEnvAnn(SectTypeEnvAnn value) {
        return new JAXBElement<SectTypeEnvAnn>(_SectTypeEnvAnn_QNAME, SectTypeEnvAnn.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NegPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NegPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<NegPred> createNegPred(NegPred value) {
        return new JAXBElement<NegPred>(_NegPred_QNAME, NegPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GenParamType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "GenParamType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type2")
    public JAXBElement<GenParamType> createGenParamType(GenParamType value) {
        return new JAXBElement<GenParamType>(_GenParamType_QNAME, GenParamType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExprPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ExprPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<ExprPred> createExprPred(ExprPred value) {
        return new JAXBElement<ExprPred>(_ExprPred_QNAME, ExprPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZFreetypeList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZFreetypeList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "FreetypeList")
    public JAXBElement<ZFreetypeList> createZFreetypeList(ZFreetypeList value) {
        return new JAXBElement<ZFreetypeList>(_ZFreetypeList_QNAME, ZFreetypeList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "OrPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred2")
    public JAXBElement<OrPred> createOrPred(OrPred value) {
        return new JAXBElement<OrPred>(_OrPred_QNAME, OrPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Spec }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Spec")
    public JAXBElement<Spec> createSpec(Spec value) {
        return new JAXBElement<Spec>(_Spec_QNAME, Spec.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ProdExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ProdExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr2N")
    public JAXBElement<ProdExpr> createProdExpr(ProdExpr value) {
        return new JAXBElement<ProdExpr>(_ProdExpr_QNAME, ProdExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NarrSect }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NarrSect", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Sect")
    public JAXBElement<NarrSect> createNarrSect(NarrSect value) {
        return new JAXBElement<NarrSect>(_NarrSect_QNAME, NarrSect.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ImpliesPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ImpliesPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred2")
    public JAXBElement<ImpliesPred> createImpliesPred(ImpliesPred value) {
        return new JAXBElement<ImpliesPred>(_ImpliesPred_QNAME, ImpliesPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Signature }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Signature")
    public JAXBElement<Signature> createSignature(Signature value) {
        return new JAXBElement<Signature>(_Signature_QNAME, Signature.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BranchList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "BranchList")
    public JAXBElement<BranchList> createBranchList(BranchList value) {
        return new JAXBElement<BranchList>(_BranchList_QNAME, BranchList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link IffPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "IffPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred2")
    public JAXBElement<IffPred> createIffPred(IffPred value) {
        return new JAXBElement<IffPred>(_IffPred_QNAME, IffPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Freetype }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Freetype")
    public JAXBElement<Freetype> createFreetype(Freetype value) {
        return new JAXBElement<Freetype>(_Freetype_QNAME, Freetype.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link QntPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "QntPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<QntPred> createQntPred(QntPred value) {
        return new JAXBElement<QntPred>(_QntPred_QNAME, QntPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SchemaType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "SchemaType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type2")
    public JAXBElement<SchemaType> createSchemaType(SchemaType value) {
        return new JAXBElement<SchemaType>(_SchemaType_QNAME, SchemaType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Name }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Name")
    public JAXBElement<Name> createName(Name value) {
        return new JAXBElement<Name>(_Name_QNAME, Name.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Pred2 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Pred2", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<Pred2> createPred2(Pred2 value) {
        return new JAXBElement<Pred2>(_Pred2_QNAME, Pred2 .class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZBranchList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZBranchList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "BranchList")
    public JAXBElement<ZBranchList> createZBranchList(ZBranchList value) {
        return new JAXBElement<ZBranchList>(_ZBranchList_QNAME, ZBranchList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ImpliesExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ImpliesExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<ImpliesExpr> createImpliesExpr(ImpliesExpr value) {
        return new JAXBElement<ImpliesExpr>(_ImpliesExpr_QNAME, ImpliesExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InStroke }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "InStroke", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Stroke")
    public JAXBElement<InStroke> createInStroke(InStroke value) {
        return new JAXBElement<InStroke>(_InStroke_QNAME, InStroke.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "AndExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<AndExpr> createAndExpr(AndExpr value) {
        return new JAXBElement<AndExpr>(_AndExpr_QNAME, AndExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExistsExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ExistsExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Qnt1Expr")
    public JAXBElement<ExistsExpr> createExistsExpr(ExistsExpr value) {
        return new JAXBElement<ExistsExpr>(_ExistsExpr_QNAME, ExistsExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZExprList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZExprList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "ExprList")
    public JAXBElement<ZExprList> createZExprList(ZExprList value) {
        return new JAXBElement<ZExprList>(_ZExprList_QNAME, ZExprList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FreetypeList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "FreetypeList")
    public JAXBElement<FreetypeList> createFreetypeList(FreetypeList value) {
        return new JAXBElement<FreetypeList>(_FreetypeList_QNAME, FreetypeList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NumExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "NumExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<NumExpr> createNumExpr(NumExpr value) {
        return new JAXBElement<NumExpr>(_NumExpr_QNAME, NumExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OutStroke }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "OutStroke", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Stroke")
    public JAXBElement<OutStroke> createOutStroke(OutStroke value) {
        return new JAXBElement<OutStroke>(_OutStroke_QNAME, OutStroke.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OrExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "OrExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "SchExpr2")
    public JAXBElement<OrExpr> createOrExpr(OrExpr value) {
        return new JAXBElement<OrExpr>(_OrExpr_QNAME, OrExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TupleExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "TupleExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr2N")
    public JAXBElement<TupleExpr> createTupleExpr(TupleExpr value) {
        return new JAXBElement<TupleExpr>(_TupleExpr_QNAME, TupleExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Fact }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Fact", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred")
    public JAXBElement<Fact> createFact(Fact value) {
        return new JAXBElement<Fact>(_Fact_QNAME, Fact.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FreePara }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "FreePara", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Para")
    public JAXBElement<FreePara> createFreePara(FreePara value) {
        return new JAXBElement<FreePara>(_FreePara_QNAME, FreePara.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AndPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "AndPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Pred2")
    public JAXBElement<AndPred> createAndPred(AndPred value) {
        return new JAXBElement<AndPred>(_AndPred_QNAME, AndPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExistsPred }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ExistsPred", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntPred")
    public JAXBElement<ExistsPred> createExistsPred(ExistsPred value) {
        return new JAXBElement<ExistsPred>(_ExistsPred_QNAME, ExistsPred.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZSect }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZSect", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Sect")
    public JAXBElement<ZSect> createZSect(ZSect value) {
        return new JAXBElement<ZSect>(_ZSect_QNAME, ZSect.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LetExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "LetExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Qnt1Expr")
    public JAXBElement<LetExpr> createLetExpr(LetExpr value) {
        return new JAXBElement<LetExpr>(_LetExpr_QNAME, LetExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ProdType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ProdType", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Type2")
    public JAXBElement<ProdType> createProdType(ProdType value) {
        return new JAXBElement<ProdType>(_ProdType_QNAME, ProdType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LambdaExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "LambdaExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Qnt1Expr")
    public JAXBElement<LambdaExpr> createLambdaExpr(LambdaExpr value) {
        return new JAXBElement<LambdaExpr>(_LambdaExpr_QNAME, LambdaExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Expr2N }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Expr2N", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr0N")
    public JAXBElement<Expr2N> createExpr2N(Expr2N value) {
        return new JAXBElement<Expr2N>(_Expr2N_QNAME, Expr2N.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Qnt1Expr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Qnt1Expr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "QntExpr")
    public JAXBElement<Qnt1Expr> createQnt1Expr(Qnt1Expr value) {
        return new JAXBElement<Qnt1Expr>(_Qnt1Expr_QNAME, Qnt1Expr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ThetaExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ThetaExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<ThetaExpr> createThetaExpr(ThetaExpr value) {
        return new JAXBElement<ThetaExpr>(_ThetaExpr_QNAME, ThetaExpr.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Expr1 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Expr1", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<Expr1> createExpr1(Expr1 value) {
        return new JAXBElement<Expr1>(_Expr1_QNAME, Expr1 .class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Expr2 }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "Expr2", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr")
    public JAXBElement<Expr2> createExpr2(Expr2 value) {
        return new JAXBElement<Expr2>(_Expr2_QNAME, Expr2 .class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConstDecl }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ConstDecl", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Decl")
    public JAXBElement<ConstDecl> createConstDecl(ConstDecl value) {
        return new JAXBElement<ConstDecl>(_ConstDecl_QNAME, ConstDecl.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ZParaList }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "ZParaList", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "ParaList")
    public JAXBElement<ZParaList> createZParaList(ZParaList value) {
        return new JAXBElement<ZParaList>(_ZParaList_QNAME, ZParaList.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PowerExpr }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://czt.sourceforge.net/zml", name = "PowerExpr", substitutionHeadNamespace = "http://czt.sourceforge.net/zml", substitutionHeadName = "Expr1")
    public JAXBElement<PowerExpr> createPowerExpr(PowerExpr value) {
        return new JAXBElement<PowerExpr>(_PowerExpr_QNAME, PowerExpr.class, null, value);
    }

}
