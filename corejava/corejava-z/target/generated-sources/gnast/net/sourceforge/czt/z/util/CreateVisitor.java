
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.util;

import java.util.*;

import net.sourceforge.czt.base.ast.*;
import net.sourceforge.czt.base.visitor.*;

import net.sourceforge.czt.z.ast.*;
//import net.sourceforge.czt.z.visitor.*;

/**
 * <p>A copy visitor.</p>
 *
 * @author GnAST version 1.6-cdh
 */
 		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally! 
@SuppressWarnings("unchecked") 
public class CreateVisitor
  implements net.sourceforge.czt.z.visitor.ZVisitor<Term>,
             ListTermVisitor<Term>,
             TermVisitor<Term>
{
  private net.sourceforge.czt.z.ast.ZFactory factory_ =
    new net.sourceforge.czt.z.impl.ZFactoryImpl();
  private Object[] children_ = new Object[0];

  /**
   * Creates a new copy visitor that uses the given factory
   * for creating AST terms.
   */
  public CreateVisitor(net.sourceforge.czt.z.ast.ZFactory factory)
  {
    factory_ = factory;
  }

  // TODO: perhaps make it protected and copy contents?
  private final void setChildren(Object[] children)
  {
    children_ = children;
  }

  public Term visitTerm(Term term)
  {
    throw new UnsupportedOperationException();
  }

  /**
   * Creates an instance of {@link DecorExpr}.
   *
   * @return the new instance of DecorExpr.
   */
  public Term visitDecorExpr(DecorExpr term)
  {
    try {
      return factory_.createDecorExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Stroke) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link UnparsedPara}.
   *
   * @return the new instance of UnparsedPara.
   */
  public Term visitUnparsedPara(UnparsedPara term)
  {
    try {
      return factory_.createUnparsedPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<? extends Object>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZSchText}.
   *
   * @return the new instance of ZSchText.
   */
  public Term visitZSchText(ZSchText term)
  {
    try {
      return factory_.createZSchText(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.DeclList) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NewOldPair}.
   *
   * @return the new instance of NewOldPair.
   */
  public Term visitNewOldPair(NewOldPair term)
  {
    try {
      return factory_.createNewOldPair(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Name>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link VarDecl}.
   *
   * @return the new instance of VarDecl.
   */
  public Term visitVarDecl(VarDecl term)
  {
    try {
      return factory_.createVarDecl(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZName}.
   *
   * @return the new instance of ZName.
   */
  public Term visitZName(ZName term)
  {
    try {
      return factory_.createZName(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.StrokeList) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[2]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link UnparsedZSect}.
   *
   * @return the new instance of UnparsedZSect.
   */
  public Term visitUnparsedZSect(UnparsedZSect term)
  {
    try {
      return factory_.createUnparsedZSect(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<? extends Object>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link OptempPara}.
   *
   * @return the new instance of OptempPara.
   */
  public Term visitOptempPara(OptempPara term)
  {
    try {
      return factory_.createOptempPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Oper>) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Cat) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Assoc) children_[2]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[3]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link InclDecl}.
   *
   * @return the new instance of InclDecl.
   */
  public Term visitInclDecl(InclDecl term)
  {
    try {
      return factory_.createInclDecl(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NarrPara}.
   *
   * @return the new instance of NarrPara.
   */
  public Term visitNarrPara(NarrPara term)
  {
    try {
      return factory_.createNarrPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<? extends Object>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link TupleSelExpr}.
   *
   * @return the new instance of TupleSelExpr.
   */
  public Term visitTupleSelExpr(TupleSelExpr term)
  {
    try {
      return factory_.createTupleSelExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Numeral) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link BindExpr}.
   *
   * @return the new instance of BindExpr.
   */
  public Term visitBindExpr(BindExpr term)
  {
    try {
      return factory_.createBindExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.DeclList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link MuExpr}.
   *
   * @return the new instance of MuExpr.
   */
  public Term visitMuExpr(MuExpr term)
  {
    try {
      return factory_.createMuExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link TruePred}.
   *
   * @return the new instance of TruePred.
   */
  public Term visitTruePred(TruePred term)
  {
    try {
      return factory_.createTruePred(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link IffExpr}.
   *
   * @return the new instance of IffExpr.
   */
  public Term visitIffExpr(IffExpr term)
  {
    try {
      return factory_.createIffExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SignatureAnn}.
   *
   * @return the new instance of SignatureAnn.
   */
  public Term visitSignatureAnn(SignatureAnn term)
  {
    try {
      return factory_.createSignatureAnn(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Signature) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link GivenType}.
   *
   * @return the new instance of GivenType.
   */
  public Term visitGivenType(GivenType term)
  {
    try {
      return factory_.createGivenType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link PreExpr}.
   *
   * @return the new instance of PreExpr.
   */
  public Term visitPreExpr(PreExpr term)
  {
    try {
      return factory_.createPreExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SetCompExpr}.
   *
   * @return the new instance of SetCompExpr.
   */
  public Term visitSetCompExpr(SetCompExpr term)
  {
    try {
      return factory_.createSetCompExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ApplExpr}.
   *
   * @return the new instance of ApplExpr.
   */
  public Term visitApplExpr(ApplExpr term)
  {
    try {
      return factory_.createApplExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Boolean) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NumStroke}.
   *
   * @return the new instance of NumStroke.
   */
  public Term visitNumStroke(NumStroke term)
  {
    try {
      return factory_.createNumStroke(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.base.ast.Digit) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ConjPara}.
   *
   * @return the new instance of ConjPara.
   */
  public Term visitConjPara(ConjPara term)
  {
    try {
      return factory_.createConjPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Directive}.
   *
   * @return the new instance of Directive.
   */
  public Term visitDirective(Directive term)
  {
    try {
      return factory_.createDirective(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (DirectiveType) children_[2]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ForallPred}.
   *
   * @return the new instance of ForallPred.
   */
  public Term visitForallPred(ForallPred term)
  {
    try {
      return factory_.createForallPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZNumeral}.
   *
   * @return the new instance of ZNumeral.
   */
  public Term visitZNumeral(ZNumeral term)
  {
    try {
      return factory_.createZNumeral(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Exists1Pred}.
   *
   * @return the new instance of Exists1Pred.
   */
  public Term visitExists1Pred(Exists1Pred term)
  {
    try {
      return factory_.createExists1Pred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Operand}.
   *
   * @return the new instance of Operand.
   */
  public Term visitOperand(Operand term)
  {
    try {
      return factory_.createOperand(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Boolean) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link RenameExpr}.
   *
   * @return the new instance of RenameExpr.
   */
  public Term visitRenameExpr(RenameExpr term)
  {
    try {
      return factory_.createRenameExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.RenameList) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link CondExpr}.
   *
   * @return the new instance of CondExpr.
   */
  public Term visitCondExpr(CondExpr term)
  {
    try {
      return factory_.createCondExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NextStroke}.
   *
   * @return the new instance of NextStroke.
   */
  public Term visitNextStroke(NextStroke term)
  {
    try {
      return factory_.createNextStroke(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ProjExpr}.
   *
   * @return the new instance of ProjExpr.
   */
  public Term visitProjExpr(ProjExpr term)
  {
    try {
      return factory_.createProjExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZDeclList}.
   *
   * @return the new instance of ZDeclList.
   */
  public Term visitZDeclList(ZDeclList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Decl> list = new ArrayList<net.sourceforge.czt.z.ast.Decl>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Decl) children_[i]);
      }
      return factory_.createZDeclList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link LocAnn}.
   *
   * @return the new instance of LocAnn.
   */
  public Term visitLocAnn(LocAnn term)
  {
    try {
      return factory_.createLocAnn(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[2]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[3]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.math.BigInteger) children_[4]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link HideExpr}.
   *
   * @return the new instance of HideExpr.
   */
  public Term visitHideExpr(HideExpr term)
  {
    try {
      return factory_.createHideExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SchExpr}.
   *
   * @return the new instance of SchExpr.
   */
  public Term visitSchExpr(SchExpr term)
  {
    try {
      return factory_.createSchExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link GenericType}.
   *
   * @return the new instance of GenericType.
   */
  public Term visitGenericType(GenericType term)
  {
    try {
      return factory_.createGenericType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Type2>) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NameSectTypeTriple}.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  public Term visitNameSectTypeTriple(NameSectTypeTriple term)
  {
    try {
      return factory_.createNameSectTypeTriple(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Type) children_[2]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Exists1Expr}.
   *
   * @return the new instance of Exists1Expr.
   */
  public Term visitExists1Expr(Exists1Expr term)
  {
    try {
      return factory_.createExists1Expr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link LatexMarkupPara}.
   *
   * @return the new instance of LatexMarkupPara.
   */
  public Term visitLatexMarkupPara(LatexMarkupPara term)
  {
    try {
      return factory_.createLatexMarkupPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Directive>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZRenameList}.
   *
   * @return the new instance of ZRenameList.
   */
  public Term visitZRenameList(ZRenameList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.NewOldPair> list = new ArrayList<net.sourceforge.czt.z.ast.NewOldPair>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.NewOldPair) children_[i]);
      }
      return factory_.createZRenameList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NameTypePair}.
   *
   * @return the new instance of NameTypePair.
   */
  public Term visitNameTypePair(NameTypePair term)
  {
    try {
      return factory_.createNameTypePair(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Type) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZStrokeList}.
   *
   * @return the new instance of ZStrokeList.
   */
  public Term visitZStrokeList(ZStrokeList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Stroke> list = new ArrayList<net.sourceforge.czt.z.ast.Stroke>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Stroke) children_[i]);
      }
      return factory_.createZStrokeList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link PowerType}.
   *
   * @return the new instance of PowerType.
   */
  public Term visitPowerType(PowerType term)
  {
    try {
      return factory_.createPowerType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Type2) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ParenAnn}.
   *
   * @return the new instance of ParenAnn.
   */
  public Term visitParenAnn(ParenAnn term)
  {
    try {
      return factory_.createParenAnn(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link PipeExpr}.
   *
   * @return the new instance of PipeExpr.
   */
  public Term visitPipeExpr(PipeExpr term)
  {
    try {
      return factory_.createPipeExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link TypeAnn}.
   *
   * @return the new instance of TypeAnn.
   */
  public Term visitTypeAnn(TypeAnn term)
  {
    try {
      return factory_.createTypeAnn(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Type) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link AxPara}.
   *
   * @return the new instance of AxPara.
   */
  public Term visitAxPara(AxPara term)
  {
    try {
      return factory_.createAxPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Box) children_[2]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link InStroke}.
   *
   * @return the new instance of InStroke.
   */
  public Term visitInStroke(InStroke term)
  {
    try {
      return factory_.createInStroke(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link AndExpr}.
   *
   * @return the new instance of AndExpr.
   */
  public Term visitAndExpr(AndExpr term)
  {
    try {
      return factory_.createAndExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ImpliesExpr}.
   *
   * @return the new instance of ImpliesExpr.
   */
  public Term visitImpliesExpr(ImpliesExpr term)
  {
    try {
      return factory_.createImpliesExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZBranchList}.
   *
   * @return the new instance of ZBranchList.
   */
  public Term visitZBranchList(ZBranchList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Branch> list = new ArrayList<net.sourceforge.czt.z.ast.Branch>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Branch) children_[i]);
      }
      return factory_.createZBranchList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SchemaType}.
   *
   * @return the new instance of SchemaType.
   */
  public Term visitSchemaType(SchemaType term)
  {
    try {
      return factory_.createSchemaType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Signature) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link OutStroke}.
   *
   * @return the new instance of OutStroke.
   */
  public Term visitOutStroke(OutStroke term)
  {
    try {
      return factory_.createOutStroke(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NumExpr}.
   *
   * @return the new instance of NumExpr.
   */
  public Term visitNumExpr(NumExpr term)
  {
    try {
      return factory_.createNumExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Numeral) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZExprList}.
   *
   * @return the new instance of ZExprList.
   */
  public Term visitZExprList(ZExprList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Expr> list = new ArrayList<net.sourceforge.czt.z.ast.Expr>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Expr) children_[i]);
      }
      return factory_.createZExprList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ExistsExpr}.
   *
   * @return the new instance of ExistsExpr.
   */
  public Term visitExistsExpr(ExistsExpr term)
  {
    try {
      return factory_.createExistsExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZSect}.
   *
   * @return the new instance of ZSect.
   */
  public Term visitZSect(ZSect term)
  {
    try {
      return factory_.createZSect(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Parent>) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.ParaList) children_[2]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link LetExpr}.
   *
   * @return the new instance of LetExpr.
   */
  public Term visitLetExpr(LetExpr term)
  {
    try {
      return factory_.createLetExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ProdType}.
   *
   * @return the new instance of ProdType.
   */
  public Term visitProdType(ProdType term)
  {
    try {
      return factory_.createProdType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Type2>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link LambdaExpr}.
   *
   * @return the new instance of LambdaExpr.
   */
  public Term visitLambdaExpr(LambdaExpr term)
  {
    try {
      return factory_.createLambdaExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link AndPred}.
   *
   * @return the new instance of AndPred.
   */
  public Term visitAndPred(AndPred term)
  {
    try {
      return factory_.createAndPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Pred>) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (And) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ExistsPred}.
   *
   * @return the new instance of ExistsPred.
   */
  public Term visitExistsPred(ExistsPred term)
  {
    try {
      return factory_.createExistsPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link FreePara}.
   *
   * @return the new instance of FreePara.
   */
  public Term visitFreePara(FreePara term)
  {
    try {
      return factory_.createFreePara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.FreetypeList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link OrExpr}.
   *
   * @return the new instance of OrExpr.
   */
  public Term visitOrExpr(OrExpr term)
  {
    try {
      return factory_.createOrExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link TupleExpr}.
   *
   * @return the new instance of TupleExpr.
   */
  public Term visitTupleExpr(TupleExpr term)
  {
    try {
      return factory_.createTupleExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.ExprList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link PowerExpr}.
   *
   * @return the new instance of PowerExpr.
   */
  public Term visitPowerExpr(PowerExpr term)
  {
    try {
      return factory_.createPowerExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ConstDecl}.
   *
   * @return the new instance of ConstDecl.
   */
  public Term visitConstDecl(ConstDecl term)
  {
    try {
      return factory_.createConstDecl(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZParaList}.
   *
   * @return the new instance of ZParaList.
   */
  public Term visitZParaList(ZParaList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Para> list = new ArrayList<net.sourceforge.czt.z.ast.Para>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Para) children_[i]);
      }
      return factory_.createZParaList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ThetaExpr}.
   *
   * @return the new instance of ThetaExpr.
   */
  public Term visitThetaExpr(ThetaExpr term)
  {
    try {
      return factory_.createThetaExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.StrokeList) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Operator}.
   *
   * @return the new instance of Operator.
   */
  public Term visitOperator(Operator term)
  {
    try {
      return factory_.createOperator(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Parent}.
   *
   * @return the new instance of Parent.
   */
  public Term visitParent(Parent term)
  {
    try {
      return factory_.createParent(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NegExpr}.
   *
   * @return the new instance of NegExpr.
   */
  public Term visitNegExpr(NegExpr term)
  {
    try {
      return factory_.createNegExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link MemPred}.
   *
   * @return the new instance of MemPred.
   */
  public Term visitMemPred(MemPred term)
  {
    try {
      return factory_.createMemPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Boolean) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link CompExpr}.
   *
   * @return the new instance of CompExpr.
   */
  public Term visitCompExpr(CompExpr term)
  {
    try {
      return factory_.createCompExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Expr>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ForallExpr}.
   *
   * @return the new instance of ForallExpr.
   */
  public Term visitForallExpr(ForallExpr term)
  {
    try {
      return factory_.createForallExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.SchText) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SetExpr}.
   *
   * @return the new instance of SetExpr.
   */
  public Term visitSetExpr(SetExpr term)
  {
    try {
      return factory_.createSetExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.ExprList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link BindSelExpr}.
   *
   * @return the new instance of BindSelExpr.
   */
  public Term visitBindSelExpr(BindSelExpr term)
  {
    try {
      return factory_.createBindSelExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Branch}.
   *
   * @return the new instance of Branch.
   */
  public Term visitBranch(Branch term)
  {
    try {
      return factory_.createBranch(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link FalsePred}.
   *
   * @return the new instance of FalsePred.
   */
  public Term visitFalsePred(FalsePred term)
  {
    try {
      return factory_.createFalsePred(
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZNameList}.
   *
   * @return the new instance of ZNameList.
   */
  public Term visitZNameList(ZNameList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Name> list = new ArrayList<net.sourceforge.czt.z.ast.Name>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Name) children_[i]);
      }
      return factory_.createZNameList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link RefExpr}.
   *
   * @return the new instance of RefExpr.
   */
  public Term visitRefExpr(RefExpr term)
  {
    try {
      return factory_.createRefExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.ExprList) children_[1]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Boolean) children_[2]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (Boolean) children_[3]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link GivenPara}.
   *
   * @return the new instance of GivenPara.
   */
  public Term visitGivenPara(GivenPara term)
  {
    try {
      return factory_.createGivenPara(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.NameList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NegPred}.
   *
   * @return the new instance of NegPred.
   */
  public Term visitNegPred(NegPred term)
  {
    try {
      return factory_.createNegPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Pred) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link GenParamType}.
   *
   * @return the new instance of GenParamType.
   */
  public Term visitGenParamType(GenParamType term)
  {
    try {
      return factory_.createGenParamType(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link SectTypeEnvAnn}.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  public Term visitSectTypeEnvAnn(SectTypeEnvAnn term)
  {
    try {
      return factory_.createSectTypeEnvAnn(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<NameSectTypeTriple>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Freetype}.
   *
   * @return the new instance of Freetype.
   */
  public Term visitFreetype(Freetype term)
  {
    try {
      return factory_.createFreetype(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Name) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.BranchList) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link IffPred}.
   *
   * @return the new instance of IffPred.
   */
  public Term visitIffPred(IffPred term)
  {
    try {
      return factory_.createIffPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Pred>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ImpliesPred}.
   *
   * @return the new instance of ImpliesPred.
   */
  public Term visitImpliesPred(ImpliesPred term)
  {
    try {
      return factory_.createImpliesPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Pred>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Signature}.
   *
   * @return the new instance of Signature.
   */
  public Term visitSignature(Signature term)
  {
    try {
      return factory_.createSignature(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<NameTypePair>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link NarrSect}.
   *
   * @return the new instance of NarrSect.
   */
  public Term visitNarrSect(NarrSect term)
  {
    try {
      return factory_.createNarrSect(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<? extends Object>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link Spec}.
   *
   * @return the new instance of Spec.
   */
  public Term visitSpec(Spec term)
  {
    try {
      return factory_.createSpec(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Sect>) children_[0]
,		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (String) children_[1]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ProdExpr}.
   *
   * @return the new instance of ProdExpr.
   */
  public Term visitProdExpr(ProdExpr term)
  {
    try {
      return factory_.createProdExpr(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.ExprList) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ExprPred}.
   *
   * @return the new instance of ExprPred.
   */
  public Term visitExprPred(ExprPred term)
  {
    try {
      return factory_.createExprPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (net.sourceforge.czt.z.ast.Expr) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link ZFreetypeList}.
   *
   * @return the new instance of ZFreetypeList.
   */
  public Term visitZFreetypeList(ZFreetypeList term)
  {
    try {
      List<net.sourceforge.czt.z.ast.Freetype> list = new ArrayList<net.sourceforge.czt.z.ast.Freetype>(children_.length);
      for (int i = 0; i < children_.length; i++) {
        list.add((net.sourceforge.czt.z.ast.Freetype) children_[i]);
      }
      return factory_.createZFreetypeList(list);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }
  /**
   * Creates an instance of {@link OrPred}.
   *
   * @return the new instance of OrPred.
   */
  public Term visitOrPred(OrPred term)
  {
    try {
      return factory_.createOrPred(
		  // whenever this is a List<?> we need unchecked warning removal; not otherwise;
		  // adding it globally!
          (java.util.List<Pred>) children_[0]
        );
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
  }

  public Term visitListTerm(ListTerm<?> listTerm)
  {
    ListTerm<Object> result =
      new net.sourceforge.czt.base.impl.ListTermImpl<Object>();
    for (Object o : children_) result.add(o);
    return result;
  }

  public Term create(Term term, Object[] children)
  {
    setChildren(children);
    return term.accept(this);
  }

  public Term copy(Term term, boolean copyAnnotations)
  {
    Object[] args = term.getChildren();
    for (int i = 0; i < args.length; i++) {
      if (args[i] instanceof Term) {
        args[i] = copy((Term) args[i], copyAnnotations);
      }
    }
    Term result = create(term, args);
    if (copyAnnotations && term.hasAnn()) {
      for (Object o : term.getAnns()) {
        if (o instanceof Term) {
          result.getAnns().add(copy((Term) o, copyAnnotations));
        }
        else {
          result.getAnns().add(o);
        }
      }
    }
    args = null;
    return result;
  }
}
