
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.z.ast.ZName}.
 *
 * @author GnAST version 1.6-cdh
 */
public class ZNameImpl
extends 		 		net.sourceforge.czt.z.impl.NameImpl
 	  implements net.sourceforge.czt.z.ast.ZName
{





  /**
   * static instance count for ZNameImpl
   */
   private static long instanceCount_ = 0;
   
  /**
   * public attribute determining whether to log to the 
   * standard output information about who is creating 
   * this instance of ZNameImpl (e.g., ic >= sl)
   */
  //private static final long startLoggingFrom_ = Long.MAX_VALUE;
   
    // cannot be final because JokerCommunicationImpl extends CommunicationImpl
  public /*final*/ static boolean countingFinaliser() { return false; }
  public /*final*/ static long instancesFinalised() 
  { 
    throw new UnsupportedOperationException("GnAST AST finalisers have not been set"); 
  }
  
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.z.ast.ZFactory object factory}.
   */
  protected ZNameImpl()
  {
    this(null);
  }

  protected ZNameImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
    countInstance();
  }
  
  private static synchronized void countInstance()
  {
	  instanceCount_++;
  }
  
  /**
   * Compares the specified object with this ZNameImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) ZNameImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //ZNameImpl object = ((ZNameImpl) obj);
        if (word_ != null) {
          if (!word_.equals(((ZNameImpl) obj).word_)) {
            return false;
          }
        }
        else {
          if (((ZNameImpl) obj).word_ != null) {
            return false;
          }
        }
        if (strokeList_ != null) {
          if (!strokeList_.equals(((ZNameImpl) obj).strokeList_)) {
            return false;
          }
        }
        else {
          if (((ZNameImpl) obj).strokeList_ != null) {
            return false;
          }
        }
        if (id_ != null) {
          if (!id_.equals(((ZNameImpl) obj).id_)) {
            return false;
          }
        }
        else {
          if (((ZNameImpl) obj).id_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this ZNameImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "ZNameImpl".hashCode();
    if (word_ != null) {
      hashCode += 31 * word_.hashCode();
    }
    if (strokeList_ != null) {
      hashCode += 31 * strokeList_.hashCode();
    }
    if (id_ != null) {
      hashCode += 31 * id_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.z.visitor.ZNameVisitor) {
      net.sourceforge.czt.z.visitor.ZNameVisitor<R> visitor = 
      	  (net.sourceforge.czt.z.visitor.ZNameVisitor<R>) v;
      return visitor.visitZName(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public ZNameImpl create(Object[] args)
  {
    ZNameImpl zedObject = null;
    try {
	  	  								  	String word = (
													String) args[0];
	  	  	  			  	net.sourceforge.czt.z.ast.StrokeList strokeList = (
						net.sourceforge.czt.z.ast.StrokeList) args[1];
	  	  	  								  	String id = (
													String) args[2];
	        zedObject = new ZNameImpl(getFactory());
      zedObject.setWord(word);
      zedObject.setStrokeList(strokeList);
      zedObject.setId(id);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getWord(), getStrokeList(), getId() };
    return erg;
  }
  
  /** Only concrete classes get the instance count method visible */
  // JokerCommunication in circuspatt extends CommunicationImpl which is not abstract? weird...
  public static /*final*/ long instanceCount()
  {
    return instanceCount_;
  }


  private
            					String
  word_;

  public 
					String
  getWord()
  {
    return word_;
  }

  public void setWord(
					String
	word)
  {
                          setWordInternal(word);
      }


  private
            		net.sourceforge.czt.z.ast.StrokeList
  strokeList_;

  public 
		net.sourceforge.czt.z.ast.StrokeList
  getStrokeList()
  {
    return strokeList_;
  }

  public void setStrokeList(
		net.sourceforge.czt.z.ast.StrokeList
	strokeList)
  {
                          strokeList_ = strokeList;
    }


  private
            					String
  id_;

  public 
					String
  getId()
  {
    return id_;
  }

  public void setId(
					String
	id)
  {
                          setIdInternal(id);
      }

  public net.sourceforge.czt.z.util.OperatorName getOperatorName()
  {
    try {
      return new net.sourceforge.czt.z.util.OperatorName(this);
    }
    catch(net.sourceforge.czt.z.util.OperatorName.OperatorNameException e) {
      return null;
    }
  }
  
  public net.sourceforge.czt.z.util.OperatorName getOperatorName(
    net.sourceforge.czt.z.util.Fixity fixity)
  {
    try {
      return new net.sourceforge.czt.z.util.OperatorName(this.getWord(), this.getStrokeList(), fixity);
    }
    catch(net.sourceforge.czt.z.util.OperatorName.OperatorNameException e) {
      return null;
    }  
  }
  

  /**
   * This is a convenience method.
   * It returns the ZStrokeList if ZStrokeList is an instance of
   * ZStrokeList and throws an UnsupportedAstClassException otherwise.
   */
  public net.sourceforge.czt.z.ast.ZStrokeList getZStrokeList()
  {
	  net.sourceforge.czt.z.ast.StrokeList strokeList = getStrokeList();
    if (strokeList instanceof net.sourceforge.czt.z.ast.ZStrokeList) {
      return (net.sourceforge.czt.z.ast.ZStrokeList) strokeList;
    }
    final String message = "Expected the default (Z) implementation of StrokeList" +
      " but found " + String.valueOf(strokeList);
    throw new net.sourceforge.czt.base.util.UnsupportedAstClassException(message);
  }

   private static java.util.Set<String> idPool_ = null;	
   private static java.util.Map<String, java.util.Set<String>> nameIdPool_ = new java.util.TreeMap<String, java.util.Set<String>>(); 
   
   public static java.util.Map<String, java.util.Set<String>> nameIdPool()
   {
     return java.util.Collections.unmodifiableMap(nameIdPool_);
   }
   
   private static boolean debugZName_ = false;
   
   public static final void setDebugZName(boolean v)
   {
	   debugZName_ = v;
   }
   
   public static final boolean getDebugZName()
   {
	   return debugZName_;
   }
   

  private void setWordInternal(String word)
  {
    word_ = word;
    if (debugZName_)
    {
	    if (!nameIdPool_.containsKey(word))
	    {
	      nameIdPool_.put(word, new java.util.TreeSet<String>());
	      idPool_ = nameIdPool_.get(word);
	      //assert id_ == null; ??? could this be non-null? set id before the name?
	    }
		if (id_ != null)
		{
	      assert idPool_ != null;
		  idPool_.add(id_);
		}
	    StringBuffer result = new StringBuffer("\t\t " + instanceCount() + " setWord \t");
	    net.sourceforge.czt.z.util.ZUtils.unicodeToAscii(word, result);
	    net.sourceforge.czt.base.util.TermInstanceCountManager.log(this, result.toString());
    }
  }
  
  private void setIdInternal(String id)
  {
    id_ = id;
    if (debugZName_)
    {
	    assert idPool_ != null && word_ != null;
	    assert nameIdPool_.containsKey(word_);
	    idPool_.add(String.valueOf(id));// might be null
	    
	    StringBuffer result = new StringBuffer("\t\t " + instanceCount() + " setId \t");
	    if (id != null) net.sourceforge.czt.z.util.ZUtils.unicodeToAscii(id, result); else result.append("null");
	    net.sourceforge.czt.base.util.TermInstanceCountManager.log(this, result.toString());
    }
  }}
