
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.ast;


/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public interface ZFactory
{
  /**
   * Creates an instance of {@link DecorExpr}.
   *
   * @return the new instance of DecorExpr.
   */
  net.sourceforge.czt.z.ast.DecorExpr createDecorExpr();

  /**
   * Creates an instance of {@link DecorExpr} with the given children.
   *
   * @return the new instance of DecorExpr.
   */
  net.sourceforge.czt.z.ast.DecorExpr createDecorExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Stroke  stroke);

  /**
   * Creates an instance of {@link UnparsedPara}.
   *
   * @return the new instance of UnparsedPara.
   */
  net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara();

  /**
   * Creates an instance of {@link UnparsedPara} with the given children.
   *
   * @return the new instance of UnparsedPara.
   */
  net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara( java.util.List<? extends Object>  content);

  /**
   * Creates an instance of {@link ZSchText}.
   *
   * @return the new instance of ZSchText.
   */
  net.sourceforge.czt.z.ast.ZSchText createZSchText();

  /**
   * Creates an instance of {@link ZSchText} with the given children.
   *
   * @return the new instance of ZSchText.
   */
  net.sourceforge.czt.z.ast.ZSchText createZSchText( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link NewOldPair}.
   *
   * @return the new instance of NewOldPair.
   */
  net.sourceforge.czt.z.ast.NewOldPair createNewOldPair();

  /**
   * Creates an instance of {@link NewOldPair} with the given children.
   *
   * @return the new instance of NewOldPair.
   */
  net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name);

  /**
   * Creates an instance of {@link VarDecl}.
   *
   * @return the new instance of VarDecl.
   */
  net.sourceforge.czt.z.ast.VarDecl createVarDecl();

  /**
   * Creates an instance of {@link VarDecl} with the given children.
   *
   * @return the new instance of VarDecl.
   */
  net.sourceforge.czt.z.ast.VarDecl createVarDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ZName}.
   *
   * @return the new instance of ZName.
   */
  net.sourceforge.czt.z.ast.ZName createZName();

  /**
   * Creates an instance of {@link ZName} with the given children.
   *
   * @return the new instance of ZName.
   */
  net.sourceforge.czt.z.ast.ZName createZName( String  word, net.sourceforge.czt.z.ast.StrokeList  strokeList, String  id);

  /**
   * Creates an instance of {@link UnparsedZSect}.
   *
   * @return the new instance of UnparsedZSect.
   */
  net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect();

  /**
   * Creates an instance of {@link UnparsedZSect} with the given children.
   *
   * @return the new instance of UnparsedZSect.
   */
  net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect( java.util.List<? extends Object>  content);

  /**
   * Creates an instance of {@link OptempPara}.
   *
   * @return the new instance of OptempPara.
   */
  net.sourceforge.czt.z.ast.OptempPara createOptempPara();

  /**
   * Creates an instance of {@link OptempPara} with the given children.
   *
   * @return the new instance of OptempPara.
   */
  net.sourceforge.czt.z.ast.OptempPara createOptempPara(java.util.List<? extends net.sourceforge.czt.z.ast.Oper>
 oper,net.sourceforge.czt.z.ast.Cat
 cat,net.sourceforge.czt.z.ast.Assoc
 assoc, java.math.BigInteger  prec);

  /**
   * Creates an instance of {@link InclDecl}.
   *
   * @return the new instance of InclDecl.
   */
  net.sourceforge.czt.z.ast.InclDecl createInclDecl();

  /**
   * Creates an instance of {@link InclDecl} with the given children.
   *
   * @return the new instance of InclDecl.
   */
  net.sourceforge.czt.z.ast.InclDecl createInclDecl( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link NarrPara}.
   *
   * @return the new instance of NarrPara.
   */
  net.sourceforge.czt.z.ast.NarrPara createNarrPara();

  /**
   * Creates an instance of {@link NarrPara} with the given children.
   *
   * @return the new instance of NarrPara.
   */
  net.sourceforge.czt.z.ast.NarrPara createNarrPara( java.util.List<? extends Object>  content);

  /**
   * Creates an instance of {@link TupleSelExpr}.
   *
   * @return the new instance of TupleSelExpr.
   */
  net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr();

  /**
   * Creates an instance of {@link TupleSelExpr} with the given children.
   *
   * @return the new instance of TupleSelExpr.
   */
  net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Numeral  numeral);

  /**
   * Creates an instance of {@link BindExpr}.
   *
   * @return the new instance of BindExpr.
   */
  net.sourceforge.czt.z.ast.BindExpr createBindExpr();

  /**
   * Creates an instance of {@link BindExpr} with the given children.
   *
   * @return the new instance of BindExpr.
   */
  net.sourceforge.czt.z.ast.BindExpr createBindExpr( net.sourceforge.czt.z.ast.DeclList  declList);

  /**
   * Creates an instance of {@link MuExpr}.
   *
   * @return the new instance of MuExpr.
   */
  net.sourceforge.czt.z.ast.MuExpr createMuExpr();

  /**
   * Creates an instance of {@link MuExpr} with the given children.
   *
   * @return the new instance of MuExpr.
   */
  net.sourceforge.czt.z.ast.MuExpr createMuExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link TruePred}.
   *
   * @return the new instance of TruePred.
   */
  net.sourceforge.czt.z.ast.TruePred createTruePred();

  /**
   * Creates an instance of {@link IffExpr}.
   *
   * @return the new instance of IffExpr.
   */
  net.sourceforge.czt.z.ast.IffExpr createIffExpr();

  /**
   * Creates an instance of {@link IffExpr} with the given children.
   *
   * @return the new instance of IffExpr.
   */
  net.sourceforge.czt.z.ast.IffExpr createIffExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link SignatureAnn}.
   *
   * @return the new instance of SignatureAnn.
   */
  net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn();

  /**
   * Creates an instance of {@link SignatureAnn} with the given children.
   *
   * @return the new instance of SignatureAnn.
   */
  net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn( net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link GivenType}.
   *
   * @return the new instance of GivenType.
   */
  net.sourceforge.czt.z.ast.GivenType createGivenType();

  /**
   * Creates an instance of {@link GivenType} with the given children.
   *
   * @return the new instance of GivenType.
   */
  net.sourceforge.czt.z.ast.GivenType createGivenType( net.sourceforge.czt.z.ast.Name  name);

  /**
   * Creates an instance of {@link PreExpr}.
   *
   * @return the new instance of PreExpr.
   */
  net.sourceforge.czt.z.ast.PreExpr createPreExpr();

  /**
   * Creates an instance of {@link PreExpr} with the given children.
   *
   * @return the new instance of PreExpr.
   */
  net.sourceforge.czt.z.ast.PreExpr createPreExpr( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link SetCompExpr}.
   *
   * @return the new instance of SetCompExpr.
   */
  net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr();

  /**
   * Creates an instance of {@link SetCompExpr} with the given children.
   *
   * @return the new instance of SetCompExpr.
   */
  net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ApplExpr}.
   *
   * @return the new instance of ApplExpr.
   */
  net.sourceforge.czt.z.ast.ApplExpr createApplExpr();

  /**
   * Creates an instance of {@link ApplExpr} with the given children.
   *
   * @return the new instance of ApplExpr.
   */
  net.sourceforge.czt.z.ast.ApplExpr createApplExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix);

  /**
   * Creates an instance of {@link NumStroke}.
   *
   * @return the new instance of NumStroke.
   */
  net.sourceforge.czt.z.ast.NumStroke createNumStroke();

  /**
   * Creates an instance of {@link NumStroke} with the given children.
   *
   * @return the new instance of NumStroke.
   */
  net.sourceforge.czt.z.ast.NumStroke createNumStroke( net.sourceforge.czt.base.ast.Digit  digit);

  /**
   * Creates an instance of {@link ConjPara}.
   *
   * @return the new instance of ConjPara.
   */
  net.sourceforge.czt.z.ast.ConjPara createConjPara();

  /**
   * Creates an instance of {@link ConjPara} with the given children.
   *
   * @return the new instance of ConjPara.
   */
  net.sourceforge.czt.z.ast.ConjPara createConjPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link Directive}.
   *
   * @return the new instance of Directive.
   */
  net.sourceforge.czt.z.ast.Directive createDirective();

  /**
   * Creates an instance of {@link Directive} with the given children.
   *
   * @return the new instance of Directive.
   */
  net.sourceforge.czt.z.ast.Directive createDirective( String  command, String  unicode,net.sourceforge.czt.z.ast.DirectiveType
 directiveType);

  /**
   * Creates an instance of {@link ForallPred}.
   *
   * @return the new instance of ForallPred.
   */
  net.sourceforge.czt.z.ast.ForallPred createForallPred();

  /**
   * Creates an instance of {@link ForallPred} with the given children.
   *
   * @return the new instance of ForallPred.
   */
  net.sourceforge.czt.z.ast.ForallPred createForallPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link ZNumeral}.
   *
   * @return the new instance of ZNumeral.
   */
  net.sourceforge.czt.z.ast.ZNumeral createZNumeral();

  /**
   * Creates an instance of {@link ZNumeral} with the given children.
   *
   * @return the new instance of ZNumeral.
   */
  net.sourceforge.czt.z.ast.ZNumeral createZNumeral( java.math.BigInteger  value);

  /**
   * Creates an instance of {@link Exists1Pred}.
   *
   * @return the new instance of Exists1Pred.
   */
  net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred();

  /**
   * Creates an instance of {@link Exists1Pred} with the given children.
   *
   * @return the new instance of Exists1Pred.
   */
  net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link Operand}.
   *
   * @return the new instance of Operand.
   */
  net.sourceforge.czt.z.ast.Operand createOperand();

  /**
   * Creates an instance of {@link Operand} with the given children.
   *
   * @return the new instance of Operand.
   */
  net.sourceforge.czt.z.ast.Operand createOperand( Boolean  list);

  /**
   * Creates an instance of {@link RenameExpr}.
   *
   * @return the new instance of RenameExpr.
   */
  net.sourceforge.czt.z.ast.RenameExpr createRenameExpr();

  /**
   * Creates an instance of {@link RenameExpr} with the given children.
   *
   * @return the new instance of RenameExpr.
   */
  net.sourceforge.czt.z.ast.RenameExpr createRenameExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RenameList  renameList);

  /**
   * Creates an instance of {@link CondExpr}.
   *
   * @return the new instance of CondExpr.
   */
  net.sourceforge.czt.z.ast.CondExpr createCondExpr();

  /**
   * Creates an instance of {@link CondExpr} with the given children.
   *
   * @return the new instance of CondExpr.
   */
  net.sourceforge.czt.z.ast.CondExpr createCondExpr( net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link NextStroke}.
   *
   * @return the new instance of NextStroke.
   */
  net.sourceforge.czt.z.ast.NextStroke createNextStroke();

  /**
   * Creates an instance of {@link ProjExpr}.
   *
   * @return the new instance of ProjExpr.
   */
  net.sourceforge.czt.z.ast.ProjExpr createProjExpr();

  /**
   * Creates an instance of {@link ProjExpr} with the given children.
   *
   * @return the new instance of ProjExpr.
   */
  net.sourceforge.czt.z.ast.ProjExpr createProjExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link ZDeclList}.
   *
   * @return the new instance of ZDeclList.
   */
  net.sourceforge.czt.z.ast.ZDeclList createZDeclList();

  /**
   * Creates an instance of {@link ZDeclList} with the given children.
   *
   * @return the new instance of ZDeclList.
   */
  net.sourceforge.czt.z.ast.ZDeclList createZDeclList(java.util.List<? extends net.sourceforge.czt.z.ast.Decl>
 decl);

  /**
   * Creates an instance of {@link LocAnn}.
   *
   * @return the new instance of LocAnn.
   */
  net.sourceforge.czt.z.ast.LocAnn createLocAnn();

  /**
   * Creates an instance of {@link LocAnn} with the given children.
   *
   * @return the new instance of LocAnn.
   */
  net.sourceforge.czt.z.ast.LocAnn createLocAnn( String  loc, java.math.BigInteger  line, java.math.BigInteger  col, java.math.BigInteger  start, java.math.BigInteger  length);

  /**
   * Creates an instance of {@link HideExpr}.
   *
   * @return the new instance of HideExpr.
   */
  net.sourceforge.czt.z.ast.HideExpr createHideExpr();

  /**
   * Creates an instance of {@link HideExpr} with the given children.
   *
   * @return the new instance of HideExpr.
   */
  net.sourceforge.czt.z.ast.HideExpr createHideExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.NameList  nameList);

  /**
   * Creates an instance of {@link SchExpr}.
   *
   * @return the new instance of SchExpr.
   */
  net.sourceforge.czt.z.ast.SchExpr createSchExpr();

  /**
   * Creates an instance of {@link SchExpr} with the given children.
   *
   * @return the new instance of SchExpr.
   */
  net.sourceforge.czt.z.ast.SchExpr createSchExpr( net.sourceforge.czt.z.ast.SchText  schText);

  /**
   * Creates an instance of {@link GenericType}.
   *
   * @return the new instance of GenericType.
   */
  net.sourceforge.czt.z.ast.GenericType createGenericType();

  /**
   * Creates an instance of {@link GenericType} with the given children.
   *
   * @return the new instance of GenericType.
   */
  net.sourceforge.czt.z.ast.GenericType createGenericType( net.sourceforge.czt.z.ast.NameList  nameList,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type);

  /**
   * Creates an instance of {@link NameSectTypeTriple}.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple();

  /**
   * Creates an instance of {@link NameSectTypeTriple} with the given children.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple( net.sourceforge.czt.z.ast.Name  name, String  sect, net.sourceforge.czt.z.ast.Type  type);

  /**
   * Creates an instance of {@link Exists1Expr}.
   *
   * @return the new instance of Exists1Expr.
   */
  net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr();

  /**
   * Creates an instance of {@link Exists1Expr} with the given children.
   *
   * @return the new instance of Exists1Expr.
   */
  net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link LatexMarkupPara}.
   *
   * @return the new instance of LatexMarkupPara.
   */
  net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara();

  /**
   * Creates an instance of {@link LatexMarkupPara} with the given children.
   *
   * @return the new instance of LatexMarkupPara.
   */
  net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara(java.util.List<? extends net.sourceforge.czt.z.ast.Directive>
 directive);

  /**
   * Creates an instance of {@link ZRenameList}.
   *
   * @return the new instance of ZRenameList.
   */
  net.sourceforge.czt.z.ast.ZRenameList createZRenameList();

  /**
   * Creates an instance of {@link ZRenameList} with the given children.
   *
   * @return the new instance of ZRenameList.
   */
  net.sourceforge.czt.z.ast.ZRenameList createZRenameList(java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair);

  /**
   * Creates an instance of {@link NameTypePair}.
   *
   * @return the new instance of NameTypePair.
   */
  net.sourceforge.czt.z.ast.NameTypePair createNameTypePair();

  /**
   * Creates an instance of {@link NameTypePair} with the given children.
   *
   * @return the new instance of NameTypePair.
   */
  net.sourceforge.czt.z.ast.NameTypePair createNameTypePair( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Type  type);

  /**
   * Creates an instance of {@link ZStrokeList}.
   *
   * @return the new instance of ZStrokeList.
   */
  net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList();

  /**
   * Creates an instance of {@link ZStrokeList} with the given children.
   *
   * @return the new instance of ZStrokeList.
   */
  net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList(java.util.List<? extends net.sourceforge.czt.z.ast.Stroke>
 stroke);

  /**
   * Creates an instance of {@link PowerType}.
   *
   * @return the new instance of PowerType.
   */
  net.sourceforge.czt.z.ast.PowerType createPowerType();

  /**
   * Creates an instance of {@link PowerType} with the given children.
   *
   * @return the new instance of PowerType.
   */
  net.sourceforge.czt.z.ast.PowerType createPowerType( net.sourceforge.czt.z.ast.Type2  type);

  /**
   * Creates an instance of {@link ParenAnn}.
   *
   * @return the new instance of ParenAnn.
   */
  net.sourceforge.czt.z.ast.ParenAnn createParenAnn();

  /**
   * Creates an instance of {@link PipeExpr}.
   *
   * @return the new instance of PipeExpr.
   */
  net.sourceforge.czt.z.ast.PipeExpr createPipeExpr();

  /**
   * Creates an instance of {@link PipeExpr} with the given children.
   *
   * @return the new instance of PipeExpr.
   */
  net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link TypeAnn}.
   *
   * @return the new instance of TypeAnn.
   */
  net.sourceforge.czt.z.ast.TypeAnn createTypeAnn();

  /**
   * Creates an instance of {@link TypeAnn} with the given children.
   *
   * @return the new instance of TypeAnn.
   */
  net.sourceforge.czt.z.ast.TypeAnn createTypeAnn( net.sourceforge.czt.z.ast.Type  type);

  /**
   * Creates an instance of {@link AxPara}.
   *
   * @return the new instance of AxPara.
   */
  net.sourceforge.czt.z.ast.AxPara createAxPara();

  /**
   * Creates an instance of {@link AxPara} with the given children.
   *
   * @return the new instance of AxPara.
   */
  net.sourceforge.czt.z.ast.AxPara createAxPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.z.ast.Box
 box);

  /**
   * Creates an instance of {@link InStroke}.
   *
   * @return the new instance of InStroke.
   */
  net.sourceforge.czt.z.ast.InStroke createInStroke();

  /**
   * Creates an instance of {@link AndExpr}.
   *
   * @return the new instance of AndExpr.
   */
  net.sourceforge.czt.z.ast.AndExpr createAndExpr();

  /**
   * Creates an instance of {@link AndExpr} with the given children.
   *
   * @return the new instance of AndExpr.
   */
  net.sourceforge.czt.z.ast.AndExpr createAndExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link ImpliesExpr}.
   *
   * @return the new instance of ImpliesExpr.
   */
  net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr();

  /**
   * Creates an instance of {@link ImpliesExpr} with the given children.
   *
   * @return the new instance of ImpliesExpr.
   */
  net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link ZBranchList}.
   *
   * @return the new instance of ZBranchList.
   */
  net.sourceforge.czt.z.ast.ZBranchList createZBranchList();

  /**
   * Creates an instance of {@link ZBranchList} with the given children.
   *
   * @return the new instance of ZBranchList.
   */
  net.sourceforge.czt.z.ast.ZBranchList createZBranchList(java.util.List<? extends net.sourceforge.czt.z.ast.Branch>
 branch);

  /**
   * Creates an instance of {@link SchemaType}.
   *
   * @return the new instance of SchemaType.
   */
  net.sourceforge.czt.z.ast.SchemaType createSchemaType();

  /**
   * Creates an instance of {@link SchemaType} with the given children.
   *
   * @return the new instance of SchemaType.
   */
  net.sourceforge.czt.z.ast.SchemaType createSchemaType( net.sourceforge.czt.z.ast.Signature  signature);

  /**
   * Creates an instance of {@link OutStroke}.
   *
   * @return the new instance of OutStroke.
   */
  net.sourceforge.czt.z.ast.OutStroke createOutStroke();

  /**
   * Creates an instance of {@link NumExpr}.
   *
   * @return the new instance of NumExpr.
   */
  net.sourceforge.czt.z.ast.NumExpr createNumExpr();

  /**
   * Creates an instance of {@link NumExpr} with the given children.
   *
   * @return the new instance of NumExpr.
   */
  net.sourceforge.czt.z.ast.NumExpr createNumExpr( net.sourceforge.czt.z.ast.Numeral  numeral);

  /**
   * Creates an instance of {@link ZExprList}.
   *
   * @return the new instance of ZExprList.
   */
  net.sourceforge.czt.z.ast.ZExprList createZExprList();

  /**
   * Creates an instance of {@link ZExprList} with the given children.
   *
   * @return the new instance of ZExprList.
   */
  net.sourceforge.czt.z.ast.ZExprList createZExprList(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link ExistsExpr}.
   *
   * @return the new instance of ExistsExpr.
   */
  net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr();

  /**
   * Creates an instance of {@link ExistsExpr} with the given children.
   *
   * @return the new instance of ExistsExpr.
   */
  net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ZSect}.
   *
   * @return the new instance of ZSect.
   */
  net.sourceforge.czt.z.ast.ZSect createZSect();

  /**
   * Creates an instance of {@link ZSect} with the given children.
   *
   * @return the new instance of ZSect.
   */
  net.sourceforge.czt.z.ast.ZSect createZSect( String  name,java.util.List<? extends net.sourceforge.czt.z.ast.Parent>
 parent, net.sourceforge.czt.z.ast.ParaList  paraList);

  /**
   * Creates an instance of {@link LetExpr}.
   *
   * @return the new instance of LetExpr.
   */
  net.sourceforge.czt.z.ast.LetExpr createLetExpr();

  /**
   * Creates an instance of {@link LetExpr} with the given children.
   *
   * @return the new instance of LetExpr.
   */
  net.sourceforge.czt.z.ast.LetExpr createLetExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ProdType}.
   *
   * @return the new instance of ProdType.
   */
  net.sourceforge.czt.z.ast.ProdType createProdType();

  /**
   * Creates an instance of {@link ProdType} with the given children.
   *
   * @return the new instance of ProdType.
   */
  net.sourceforge.czt.z.ast.ProdType createProdType(java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type);

  /**
   * Creates an instance of {@link LambdaExpr}.
   *
   * @return the new instance of LambdaExpr.
   */
  net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr();

  /**
   * Creates an instance of {@link LambdaExpr} with the given children.
   *
   * @return the new instance of LambdaExpr.
   */
  net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link AndPred}.
   *
   * @return the new instance of AndPred.
   */
  net.sourceforge.czt.z.ast.AndPred createAndPred();

  /**
   * Creates an instance of {@link AndPred} with the given children.
   *
   * @return the new instance of AndPred.
   */
  net.sourceforge.czt.z.ast.AndPred createAndPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred,net.sourceforge.czt.z.ast.And
 and);

  /**
   * Creates an instance of {@link ExistsPred}.
   *
   * @return the new instance of ExistsPred.
   */
  net.sourceforge.czt.z.ast.ExistsPred createExistsPred();

  /**
   * Creates an instance of {@link ExistsPred} with the given children.
   *
   * @return the new instance of ExistsPred.
   */
  net.sourceforge.czt.z.ast.ExistsPred createExistsPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link FreePara}.
   *
   * @return the new instance of FreePara.
   */
  net.sourceforge.czt.z.ast.FreePara createFreePara();

  /**
   * Creates an instance of {@link FreePara} with the given children.
   *
   * @return the new instance of FreePara.
   */
  net.sourceforge.czt.z.ast.FreePara createFreePara( net.sourceforge.czt.z.ast.FreetypeList  freetypeList);

  /**
   * Creates an instance of {@link OrExpr}.
   *
   * @return the new instance of OrExpr.
   */
  net.sourceforge.czt.z.ast.OrExpr createOrExpr();

  /**
   * Creates an instance of {@link OrExpr} with the given children.
   *
   * @return the new instance of OrExpr.
   */
  net.sourceforge.czt.z.ast.OrExpr createOrExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link TupleExpr}.
   *
   * @return the new instance of TupleExpr.
   */
  net.sourceforge.czt.z.ast.TupleExpr createTupleExpr();

  /**
   * Creates an instance of {@link TupleExpr} with the given children.
   *
   * @return the new instance of TupleExpr.
   */
  net.sourceforge.czt.z.ast.TupleExpr createTupleExpr( net.sourceforge.czt.z.ast.ExprList  exprList);

  /**
   * Creates an instance of {@link PowerExpr}.
   *
   * @return the new instance of PowerExpr.
   */
  net.sourceforge.czt.z.ast.PowerExpr createPowerExpr();

  /**
   * Creates an instance of {@link PowerExpr} with the given children.
   *
   * @return the new instance of PowerExpr.
   */
  net.sourceforge.czt.z.ast.PowerExpr createPowerExpr( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ConstDecl}.
   *
   * @return the new instance of ConstDecl.
   */
  net.sourceforge.czt.z.ast.ConstDecl createConstDecl();

  /**
   * Creates an instance of {@link ConstDecl} with the given children.
   *
   * @return the new instance of ConstDecl.
   */
  net.sourceforge.czt.z.ast.ConstDecl createConstDecl( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ZParaList}.
   *
   * @return the new instance of ZParaList.
   */
  net.sourceforge.czt.z.ast.ZParaList createZParaList();

  /**
   * Creates an instance of {@link ZParaList} with the given children.
   *
   * @return the new instance of ZParaList.
   */
  net.sourceforge.czt.z.ast.ZParaList createZParaList(java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 para);

  /**
   * Creates an instance of {@link ThetaExpr}.
   *
   * @return the new instance of ThetaExpr.
   */
  net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr();

  /**
   * Creates an instance of {@link ThetaExpr} with the given children.
   *
   * @return the new instance of ThetaExpr.
   */
  net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.StrokeList  strokeList);

  /**
   * Creates an instance of {@link Operator}.
   *
   * @return the new instance of Operator.
   */
  net.sourceforge.czt.z.ast.Operator createOperator();

  /**
   * Creates an instance of {@link Operator} with the given children.
   *
   * @return the new instance of Operator.
   */
  net.sourceforge.czt.z.ast.Operator createOperator( String  word);

  /**
   * Creates an instance of {@link Parent}.
   *
   * @return the new instance of Parent.
   */
  net.sourceforge.czt.z.ast.Parent createParent();

  /**
   * Creates an instance of {@link Parent} with the given children.
   *
   * @return the new instance of Parent.
   */
  net.sourceforge.czt.z.ast.Parent createParent( String  word);

  /**
   * Creates an instance of {@link NegExpr}.
   *
   * @return the new instance of NegExpr.
   */
  net.sourceforge.czt.z.ast.NegExpr createNegExpr();

  /**
   * Creates an instance of {@link NegExpr} with the given children.
   *
   * @return the new instance of NegExpr.
   */
  net.sourceforge.czt.z.ast.NegExpr createNegExpr( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link MemPred}.
   *
   * @return the new instance of MemPred.
   */
  net.sourceforge.czt.z.ast.MemPred createMemPred();

  /**
   * Creates an instance of {@link MemPred} with the given children.
   *
   * @return the new instance of MemPred.
   */
  net.sourceforge.czt.z.ast.MemPred createMemPred(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix);

  /**
   * Creates an instance of {@link CompExpr}.
   *
   * @return the new instance of CompExpr.
   */
  net.sourceforge.czt.z.ast.CompExpr createCompExpr();

  /**
   * Creates an instance of {@link CompExpr} with the given children.
   *
   * @return the new instance of CompExpr.
   */
  net.sourceforge.czt.z.ast.CompExpr createCompExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr);

  /**
   * Creates an instance of {@link ForallExpr}.
   *
   * @return the new instance of ForallExpr.
   */
  net.sourceforge.czt.z.ast.ForallExpr createForallExpr();

  /**
   * Creates an instance of {@link ForallExpr} with the given children.
   *
   * @return the new instance of ForallExpr.
   */
  net.sourceforge.czt.z.ast.ForallExpr createForallExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link SetExpr}.
   *
   * @return the new instance of SetExpr.
   */
  net.sourceforge.czt.z.ast.SetExpr createSetExpr();

  /**
   * Creates an instance of {@link SetExpr} with the given children.
   *
   * @return the new instance of SetExpr.
   */
  net.sourceforge.czt.z.ast.SetExpr createSetExpr( net.sourceforge.czt.z.ast.ExprList  exprList);

  /**
   * Creates an instance of {@link BindSelExpr}.
   *
   * @return the new instance of BindSelExpr.
   */
  net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr();

  /**
   * Creates an instance of {@link BindSelExpr} with the given children.
   *
   * @return the new instance of BindSelExpr.
   */
  net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Name  name);

  /**
   * Creates an instance of {@link Branch}.
   *
   * @return the new instance of Branch.
   */
  net.sourceforge.czt.z.ast.Branch createBranch();

  /**
   * Creates an instance of {@link Branch} with the given children.
   *
   * @return the new instance of Branch.
   */
  net.sourceforge.czt.z.ast.Branch createBranch( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link FalsePred}.
   *
   * @return the new instance of FalsePred.
   */
  net.sourceforge.czt.z.ast.FalsePred createFalsePred();

  /**
   * Creates an instance of {@link ZNameList}.
   *
   * @return the new instance of ZNameList.
   */
  net.sourceforge.czt.z.ast.ZNameList createZNameList();

  /**
   * Creates an instance of {@link ZNameList} with the given children.
   *
   * @return the new instance of ZNameList.
   */
  net.sourceforge.czt.z.ast.ZNameList createZNameList(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name);

  /**
   * Creates an instance of {@link RefExpr}.
   *
   * @return the new instance of RefExpr.
   */
  net.sourceforge.czt.z.ast.RefExpr createRefExpr();

  /**
   * Creates an instance of {@link RefExpr} with the given children.
   *
   * @return the new instance of RefExpr.
   */
  net.sourceforge.czt.z.ast.RefExpr createRefExpr( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList, Boolean  mixfix, Boolean  explicit);

  /**
   * Creates an instance of {@link GivenPara}.
   *
   * @return the new instance of GivenPara.
   */
  net.sourceforge.czt.z.ast.GivenPara createGivenPara();

  /**
   * Creates an instance of {@link GivenPara} with the given children.
   *
   * @return the new instance of GivenPara.
   */
  net.sourceforge.czt.z.ast.GivenPara createGivenPara( net.sourceforge.czt.z.ast.NameList  nameList);

  /**
   * Creates an instance of {@link NegPred}.
   *
   * @return the new instance of NegPred.
   */
  net.sourceforge.czt.z.ast.NegPred createNegPred();

  /**
   * Creates an instance of {@link NegPred} with the given children.
   *
   * @return the new instance of NegPred.
   */
  net.sourceforge.czt.z.ast.NegPred createNegPred( net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link GenParamType}.
   *
   * @return the new instance of GenParamType.
   */
  net.sourceforge.czt.z.ast.GenParamType createGenParamType();

  /**
   * Creates an instance of {@link GenParamType} with the given children.
   *
   * @return the new instance of GenParamType.
   */
  net.sourceforge.czt.z.ast.GenParamType createGenParamType( net.sourceforge.czt.z.ast.Name  name);

  /**
   * Creates an instance of {@link SectTypeEnvAnn}.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn();

  /**
   * Creates an instance of {@link SectTypeEnvAnn} with the given children.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn(java.util.List<? extends net.sourceforge.czt.z.ast.NameSectTypeTriple>
 nameSectTypeTriple);

  /**
   * Creates an instance of {@link Freetype}.
   *
   * @return the new instance of Freetype.
   */
  net.sourceforge.czt.z.ast.Freetype createFreetype();

  /**
   * Creates an instance of {@link Freetype} with the given children.
   *
   * @return the new instance of Freetype.
   */
  net.sourceforge.czt.z.ast.Freetype createFreetype( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.BranchList  branchList);

  /**
   * Creates an instance of {@link IffPred}.
   *
   * @return the new instance of IffPred.
   */
  net.sourceforge.czt.z.ast.IffPred createIffPred();

  /**
   * Creates an instance of {@link IffPred} with the given children.
   *
   * @return the new instance of IffPred.
   */
  net.sourceforge.czt.z.ast.IffPred createIffPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred);

  /**
   * Creates an instance of {@link ImpliesPred}.
   *
   * @return the new instance of ImpliesPred.
   */
  net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred();

  /**
   * Creates an instance of {@link ImpliesPred} with the given children.
   *
   * @return the new instance of ImpliesPred.
   */
  net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred);

  /**
   * Creates an instance of {@link Signature}.
   *
   * @return the new instance of Signature.
   */
  net.sourceforge.czt.z.ast.Signature createSignature();

  /**
   * Creates an instance of {@link Signature} with the given children.
   *
   * @return the new instance of Signature.
   */
  net.sourceforge.czt.z.ast.Signature createSignature(java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 nameTypePair);

  /**
   * Creates an instance of {@link NarrSect}.
   *
   * @return the new instance of NarrSect.
   */
  net.sourceforge.czt.z.ast.NarrSect createNarrSect();

  /**
   * Creates an instance of {@link NarrSect} with the given children.
   *
   * @return the new instance of NarrSect.
   */
  net.sourceforge.czt.z.ast.NarrSect createNarrSect( java.util.List<? extends Object>  content);

  /**
   * Creates an instance of {@link Spec}.
   *
   * @return the new instance of Spec.
   */
  net.sourceforge.czt.z.ast.Spec createSpec();

  /**
   * Creates an instance of {@link Spec} with the given children.
   *
   * @return the new instance of Spec.
   */
  net.sourceforge.czt.z.ast.Spec createSpec(java.util.List<? extends net.sourceforge.czt.z.ast.Sect>
 sect, String  version);

  /**
   * Creates an instance of {@link ProdExpr}.
   *
   * @return the new instance of ProdExpr.
   */
  net.sourceforge.czt.z.ast.ProdExpr createProdExpr();

  /**
   * Creates an instance of {@link ProdExpr} with the given children.
   *
   * @return the new instance of ProdExpr.
   */
  net.sourceforge.czt.z.ast.ProdExpr createProdExpr( net.sourceforge.czt.z.ast.ExprList  exprList);

  /**
   * Creates an instance of {@link ExprPred}.
   *
   * @return the new instance of ExprPred.
   */
  net.sourceforge.czt.z.ast.ExprPred createExprPred();

  /**
   * Creates an instance of {@link ExprPred} with the given children.
   *
   * @return the new instance of ExprPred.
   */
  net.sourceforge.czt.z.ast.ExprPred createExprPred( net.sourceforge.czt.z.ast.Expr  expr);

  /**
   * Creates an instance of {@link ZFreetypeList}.
   *
   * @return the new instance of ZFreetypeList.
   */
  net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList();

  /**
   * Creates an instance of {@link ZFreetypeList} with the given children.
   *
   * @return the new instance of ZFreetypeList.
   */
  net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList(java.util.List<? extends net.sourceforge.czt.z.ast.Freetype>
 freetype);

  /**
   * Creates an instance of {@link OrPred}.
   *
   * @return the new instance of OrPred.
   */
  net.sourceforge.czt.z.ast.OrPred createOrPred();

  /**
   * Creates an instance of {@link OrPred} with the given children.
   *
   * @return the new instance of OrPred.
   */
  net.sourceforge.czt.z.ast.OrPred createOrPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred);

}
