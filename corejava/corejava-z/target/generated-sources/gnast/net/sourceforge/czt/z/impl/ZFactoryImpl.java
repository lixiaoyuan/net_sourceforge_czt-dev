
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;


/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * <p>To use a differnt implementation for a particular interface
 * overwrite the corresponding object factory methods
 * returning an instance of your implementation instead.
 * If there are two factory methods for this class, it is sufficient to
 * overwrite the default factory method (the method without arguments)
 * since the factory method with arguments first calls the default
 * factory method and then uses setter methods to set the children.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public class ZFactoryImpl
  extends net.sourceforge.czt.base.impl.BaseFactory
  implements net.sourceforge.czt.z.ast.ZFactory
{
  protected ZFactoryImpl(net.sourceforge.czt.util.Visitor<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public ZFactoryImpl()
  {
    super(new net.sourceforge.czt.z.util.PrintVisitor());
  }

  public net.sourceforge.czt.z.ast.DecorExpr createDecorExpr()
  {
    net.sourceforge.czt.z.ast.DecorExpr zedObject = new net.sourceforge.czt.z.impl.DecorExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.DecorExpr createDecorExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Stroke  stroke)
  {
    net.sourceforge.czt.z.ast.DecorExpr zedObject = createDecorExpr();
    zedObject.setExpr(expr);
    zedObject.setStroke(stroke);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara()
  {
    net.sourceforge.czt.z.ast.UnparsedPara zedObject = new net.sourceforge.czt.z.impl.UnparsedParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara( java.util.List<? extends Object>  content)
  {
    net.sourceforge.czt.z.ast.UnparsedPara zedObject = createUnparsedPara();
    zedObject.setContent(content);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZSchText createZSchText()
  {
    net.sourceforge.czt.z.ast.ZSchText zedObject = new net.sourceforge.czt.z.impl.ZSchTextImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZSchText createZSchText( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.ZSchText zedObject = createZSchText();
    zedObject.setDeclList(declList);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair()
  {
    net.sourceforge.czt.z.ast.NewOldPair zedObject = new net.sourceforge.czt.z.impl.NewOldPairImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    net.sourceforge.czt.z.ast.NewOldPair zedObject = createNewOldPair();
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.VarDecl createVarDecl()
  {
    net.sourceforge.czt.z.ast.VarDecl zedObject = new net.sourceforge.czt.z.impl.VarDeclImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.VarDecl createVarDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.VarDecl zedObject = createVarDecl();
    zedObject.setNameList(nameList);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZName createZName()
  {
    net.sourceforge.czt.z.ast.ZName zedObject = new net.sourceforge.czt.z.impl.ZNameImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZName createZName( String  word, net.sourceforge.czt.z.ast.StrokeList  strokeList, String  id)
  {
    net.sourceforge.czt.z.ast.ZName zedObject = createZName();
    zedObject.setWord(word);
    zedObject.setStrokeList(strokeList);
    zedObject.setId(id);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect()
  {
    net.sourceforge.czt.z.ast.UnparsedZSect zedObject = new net.sourceforge.czt.z.impl.UnparsedZSectImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect( java.util.List<? extends Object>  content)
  {
    net.sourceforge.czt.z.ast.UnparsedZSect zedObject = createUnparsedZSect();
    zedObject.setContent(content);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OptempPara createOptempPara()
  {
    net.sourceforge.czt.z.ast.OptempPara zedObject = new net.sourceforge.czt.z.impl.OptempParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OptempPara createOptempPara(java.util.List<? extends net.sourceforge.czt.z.ast.Oper>
 oper,net.sourceforge.czt.z.ast.Cat
 cat,net.sourceforge.czt.z.ast.Assoc
 assoc, java.math.BigInteger  prec)
  {
    net.sourceforge.czt.z.ast.OptempPara zedObject = createOptempPara();
    if (oper != null) {
      zedObject.getOper().addAll(oper);
    }
    zedObject.setCat(cat);
    zedObject.setAssoc(assoc);
    zedObject.setPrec(prec);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.InclDecl createInclDecl()
  {
    net.sourceforge.czt.z.ast.InclDecl zedObject = new net.sourceforge.czt.z.impl.InclDeclImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.InclDecl createInclDecl( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.InclDecl zedObject = createInclDecl();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NarrPara createNarrPara()
  {
    net.sourceforge.czt.z.ast.NarrPara zedObject = new net.sourceforge.czt.z.impl.NarrParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NarrPara createNarrPara( java.util.List<? extends Object>  content)
  {
    net.sourceforge.czt.z.ast.NarrPara zedObject = createNarrPara();
    zedObject.setContent(content);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr()
  {
    net.sourceforge.czt.z.ast.TupleSelExpr zedObject = new net.sourceforge.czt.z.impl.TupleSelExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    net.sourceforge.czt.z.ast.TupleSelExpr zedObject = createTupleSelExpr();
    zedObject.setExpr(expr);
    zedObject.setNumeral(numeral);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.BindExpr createBindExpr()
  {
    net.sourceforge.czt.z.ast.BindExpr zedObject = new net.sourceforge.czt.z.impl.BindExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.BindExpr createBindExpr( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    net.sourceforge.czt.z.ast.BindExpr zedObject = createBindExpr();
    zedObject.setDeclList(declList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.MuExpr createMuExpr()
  {
    net.sourceforge.czt.z.ast.MuExpr zedObject = new net.sourceforge.czt.z.impl.MuExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.MuExpr createMuExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.MuExpr zedObject = createMuExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TruePred createTruePred()
  {
    net.sourceforge.czt.z.ast.TruePred zedObject = new net.sourceforge.czt.z.impl.TruePredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.IffExpr createIffExpr()
  {
    net.sourceforge.czt.z.ast.IffExpr zedObject = new net.sourceforge.czt.z.impl.IffExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.IffExpr createIffExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.IffExpr zedObject = createIffExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn()
  {
    net.sourceforge.czt.z.ast.SignatureAnn zedObject = new net.sourceforge.czt.z.impl.SignatureAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn( net.sourceforge.czt.z.ast.Signature  signature)
  {
    net.sourceforge.czt.z.ast.SignatureAnn zedObject = createSignatureAnn();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GivenType createGivenType()
  {
    net.sourceforge.czt.z.ast.GivenType zedObject = new net.sourceforge.czt.z.impl.GivenTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GivenType createGivenType( net.sourceforge.czt.z.ast.Name  name)
  {
    net.sourceforge.czt.z.ast.GivenType zedObject = createGivenType();
    zedObject.setName(name);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PreExpr createPreExpr()
  {
    net.sourceforge.czt.z.ast.PreExpr zedObject = new net.sourceforge.czt.z.impl.PreExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PreExpr createPreExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.PreExpr zedObject = createPreExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr()
  {
    net.sourceforge.czt.z.ast.SetCompExpr zedObject = new net.sourceforge.czt.z.impl.SetCompExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.SetCompExpr zedObject = createSetCompExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr()
  {
    net.sourceforge.czt.z.ast.ApplExpr zedObject = new net.sourceforge.czt.z.impl.ApplExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    net.sourceforge.czt.z.ast.ApplExpr zedObject = createApplExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    zedObject.setMixfix(mixfix);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NumStroke createNumStroke()
  {
    net.sourceforge.czt.z.ast.NumStroke zedObject = new net.sourceforge.czt.z.impl.NumStrokeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NumStroke createNumStroke( net.sourceforge.czt.base.ast.Digit  digit)
  {
    net.sourceforge.czt.z.ast.NumStroke zedObject = createNumStroke();
    zedObject.setDigit(digit);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ConjPara createConjPara()
  {
    net.sourceforge.czt.z.ast.ConjPara zedObject = new net.sourceforge.czt.z.impl.ConjParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ConjPara createConjPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.ConjPara zedObject = createConjPara();
    zedObject.setNameList(nameList);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Directive createDirective()
  {
    net.sourceforge.czt.z.ast.Directive zedObject = new net.sourceforge.czt.z.impl.DirectiveImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Directive createDirective( String  command, String  unicode,net.sourceforge.czt.z.ast.DirectiveType
 directiveType)
  {
    net.sourceforge.czt.z.ast.Directive zedObject = createDirective();
    zedObject.setCommand(command);
    zedObject.setUnicode(unicode);
    zedObject.setDirectiveType(directiveType);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ForallPred createForallPred()
  {
    net.sourceforge.czt.z.ast.ForallPred zedObject = new net.sourceforge.czt.z.impl.ForallPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ForallPred createForallPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.ForallPred zedObject = createForallPred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral()
  {
    net.sourceforge.czt.z.ast.ZNumeral zedObject = new net.sourceforge.czt.z.impl.ZNumeralImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral( java.math.BigInteger  value)
  {
    net.sourceforge.czt.z.ast.ZNumeral zedObject = createZNumeral();
    zedObject.setValue(value);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred()
  {
    net.sourceforge.czt.z.ast.Exists1Pred zedObject = new net.sourceforge.czt.z.impl.Exists1PredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.Exists1Pred zedObject = createExists1Pred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Operand createOperand()
  {
    net.sourceforge.czt.z.ast.Operand zedObject = new net.sourceforge.czt.z.impl.OperandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Operand createOperand( Boolean  list)
  {
    net.sourceforge.czt.z.ast.Operand zedObject = createOperand();
    zedObject.setList(list);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.RenameExpr createRenameExpr()
  {
    net.sourceforge.czt.z.ast.RenameExpr zedObject = new net.sourceforge.czt.z.impl.RenameExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.RenameExpr createRenameExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    net.sourceforge.czt.z.ast.RenameExpr zedObject = createRenameExpr();
    zedObject.setExpr(expr);
    zedObject.setRenameList(renameList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.CondExpr createCondExpr()
  {
    net.sourceforge.czt.z.ast.CondExpr zedObject = new net.sourceforge.czt.z.impl.CondExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.CondExpr createCondExpr( net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.CondExpr zedObject = createCondExpr();
    zedObject.setPred(pred);
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NextStroke createNextStroke()
  {
    net.sourceforge.czt.z.ast.NextStroke zedObject = new net.sourceforge.czt.z.impl.NextStrokeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr()
  {
    net.sourceforge.czt.z.ast.ProjExpr zedObject = new net.sourceforge.czt.z.impl.ProjExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.ProjExpr zedObject = createProjExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZDeclList createZDeclList()
  {
    net.sourceforge.czt.z.ast.ZDeclList zedObject = new net.sourceforge.czt.z.impl.ZDeclListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZDeclList createZDeclList(java.util.List<? extends net.sourceforge.czt.z.ast.Decl>
 decl)
  {
    net.sourceforge.czt.z.ast.ZDeclList zedObject = createZDeclList();
    if (decl != null) {
      zedObject.getDecl().addAll(decl);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn()
  {
    net.sourceforge.czt.z.ast.LocAnn zedObject = new net.sourceforge.czt.z.impl.LocAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn( String  loc, java.math.BigInteger  line, java.math.BigInteger  col, java.math.BigInteger  start, java.math.BigInteger  length)
  {
    net.sourceforge.czt.z.ast.LocAnn zedObject = createLocAnn();
    zedObject.setLoc(loc);
    zedObject.setLine(line);
    zedObject.setCol(col);
    zedObject.setStart(start);
    zedObject.setLength(length);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.HideExpr createHideExpr()
  {
    net.sourceforge.czt.z.ast.HideExpr zedObject = new net.sourceforge.czt.z.impl.HideExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.HideExpr createHideExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.NameList  nameList)
  {
    net.sourceforge.czt.z.ast.HideExpr zedObject = createHideExpr();
    zedObject.setExpr(expr);
    zedObject.setNameList(nameList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SchExpr createSchExpr()
  {
    net.sourceforge.czt.z.ast.SchExpr zedObject = new net.sourceforge.czt.z.impl.SchExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SchExpr createSchExpr( net.sourceforge.czt.z.ast.SchText  schText)
  {
    net.sourceforge.czt.z.ast.SchExpr zedObject = createSchExpr();
    zedObject.setSchText(schText);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GenericType createGenericType()
  {
    net.sourceforge.czt.z.ast.GenericType zedObject = new net.sourceforge.czt.z.impl.GenericTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GenericType createGenericType( net.sourceforge.czt.z.ast.NameList  nameList,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    net.sourceforge.czt.z.ast.GenericType zedObject = createGenericType();
    zedObject.setNameList(nameList);
    if (type != null) {
      zedObject.getType().addAll(type);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple()
  {
    net.sourceforge.czt.z.ast.NameSectTypeTriple zedObject = new net.sourceforge.czt.z.impl.NameSectTypeTripleImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple( net.sourceforge.czt.z.ast.Name  name, String  sect, net.sourceforge.czt.z.ast.Type  type)
  {
    net.sourceforge.czt.z.ast.NameSectTypeTriple zedObject = createNameSectTypeTriple();
    zedObject.setName(name);
    zedObject.setSect(sect);
    zedObject.setType(type);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr()
  {
    net.sourceforge.czt.z.ast.Exists1Expr zedObject = new net.sourceforge.czt.z.impl.Exists1ExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.Exists1Expr zedObject = createExists1Expr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara()
  {
    net.sourceforge.czt.z.ast.LatexMarkupPara zedObject = new net.sourceforge.czt.z.impl.LatexMarkupParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara(java.util.List<? extends net.sourceforge.czt.z.ast.Directive>
 directive)
  {
    net.sourceforge.czt.z.ast.LatexMarkupPara zedObject = createLatexMarkupPara();
    if (directive != null) {
      zedObject.getDirective().addAll(directive);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZRenameList createZRenameList()
  {
    net.sourceforge.czt.z.ast.ZRenameList zedObject = new net.sourceforge.czt.z.impl.ZRenameListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZRenameList createZRenameList(java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair)
  {
    net.sourceforge.czt.z.ast.ZRenameList zedObject = createZRenameList();
    if (newOldPair != null) {
      zedObject.getNewOldPair().addAll(newOldPair);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NameTypePair createNameTypePair()
  {
    net.sourceforge.czt.z.ast.NameTypePair zedObject = new net.sourceforge.czt.z.impl.NameTypePairImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NameTypePair createNameTypePair( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Type  type)
  {
    net.sourceforge.czt.z.ast.NameTypePair zedObject = createNameTypePair();
    zedObject.setName(name);
    zedObject.setType(type);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList()
  {
    net.sourceforge.czt.z.ast.ZStrokeList zedObject = new net.sourceforge.czt.z.impl.ZStrokeListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList(java.util.List<? extends net.sourceforge.czt.z.ast.Stroke>
 stroke)
  {
    net.sourceforge.czt.z.ast.ZStrokeList zedObject = createZStrokeList();
    if (stroke != null) {
      zedObject.getStroke().addAll(stroke);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PowerType createPowerType()
  {
    net.sourceforge.czt.z.ast.PowerType zedObject = new net.sourceforge.czt.z.impl.PowerTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PowerType createPowerType( net.sourceforge.czt.z.ast.Type2  type)
  {
    net.sourceforge.czt.z.ast.PowerType zedObject = createPowerType();
    zedObject.setType(type);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ParenAnn createParenAnn()
  {
    net.sourceforge.czt.z.ast.ParenAnn zedObject = new net.sourceforge.czt.z.impl.ParenAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr()
  {
    net.sourceforge.czt.z.ast.PipeExpr zedObject = new net.sourceforge.czt.z.impl.PipeExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.PipeExpr zedObject = createPipeExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TypeAnn createTypeAnn()
  {
    net.sourceforge.czt.z.ast.TypeAnn zedObject = new net.sourceforge.czt.z.impl.TypeAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TypeAnn createTypeAnn( net.sourceforge.czt.z.ast.Type  type)
  {
    net.sourceforge.czt.z.ast.TypeAnn zedObject = createTypeAnn();
    zedObject.setType(type);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AxPara createAxPara()
  {
    net.sourceforge.czt.z.ast.AxPara zedObject = new net.sourceforge.czt.z.impl.AxParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AxPara createAxPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.z.ast.Box
 box)
  {
    net.sourceforge.czt.z.ast.AxPara zedObject = createAxPara();
    zedObject.setNameList(nameList);
    zedObject.setSchText(schText);
    zedObject.setBox(box);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.InStroke createInStroke()
  {
    net.sourceforge.czt.z.ast.InStroke zedObject = new net.sourceforge.czt.z.impl.InStrokeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AndExpr createAndExpr()
  {
    net.sourceforge.czt.z.ast.AndExpr zedObject = new net.sourceforge.czt.z.impl.AndExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AndExpr createAndExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.AndExpr zedObject = createAndExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr()
  {
    net.sourceforge.czt.z.ast.ImpliesExpr zedObject = new net.sourceforge.czt.z.impl.ImpliesExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.ImpliesExpr zedObject = createImpliesExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZBranchList createZBranchList()
  {
    net.sourceforge.czt.z.ast.ZBranchList zedObject = new net.sourceforge.czt.z.impl.ZBranchListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZBranchList createZBranchList(java.util.List<? extends net.sourceforge.czt.z.ast.Branch>
 branch)
  {
    net.sourceforge.czt.z.ast.ZBranchList zedObject = createZBranchList();
    if (branch != null) {
      zedObject.getBranch().addAll(branch);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SchemaType createSchemaType()
  {
    net.sourceforge.czt.z.ast.SchemaType zedObject = new net.sourceforge.czt.z.impl.SchemaTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SchemaType createSchemaType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    net.sourceforge.czt.z.ast.SchemaType zedObject = createSchemaType();
    zedObject.setSignature(signature);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OutStroke createOutStroke()
  {
    net.sourceforge.czt.z.ast.OutStroke zedObject = new net.sourceforge.czt.z.impl.OutStrokeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NumExpr createNumExpr()
  {
    net.sourceforge.czt.z.ast.NumExpr zedObject = new net.sourceforge.czt.z.impl.NumExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NumExpr createNumExpr( net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    net.sourceforge.czt.z.ast.NumExpr zedObject = createNumExpr();
    zedObject.setNumeral(numeral);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZExprList createZExprList()
  {
    net.sourceforge.czt.z.ast.ZExprList zedObject = new net.sourceforge.czt.z.impl.ZExprListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZExprList createZExprList(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.ZExprList zedObject = createZExprList();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr()
  {
    net.sourceforge.czt.z.ast.ExistsExpr zedObject = new net.sourceforge.czt.z.impl.ExistsExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.ExistsExpr zedObject = createExistsExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZSect createZSect()
  {
    net.sourceforge.czt.z.ast.ZSect zedObject = new net.sourceforge.czt.z.impl.ZSectImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZSect createZSect( String  name,java.util.List<? extends net.sourceforge.czt.z.ast.Parent>
 parent, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    net.sourceforge.czt.z.ast.ZSect zedObject = createZSect();
    zedObject.setName(name);
    if (parent != null) {
      zedObject.getParent().addAll(parent);
    }
    zedObject.setParaList(paraList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LetExpr createLetExpr()
  {
    net.sourceforge.czt.z.ast.LetExpr zedObject = new net.sourceforge.czt.z.impl.LetExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LetExpr createLetExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.LetExpr zedObject = createLetExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProdType createProdType()
  {
    net.sourceforge.czt.z.ast.ProdType zedObject = new net.sourceforge.czt.z.impl.ProdTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProdType createProdType(java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    net.sourceforge.czt.z.ast.ProdType zedObject = createProdType();
    if (type != null) {
      zedObject.getType().addAll(type);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr()
  {
    net.sourceforge.czt.z.ast.LambdaExpr zedObject = new net.sourceforge.czt.z.impl.LambdaExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.LambdaExpr zedObject = createLambdaExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AndPred createAndPred()
  {
    net.sourceforge.czt.z.ast.AndPred zedObject = new net.sourceforge.czt.z.impl.AndPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.AndPred createAndPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred,net.sourceforge.czt.z.ast.And
 and)
  {
    net.sourceforge.czt.z.ast.AndPred zedObject = createAndPred();
    if (pred != null) {
      zedObject.getPred().addAll(pred);
    }
    zedObject.setAnd(and);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExistsPred createExistsPred()
  {
    net.sourceforge.czt.z.ast.ExistsPred zedObject = new net.sourceforge.czt.z.impl.ExistsPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExistsPred createExistsPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.ExistsPred zedObject = createExistsPred();
    zedObject.setSchText(schText);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.FreePara createFreePara()
  {
    net.sourceforge.czt.z.ast.FreePara zedObject = new net.sourceforge.czt.z.impl.FreeParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.FreePara createFreePara( net.sourceforge.czt.z.ast.FreetypeList  freetypeList)
  {
    net.sourceforge.czt.z.ast.FreePara zedObject = createFreePara();
    zedObject.setFreetypeList(freetypeList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OrExpr createOrExpr()
  {
    net.sourceforge.czt.z.ast.OrExpr zedObject = new net.sourceforge.czt.z.impl.OrExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OrExpr createOrExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.OrExpr zedObject = createOrExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr()
  {
    net.sourceforge.czt.z.ast.TupleExpr zedObject = new net.sourceforge.czt.z.impl.TupleExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    net.sourceforge.czt.z.ast.TupleExpr zedObject = createTupleExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PowerExpr createPowerExpr()
  {
    net.sourceforge.czt.z.ast.PowerExpr zedObject = new net.sourceforge.czt.z.impl.PowerExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.PowerExpr createPowerExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.PowerExpr zedObject = createPowerExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ConstDecl createConstDecl()
  {
    net.sourceforge.czt.z.ast.ConstDecl zedObject = new net.sourceforge.czt.z.impl.ConstDeclImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ConstDecl createConstDecl( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.ConstDecl zedObject = createConstDecl();
    zedObject.setName(name);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZParaList createZParaList()
  {
    net.sourceforge.czt.z.ast.ZParaList zedObject = new net.sourceforge.czt.z.impl.ZParaListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZParaList createZParaList(java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 para)
  {
    net.sourceforge.czt.z.ast.ZParaList zedObject = createZParaList();
    if (para != null) {
      zedObject.getPara().addAll(para);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr()
  {
    net.sourceforge.czt.z.ast.ThetaExpr zedObject = new net.sourceforge.czt.z.impl.ThetaExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.StrokeList  strokeList)
  {
    net.sourceforge.czt.z.ast.ThetaExpr zedObject = createThetaExpr();
    zedObject.setExpr(expr);
    zedObject.setStrokeList(strokeList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Operator createOperator()
  {
    net.sourceforge.czt.z.ast.Operator zedObject = new net.sourceforge.czt.z.impl.OperatorImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Operator createOperator( String  word)
  {
    net.sourceforge.czt.z.ast.Operator zedObject = createOperator();
    zedObject.setWord(word);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Parent createParent()
  {
    net.sourceforge.czt.z.ast.Parent zedObject = new net.sourceforge.czt.z.impl.ParentImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Parent createParent( String  word)
  {
    net.sourceforge.czt.z.ast.Parent zedObject = createParent();
    zedObject.setWord(word);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NegExpr createNegExpr()
  {
    net.sourceforge.czt.z.ast.NegExpr zedObject = new net.sourceforge.czt.z.impl.NegExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NegExpr createNegExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.NegExpr zedObject = createNegExpr();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.MemPred createMemPred()
  {
    net.sourceforge.czt.z.ast.MemPred zedObject = new net.sourceforge.czt.z.impl.MemPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.MemPred createMemPred(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    net.sourceforge.czt.z.ast.MemPred zedObject = createMemPred();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    zedObject.setMixfix(mixfix);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.CompExpr createCompExpr()
  {
    net.sourceforge.czt.z.ast.CompExpr zedObject = new net.sourceforge.czt.z.impl.CompExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.CompExpr createCompExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    net.sourceforge.czt.z.ast.CompExpr zedObject = createCompExpr();
    if (expr != null) {
      zedObject.getExpr().addAll(expr);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ForallExpr createForallExpr()
  {
    net.sourceforge.czt.z.ast.ForallExpr zedObject = new net.sourceforge.czt.z.impl.ForallExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ForallExpr createForallExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.ForallExpr zedObject = createForallExpr();
    zedObject.setSchText(schText);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SetExpr createSetExpr()
  {
    net.sourceforge.czt.z.ast.SetExpr zedObject = new net.sourceforge.czt.z.impl.SetExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SetExpr createSetExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    net.sourceforge.czt.z.ast.SetExpr zedObject = createSetExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr()
  {
    net.sourceforge.czt.z.ast.BindSelExpr zedObject = new net.sourceforge.czt.z.impl.BindSelExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Name  name)
  {
    net.sourceforge.czt.z.ast.BindSelExpr zedObject = createBindSelExpr();
    zedObject.setExpr(expr);
    zedObject.setName(name);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Branch createBranch()
  {
    net.sourceforge.czt.z.ast.Branch zedObject = new net.sourceforge.czt.z.impl.BranchImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Branch createBranch( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.Branch zedObject = createBranch();
    zedObject.setName(name);
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.FalsePred createFalsePred()
  {
    net.sourceforge.czt.z.ast.FalsePred zedObject = new net.sourceforge.czt.z.impl.FalsePredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZNameList createZNameList()
  {
    net.sourceforge.czt.z.ast.ZNameList zedObject = new net.sourceforge.czt.z.impl.ZNameListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZNameList createZNameList(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    net.sourceforge.czt.z.ast.ZNameList zedObject = createZNameList();
    if (name != null) {
      zedObject.getName().addAll(name);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.RefExpr createRefExpr()
  {
    net.sourceforge.czt.z.ast.RefExpr zedObject = new net.sourceforge.czt.z.impl.RefExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.RefExpr createRefExpr( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList, Boolean  mixfix, Boolean  explicit)
  {
    net.sourceforge.czt.z.ast.RefExpr zedObject = createRefExpr();
    zedObject.setName(name);
    zedObject.setExprList(exprList);
    zedObject.setMixfix(mixfix);
    zedObject.setExplicit(explicit);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GivenPara createGivenPara()
  {
    net.sourceforge.czt.z.ast.GivenPara zedObject = new net.sourceforge.czt.z.impl.GivenParaImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GivenPara createGivenPara( net.sourceforge.czt.z.ast.NameList  nameList)
  {
    net.sourceforge.czt.z.ast.GivenPara zedObject = createGivenPara();
    zedObject.setNameList(nameList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NegPred createNegPred()
  {
    net.sourceforge.czt.z.ast.NegPred zedObject = new net.sourceforge.czt.z.impl.NegPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NegPred createNegPred( net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.z.ast.NegPred zedObject = createNegPred();
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GenParamType createGenParamType()
  {
    net.sourceforge.czt.z.ast.GenParamType zedObject = new net.sourceforge.czt.z.impl.GenParamTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.GenParamType createGenParamType( net.sourceforge.czt.z.ast.Name  name)
  {
    net.sourceforge.czt.z.ast.GenParamType zedObject = createGenParamType();
    zedObject.setName(name);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn()
  {
    net.sourceforge.czt.z.ast.SectTypeEnvAnn zedObject = new net.sourceforge.czt.z.impl.SectTypeEnvAnnImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn(java.util.List<? extends net.sourceforge.czt.z.ast.NameSectTypeTriple>
 nameSectTypeTriple)
  {
    net.sourceforge.czt.z.ast.SectTypeEnvAnn zedObject = createSectTypeEnvAnn();
    if (nameSectTypeTriple != null) {
      zedObject.getNameSectTypeTriple().addAll(nameSectTypeTriple);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Freetype createFreetype()
  {
    net.sourceforge.czt.z.ast.Freetype zedObject = new net.sourceforge.czt.z.impl.FreetypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Freetype createFreetype( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.BranchList  branchList)
  {
    net.sourceforge.czt.z.ast.Freetype zedObject = createFreetype();
    zedObject.setName(name);
    zedObject.setBranchList(branchList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.IffPred createIffPred()
  {
    net.sourceforge.czt.z.ast.IffPred zedObject = new net.sourceforge.czt.z.impl.IffPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.IffPred createIffPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    net.sourceforge.czt.z.ast.IffPred zedObject = createIffPred();
    if (pred != null) {
      zedObject.getPred().addAll(pred);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred()
  {
    net.sourceforge.czt.z.ast.ImpliesPred zedObject = new net.sourceforge.czt.z.impl.ImpliesPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    net.sourceforge.czt.z.ast.ImpliesPred zedObject = createImpliesPred();
    if (pred != null) {
      zedObject.getPred().addAll(pred);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Signature createSignature()
  {
    net.sourceforge.czt.z.ast.Signature zedObject = new net.sourceforge.czt.z.impl.SignatureImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Signature createSignature(java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 nameTypePair)
  {
    net.sourceforge.czt.z.ast.Signature zedObject = createSignature();
    if (nameTypePair != null) {
      zedObject.getNameTypePair().addAll(nameTypePair);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NarrSect createNarrSect()
  {
    net.sourceforge.czt.z.ast.NarrSect zedObject = new net.sourceforge.czt.z.impl.NarrSectImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.NarrSect createNarrSect( java.util.List<? extends Object>  content)
  {
    net.sourceforge.czt.z.ast.NarrSect zedObject = createNarrSect();
    zedObject.setContent(content);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Spec createSpec()
  {
    net.sourceforge.czt.z.ast.Spec zedObject = new net.sourceforge.czt.z.impl.SpecImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.Spec createSpec(java.util.List<? extends net.sourceforge.czt.z.ast.Sect>
 sect, String  version)
  {
    net.sourceforge.czt.z.ast.Spec zedObject = createSpec();
    if (sect != null) {
      zedObject.getSect().addAll(sect);
    }
    zedObject.setVersion(version);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr()
  {
    net.sourceforge.czt.z.ast.ProdExpr zedObject = new net.sourceforge.czt.z.impl.ProdExprImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    net.sourceforge.czt.z.ast.ProdExpr zedObject = createProdExpr();
    zedObject.setExprList(exprList);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExprPred createExprPred()
  {
    net.sourceforge.czt.z.ast.ExprPred zedObject = new net.sourceforge.czt.z.impl.ExprPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ExprPred createExprPred( net.sourceforge.czt.z.ast.Expr  expr)
  {
    net.sourceforge.czt.z.ast.ExprPred zedObject = createExprPred();
    zedObject.setExpr(expr);
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList()
  {
    net.sourceforge.czt.z.ast.ZFreetypeList zedObject = new net.sourceforge.czt.z.impl.ZFreetypeListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList(java.util.List<? extends net.sourceforge.czt.z.ast.Freetype>
 freetype)
  {
    net.sourceforge.czt.z.ast.ZFreetypeList zedObject = createZFreetypeList();
    if (freetype != null) {
      zedObject.getFreetype().addAll(freetype);
    }
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OrPred createOrPred()
  {
    net.sourceforge.czt.z.ast.OrPred zedObject = new net.sourceforge.czt.z.impl.OrPredImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.z.ast.OrPred createOrPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    net.sourceforge.czt.z.ast.OrPred zedObject = createOrPred();
    if (pred != null) {
      zedObject.getPred().addAll(pred);
    }
    return zedObject;
  }

}
