
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.z.ast.LocAnn}.
 *
 * @author GnAST version 1.6-cdh
 */
public class LocAnnImpl
extends 		 		net.sourceforge.czt.z.impl.AnnImpl
 	  implements net.sourceforge.czt.z.ast.LocAnn
{





  /**
   * static instance count for LocAnnImpl
   */
   private static long instanceCount_ = 0;
   
  /**
   * public attribute determining whether to log to the 
   * standard output information about who is creating 
   * this instance of LocAnnImpl (e.g., ic >= sl)
   */
  //private static final long startLoggingFrom_ = Long.MAX_VALUE;
   
    // cannot be final because JokerCommunicationImpl extends CommunicationImpl
  public /*final*/ static boolean countingFinaliser() { return false; }
  public /*final*/ static long instancesFinalised() 
  { 
    throw new UnsupportedOperationException("GnAST AST finalisers have not been set"); 
  }
  
  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.z.ast.ZFactory object factory}.
   */
  protected LocAnnImpl()
  {
    this(null);
  }

  protected LocAnnImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
    countInstance();
  }
  
  private static synchronized void countInstance()
  {
	  instanceCount_++;
  }
  
  /**
   * Compares the specified object with this LocAnnImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) LocAnnImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //LocAnnImpl object = ((LocAnnImpl) obj);
        if (loc_ != null) {
          if (!loc_.equals(((LocAnnImpl) obj).loc_)) {
            return false;
          }
        }
        else {
          if (((LocAnnImpl) obj).loc_ != null) {
            return false;
          }
        }
        if (line_ != null) {
          if (!line_.equals(((LocAnnImpl) obj).line_)) {
            return false;
          }
        }
        else {
          if (((LocAnnImpl) obj).line_ != null) {
            return false;
          }
        }
        if (col_ != null) {
          if (!col_.equals(((LocAnnImpl) obj).col_)) {
            return false;
          }
        }
        else {
          if (((LocAnnImpl) obj).col_ != null) {
            return false;
          }
        }
        if (start_ != null) {
          if (!start_.equals(((LocAnnImpl) obj).start_)) {
            return false;
          }
        }
        else {
          if (((LocAnnImpl) obj).start_ != null) {
            return false;
          }
        }
        if (length_ != null) {
          if (!length_.equals(((LocAnnImpl) obj).length_)) {
            return false;
          }
        }
        else {
          if (((LocAnnImpl) obj).length_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this LocAnnImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "LocAnnImpl".hashCode();
    if (loc_ != null) {
      hashCode += 31 * loc_.hashCode();
    }
    if (line_ != null) {
      hashCode += 31 * line_.hashCode();
    }
    if (col_ != null) {
      hashCode += 31 * col_.hashCode();
    }
    if (start_ != null) {
      hashCode += 31 * start_.hashCode();
    }
    if (length_ != null) {
      hashCode += 31 * length_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.z.visitor.LocAnnVisitor) {
      net.sourceforge.czt.z.visitor.LocAnnVisitor<R> visitor = 
      	  (net.sourceforge.czt.z.visitor.LocAnnVisitor<R>) v;
      return visitor.visitLocAnn(this);
    }
    return super.accept(v);
  }

  /**
   * Returns a new object of this class.
   */
  public LocAnnImpl create(Object[] args)
  {
    LocAnnImpl zedObject = null;
    try {
	  	  								  	String loc = (
													String) args[0];
	  	  	  								  	java.math.BigInteger line = (
													java.math.BigInteger) args[1];
	  	  	  								  	java.math.BigInteger col = (
													java.math.BigInteger) args[2];
	  	  	  								  	java.math.BigInteger start = (
													java.math.BigInteger) args[3];
	  	  	  								  	java.math.BigInteger length = (
													java.math.BigInteger) args[4];
	        zedObject = new LocAnnImpl(getFactory());
      zedObject.setLoc(loc);
      zedObject.setLine(line);
      zedObject.setCol(col);
      zedObject.setStart(start);
      zedObject.setLength(length);
    }
    catch (IndexOutOfBoundsException e) {
      throw new IllegalArgumentException(e);
    }
    catch (ClassCastException e) {
      throw new IllegalArgumentException(e);
    }
    return zedObject;
  }

  public Object[] getChildren()
  {
    Object[] erg = { getLoc(), getLine(), getCol(), getStart(), getLength() };
    return erg;
  }
  
  /** Only concrete classes get the instance count method visible */
  // JokerCommunication in circuspatt extends CommunicationImpl which is not abstract? weird...
  public static /*final*/ long instanceCount()
  {
    return instanceCount_;
  }


  private
            					String
  loc_;

  public 
					String
  getLoc()
  {
    return loc_;
  }

  public void setLoc(
					String
	loc)
  {
                          loc_ = loc;
    }


  private
            					java.math.BigInteger
  line_;

  public 
					java.math.BigInteger
  getLine()
  {
    return line_;
  }

  public void setLine(
					java.math.BigInteger
	line)
  {
                          line_ = line;
    }


  private
            					java.math.BigInteger
  col_;

  public 
					java.math.BigInteger
  getCol()
  {
    return col_;
  }

  public void setCol(
					java.math.BigInteger
	col)
  {
                          col_ = col;
    }


  private
            					java.math.BigInteger
  start_;

  public 
					java.math.BigInteger
  getStart()
  {
    return start_;
  }

  public void setStart(
					java.math.BigInteger
	start)
  {
                          start_ = start;
    }


  private
            					java.math.BigInteger
  length_;

  public 
					java.math.BigInteger
  getLength()
  {
    return length_;
  }

  public void setLength(
					java.math.BigInteger
	length)
  {
                          length_ = length;
    }

  public java.math.BigInteger getEnd()
  {
    if (getStart() != null && getLength() != null) {
      return getStart().add(getLength());
    }
    return null;
  }
}
