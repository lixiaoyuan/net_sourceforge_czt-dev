
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  implements net.sourceforge.czt.z.visitor.ZVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>,
             net.sourceforge.czt.base.visitor.TermVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.z.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDecorExpr(net.sourceforge.czt.z.ast.DecorExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDecorExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.DecorExpr jaxbObject = objectFactory_.createDecorExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Stroke
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStroke() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStroke();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke>)term.accept(this);
        jaxbObject.setStroke(newValue);
      }
      getLogger().exiting(getClassName(), "visitDecorExpr", jaxbObject);
      return objectFactory_.createDecorExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DecorExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitUnparsedPara(net.sourceforge.czt.z.ast.UnparsedPara zedObject)
  {
    getLogger().entering(getClassName(), "visitUnparsedPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.UnparsedPara jaxbObject = objectFactory_.createUnparsedPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Content
// prop.isList = false
// prop.isEnum = false 
      {
        java.util.List<? extends Object> list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof net.sourceforge.czt.base.ast.Term) {
            o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          java.util.List<Object> newlist = new java.util.ArrayList<Object>();
          for (Object o : list) {
            if (o instanceof net.sourceforge.czt.base.ast.Term) {
              o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
      getLogger().exiting(getClassName(), "visitUnparsedPara", jaxbObject);
      return objectFactory_.createUnparsedPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnparsedPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZSchText(net.sourceforge.czt.z.ast.ZSchText zedObject)
  {
    getLogger().entering(getClassName(), "visitZSchText", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZSchText jaxbObject = objectFactory_.createZSchText();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitZSchText", jaxbObject);
      return objectFactory_.createZSchText(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZSchText to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNewOldPair(net.sourceforge.czt.z.ast.NewOldPair zedObject)
  {
    getLogger().entering(getClassName(), "visitNewOldPair", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NewOldPair jaxbObject = objectFactory_.createNewOldPair();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Name o : zedObject.getName()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)r;
				  jaxbObject.getName().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Name";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitNewOldPair", jaxbObject);
      return objectFactory_.createNewOldPair(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NewOldPair to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitVarDecl(net.sourceforge.czt.z.ast.VarDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitVarDecl", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.VarDecl jaxbObject = objectFactory_.createVarDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitVarDecl", jaxbObject);
      return objectFactory_.createVarDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VarDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZName(net.sourceforge.czt.z.ast.ZName zedObject)
  {
    getLogger().entering(getClassName(), "visitZName", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZName jaxbObject = objectFactory_.createZName();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Word
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
// prop.Name   = StrokeList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStrokeList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStrokeList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.StrokeList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.StrokeList>)term.accept(this);
        jaxbObject.setStrokeList(newValue);
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitZName", jaxbObject);
      return objectFactory_.createZName(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZName to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitUnparsedZSect(net.sourceforge.czt.z.ast.UnparsedZSect zedObject)
  {
    getLogger().entering(getClassName(), "visitUnparsedZSect", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.UnparsedZSect jaxbObject = objectFactory_.createUnparsedZSect();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Content
// prop.isList = false
// prop.isEnum = false 
      {
        java.util.List<? extends Object> list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof net.sourceforge.czt.base.ast.Term) {
            o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          java.util.List<Object> newlist = new java.util.ArrayList<Object>();
          for (Object o : list) {
            if (o instanceof net.sourceforge.czt.base.ast.Term) {
              o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
      getLogger().exiting(getClassName(), "visitUnparsedZSect", jaxbObject);
      return objectFactory_.createUnparsedZSect(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UnparsedZSect to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOptempPara(net.sourceforge.czt.z.ast.OptempPara zedObject)
  {
    getLogger().entering(getClassName(), "visitOptempPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.OptempPara jaxbObject = objectFactory_.createOptempPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Oper
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Oper o : zedObject.getOper()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Oper> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Oper>)r;
				  jaxbObject.getOper().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Oper";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Cat
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCat() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCat(net.sourceforge.czt.z.jaxb.gen.Cat.fromValue(zedObject.getCat().toString()));
      }
// prop.Name   = Assoc
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getAssoc() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setAssoc(net.sourceforge.czt.z.jaxb.gen.Assoc.fromValue(zedObject.getAssoc().toString()));
      }
// prop.Name   = Prec
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPrec() != null) {
        jaxbObject.setPrec(zedObject.getPrec());
      }
      getLogger().exiting(getClassName(), "visitOptempPara", jaxbObject);
      return objectFactory_.createOptempPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OptempPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInclDecl(net.sourceforge.czt.z.ast.InclDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitInclDecl", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.InclDecl jaxbObject = objectFactory_.createInclDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitInclDecl", jaxbObject);
      return objectFactory_.createInclDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InclDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNarrPara(net.sourceforge.czt.z.ast.NarrPara zedObject)
  {
    getLogger().entering(getClassName(), "visitNarrPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NarrPara jaxbObject = objectFactory_.createNarrPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Content
// prop.isList = false
// prop.isEnum = false 
      {
        java.util.List<? extends Object> list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof net.sourceforge.czt.base.ast.Term) {
            o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          java.util.List<Object> newlist = new java.util.ArrayList<Object>();
          for (Object o : list) {
            if (o instanceof net.sourceforge.czt.base.ast.Term) {
              o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
      getLogger().exiting(getClassName(), "visitNarrPara", jaxbObject);
      return objectFactory_.createNarrPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NarrPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTupleSelExpr(net.sourceforge.czt.z.ast.TupleSelExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitTupleSelExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.TupleSelExpr jaxbObject = objectFactory_.createTupleSelExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Numeral
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNumeral() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNumeral();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Numeral> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Numeral>)term.accept(this);
        jaxbObject.setNumeral(newValue);
      }
      getLogger().exiting(getClassName(), "visitTupleSelExpr", jaxbObject);
      return objectFactory_.createTupleSelExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TupleSelExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitBindExpr(net.sourceforge.czt.z.ast.BindExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBindExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.BindExpr jaxbObject = objectFactory_.createBindExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitBindExpr", jaxbObject);
      return objectFactory_.createBindExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BindExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitMuExpr(net.sourceforge.czt.z.ast.MuExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitMuExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.MuExpr jaxbObject = objectFactory_.createMuExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitMuExpr", jaxbObject);
      return objectFactory_.createMuExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MuExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTruePred(net.sourceforge.czt.z.ast.TruePred zedObject)
  {
    getLogger().entering(getClassName(), "visitTruePred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.TruePred jaxbObject = objectFactory_.createTruePred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitTruePred", jaxbObject);
      return objectFactory_.createTruePred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TruePred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIffExpr(net.sourceforge.czt.z.ast.IffExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitIffExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.IffExpr jaxbObject = objectFactory_.createIffExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitIffExpr", jaxbObject);
      return objectFactory_.createIffExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IffExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSignatureAnn(net.sourceforge.czt.z.ast.SignatureAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitSignatureAnn", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SignatureAnn jaxbObject = objectFactory_.createSignatureAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitSignatureAnn", jaxbObject);
      return objectFactory_.createSignatureAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SignatureAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitGivenType(net.sourceforge.czt.z.ast.GivenType zedObject)
  {
    getLogger().entering(getClassName(), "visitGivenType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.GivenType jaxbObject = objectFactory_.createGivenType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitGivenType", jaxbObject);
      return objectFactory_.createGivenType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GivenType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPreExpr(net.sourceforge.czt.z.ast.PreExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPreExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.PreExpr jaxbObject = objectFactory_.createPreExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitPreExpr", jaxbObject);
      return objectFactory_.createPreExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PreExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSetCompExpr(net.sourceforge.czt.z.ast.SetCompExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSetCompExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SetCompExpr jaxbObject = objectFactory_.createSetCompExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitSetCompExpr", jaxbObject);
      return objectFactory_.createSetCompExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SetCompExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitApplExpr(net.sourceforge.czt.z.ast.ApplExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitApplExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ApplExpr jaxbObject = objectFactory_.createApplExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Mixfix
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
      getLogger().exiting(getClassName(), "visitApplExpr", jaxbObject);
      return objectFactory_.createApplExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ApplExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNumStroke(net.sourceforge.czt.z.ast.NumStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitNumStroke", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NumStroke jaxbObject = objectFactory_.createNumStroke();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Digit
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDigit() != null) {
        jaxbObject.setDigit(zedObject.getDigit());
      }
      getLogger().exiting(getClassName(), "visitNumStroke", jaxbObject);
      return objectFactory_.createNumStroke(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NumStroke to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitConjPara(net.sourceforge.czt.z.ast.ConjPara zedObject)
  {
    getLogger().entering(getClassName(), "visitConjPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ConjPara jaxbObject = objectFactory_.createConjPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitConjPara", jaxbObject);
      return objectFactory_.createConjPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConjPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDirective(net.sourceforge.czt.z.ast.Directive zedObject)
  {
    getLogger().entering(getClassName(), "visitDirective", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Directive jaxbObject = objectFactory_.createDirective();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Command
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommand() != null) {
        jaxbObject.setCommand(zedObject.getCommand());
      }
// prop.Name   = Unicode
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getUnicode() != null) {
        jaxbObject.setUnicode(zedObject.getUnicode());
      }
// prop.Name   = DirectiveType
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getDirectiveType() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setDirectiveType(net.sourceforge.czt.z.jaxb.gen.DirectiveType.fromValue(zedObject.getDirectiveType().toString()));
      }
      getLogger().exiting(getClassName(), "visitDirective", jaxbObject);
      return objectFactory_.createDirective(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Directive to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitForallPred(net.sourceforge.czt.z.ast.ForallPred zedObject)
  {
    getLogger().entering(getClassName(), "visitForallPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ForallPred jaxbObject = objectFactory_.createForallPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitForallPred", jaxbObject);
      return objectFactory_.createForallPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ForallPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZNumeral(net.sourceforge.czt.z.ast.ZNumeral zedObject)
  {
    getLogger().entering(getClassName(), "visitZNumeral", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZNumeral jaxbObject = objectFactory_.createZNumeral();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Value
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getValue() != null) {
        jaxbObject.setValue(zedObject.getValue());
      }
      getLogger().exiting(getClassName(), "visitZNumeral", jaxbObject);
      return objectFactory_.createZNumeral(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZNumeral to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExists1Pred(net.sourceforge.czt.z.ast.Exists1Pred zedObject)
  {
    getLogger().entering(getClassName(), "visitExists1Pred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Exists1Pred jaxbObject = objectFactory_.createExists1Pred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitExists1Pred", jaxbObject);
      return objectFactory_.createExists1Pred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Exists1Pred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOperand(net.sourceforge.czt.z.ast.Operand zedObject)
  {
    getLogger().entering(getClassName(), "visitOperand", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Operand jaxbObject = objectFactory_.createOperand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = List
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getList() != null) {
        jaxbObject.setList(zedObject.getList());
      }
      getLogger().exiting(getClassName(), "visitOperand", jaxbObject);
      return objectFactory_.createOperand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRenameExpr(net.sourceforge.czt.z.ast.RenameExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.RenameExpr jaxbObject = objectFactory_.createRenameExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = RenameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRenameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRenameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList>)term.accept(this);
        jaxbObject.setRenameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitRenameExpr", jaxbObject);
      return objectFactory_.createRenameExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCondExpr(net.sourceforge.czt.z.ast.CondExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitCondExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.CondExpr jaxbObject = objectFactory_.createCondExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCondExpr", jaxbObject);
      return objectFactory_.createCondExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CondExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNextStroke(net.sourceforge.czt.z.ast.NextStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitNextStroke", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NextStroke jaxbObject = objectFactory_.createNextStroke();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitNextStroke", jaxbObject);
      return objectFactory_.createNextStroke(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NextStroke to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProjExpr(net.sourceforge.czt.z.ast.ProjExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitProjExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ProjExpr jaxbObject = objectFactory_.createProjExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProjExpr", jaxbObject);
      return objectFactory_.createProjExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProjExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZDeclList(net.sourceforge.czt.z.ast.ZDeclList zedObject)
  {
    getLogger().entering(getClassName(), "visitZDeclList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZDeclList jaxbObject = objectFactory_.createZDeclList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Decl
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Decl o : zedObject.getDecl()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Decl> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Decl>)r;
				  jaxbObject.getDecl().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Decl";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZDeclList", jaxbObject);
      return objectFactory_.createZDeclList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZDeclList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLocAnn(net.sourceforge.czt.z.ast.LocAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitLocAnn", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.LocAnn jaxbObject = objectFactory_.createLocAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Loc
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getLoc() != null) {
        jaxbObject.setLoc(zedObject.getLoc());
      }
// prop.Name   = Line
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getLine() != null) {
        jaxbObject.setLine(zedObject.getLine());
      }
// prop.Name   = Col
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCol() != null) {
        jaxbObject.setCol(zedObject.getCol());
      }
// prop.Name   = Start
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStart() != null) {
        jaxbObject.setStart(zedObject.getStart());
      }
// prop.Name   = Length
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getLength() != null) {
        jaxbObject.setLength(zedObject.getLength());
      }
      getLogger().exiting(getClassName(), "visitLocAnn", jaxbObject);
      return objectFactory_.createLocAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LocAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitHideExpr(net.sourceforge.czt.z.ast.HideExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitHideExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.HideExpr jaxbObject = objectFactory_.createHideExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitHideExpr", jaxbObject);
      return objectFactory_.createHideExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSchExpr(net.sourceforge.czt.z.ast.SchExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSchExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SchExpr jaxbObject = objectFactory_.createSchExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
      getLogger().exiting(getClassName(), "visitSchExpr", jaxbObject);
      return objectFactory_.createSchExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitGenericType(net.sourceforge.czt.z.ast.GenericType zedObject)
  {
    getLogger().entering(getClassName(), "visitGenericType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.GenericType jaxbObject = objectFactory_.createGenericType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Type
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Type2 o : zedObject.getType()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2>)r;
				  jaxbObject.getType().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Type2";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitGenericType", jaxbObject);
      return objectFactory_.createGenericType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GenericType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNameSectTypeTriple(net.sourceforge.czt.z.ast.NameSectTypeTriple zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSectTypeTriple", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple jaxbObject = objectFactory_.createNameSectTypeTriple();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Sect
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSect() != null) {
        jaxbObject.setSect(zedObject.getSect());
      }
// prop.Name   = Type
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getType() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getType();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type>)term.accept(this);
        jaxbObject.setType(newValue);
      }
      getLogger().exiting(getClassName(), "visitNameSectTypeTriple", jaxbObject);
      return objectFactory_.createNameSectTypeTriple(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSectTypeTriple to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExists1Expr(net.sourceforge.czt.z.ast.Exists1Expr zedObject)
  {
    getLogger().entering(getClassName(), "visitExists1Expr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Exists1Expr jaxbObject = objectFactory_.createExists1Expr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitExists1Expr", jaxbObject);
      return objectFactory_.createExists1Expr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Exists1Expr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLatexMarkupPara(net.sourceforge.czt.z.ast.LatexMarkupPara zedObject)
  {
    getLogger().entering(getClassName(), "visitLatexMarkupPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.LatexMarkupPara jaxbObject = objectFactory_.createLatexMarkupPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Directive
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Directive o : zedObject.getDirective()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Directive> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Directive>)r;
				  jaxbObject.getDirective().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Directive";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitLatexMarkupPara", jaxbObject);
      return objectFactory_.createLatexMarkupPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LatexMarkupPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZRenameList(net.sourceforge.czt.z.ast.ZRenameList zedObject)
  {
    getLogger().entering(getClassName(), "visitZRenameList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZRenameList jaxbObject = objectFactory_.createZRenameList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NewOldPair
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NewOldPair o : zedObject.getNewOldPair()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NewOldPair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NewOldPair>)r;
				  jaxbObject.getNewOldPair().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NewOldPair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZRenameList", jaxbObject);
      return objectFactory_.createZRenameList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZRenameList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNameTypePair(net.sourceforge.czt.z.ast.NameTypePair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameTypePair", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NameTypePair jaxbObject = objectFactory_.createNameTypePair();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Type
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getType() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getType();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type>)term.accept(this);
        jaxbObject.setType(newValue);
      }
      getLogger().exiting(getClassName(), "visitNameTypePair", jaxbObject);
      return objectFactory_.createNameTypePair(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameTypePair to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZStrokeList(net.sourceforge.czt.z.ast.ZStrokeList zedObject)
  {
    getLogger().entering(getClassName(), "visitZStrokeList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZStrokeList jaxbObject = objectFactory_.createZStrokeList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Stroke
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Stroke o : zedObject.getStroke()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke>)r;
				  jaxbObject.getStroke().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Stroke";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZStrokeList", jaxbObject);
      return objectFactory_.createZStrokeList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZStrokeList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPowerType(net.sourceforge.czt.z.ast.PowerType zedObject)
  {
    getLogger().entering(getClassName(), "visitPowerType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.PowerType jaxbObject = objectFactory_.createPowerType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Type
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getType() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getType();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2>)term.accept(this);
        jaxbObject.setType(newValue);
      }
      getLogger().exiting(getClassName(), "visitPowerType", jaxbObject);
      return objectFactory_.createPowerType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PowerType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParenAnn(net.sourceforge.czt.z.ast.ParenAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitParenAnn", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ParenAnn jaxbObject = objectFactory_.createParenAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitParenAnn", jaxbObject);
      return objectFactory_.createParenAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParenAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPipeExpr(net.sourceforge.czt.z.ast.PipeExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPipeExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.PipeExpr jaxbObject = objectFactory_.createPipeExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitPipeExpr", jaxbObject);
      return objectFactory_.createPipeExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PipeExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTypeAnn(net.sourceforge.czt.z.ast.TypeAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitTypeAnn", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.TypeAnn jaxbObject = objectFactory_.createTypeAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Type
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getType() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getType();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type>)term.accept(this);
        jaxbObject.setType(newValue);
      }
      getLogger().exiting(getClassName(), "visitTypeAnn", jaxbObject);
      return objectFactory_.createTypeAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TypeAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAxPara(net.sourceforge.czt.z.ast.AxPara zedObject)
  {
    getLogger().entering(getClassName(), "visitAxPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.AxPara jaxbObject = objectFactory_.createAxPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Box
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getBox() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setBox(net.sourceforge.czt.z.jaxb.gen.Box.fromValue(zedObject.getBox().toString()));
      }
      getLogger().exiting(getClassName(), "visitAxPara", jaxbObject);
      return objectFactory_.createAxPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AxPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInStroke(net.sourceforge.czt.z.ast.InStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitInStroke", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.InStroke jaxbObject = objectFactory_.createInStroke();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitInStroke", jaxbObject);
      return objectFactory_.createInStroke(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InStroke to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAndExpr(net.sourceforge.czt.z.ast.AndExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAndExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.AndExpr jaxbObject = objectFactory_.createAndExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitAndExpr", jaxbObject);
      return objectFactory_.createAndExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AndExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitImpliesExpr(net.sourceforge.czt.z.ast.ImpliesExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitImpliesExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ImpliesExpr jaxbObject = objectFactory_.createImpliesExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitImpliesExpr", jaxbObject);
      return objectFactory_.createImpliesExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ImpliesExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZBranchList(net.sourceforge.czt.z.ast.ZBranchList zedObject)
  {
    getLogger().entering(getClassName(), "visitZBranchList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZBranchList jaxbObject = objectFactory_.createZBranchList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Branch
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Branch o : zedObject.getBranch()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Branch> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Branch>)r;
				  jaxbObject.getBranch().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Branch";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZBranchList", jaxbObject);
      return objectFactory_.createZBranchList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZBranchList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSchemaType(net.sourceforge.czt.z.ast.SchemaType zedObject)
  {
    getLogger().entering(getClassName(), "visitSchemaType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SchemaType jaxbObject = objectFactory_.createSchemaType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitSchemaType", jaxbObject);
      return objectFactory_.createSchemaType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SchemaType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOutStroke(net.sourceforge.czt.z.ast.OutStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitOutStroke", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.OutStroke jaxbObject = objectFactory_.createOutStroke();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitOutStroke", jaxbObject);
      return objectFactory_.createOutStroke(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OutStroke to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNumExpr(net.sourceforge.czt.z.ast.NumExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitNumExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NumExpr jaxbObject = objectFactory_.createNumExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Numeral
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNumeral() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNumeral();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Numeral> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Numeral>)term.accept(this);
        jaxbObject.setNumeral(newValue);
      }
      getLogger().exiting(getClassName(), "visitNumExpr", jaxbObject);
      return objectFactory_.createNumExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NumExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZExprList(net.sourceforge.czt.z.ast.ZExprList zedObject)
  {
    getLogger().entering(getClassName(), "visitZExprList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZExprList jaxbObject = objectFactory_.createZExprList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZExprList", jaxbObject);
      return objectFactory_.createZExprList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZExprList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExistsExpr(net.sourceforge.czt.z.ast.ExistsExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitExistsExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ExistsExpr jaxbObject = objectFactory_.createExistsExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitExistsExpr", jaxbObject);
      return objectFactory_.createExistsExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExistsExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZSect(net.sourceforge.czt.z.ast.ZSect zedObject)
  {
    getLogger().entering(getClassName(), "visitZSect", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZSect jaxbObject = objectFactory_.createZSect();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Parent
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Parent o : zedObject.getParent()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Parent> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Parent>)r;
				  jaxbObject.getParent().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Parent";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ParaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getParaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getParaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList>)term.accept(this);
        jaxbObject.setParaList(newValue);
      }
      getLogger().exiting(getClassName(), "visitZSect", jaxbObject);
      return objectFactory_.createZSect(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZSect to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLetExpr(net.sourceforge.czt.z.ast.LetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitLetExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.LetExpr jaxbObject = objectFactory_.createLetExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitLetExpr", jaxbObject);
      return objectFactory_.createLetExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LetExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProdType(net.sourceforge.czt.z.ast.ProdType zedObject)
  {
    getLogger().entering(getClassName(), "visitProdType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ProdType jaxbObject = objectFactory_.createProdType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Type
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Type2 o : zedObject.getType()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2>)r;
				  jaxbObject.getType().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Type2";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProdType", jaxbObject);
      return objectFactory_.createProdType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProdType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitLambdaExpr(net.sourceforge.czt.z.ast.LambdaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitLambdaExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.LambdaExpr jaxbObject = objectFactory_.createLambdaExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitLambdaExpr", jaxbObject);
      return objectFactory_.createLambdaExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a LambdaExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAndPred(net.sourceforge.czt.z.ast.AndPred zedObject)
  {
    getLogger().entering(getClassName(), "visitAndPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.AndPred jaxbObject = objectFactory_.createAndPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Pred o : zedObject.getPred()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)r;
				  jaxbObject.getPred().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Pred";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = And
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getAnd() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setAnd(net.sourceforge.czt.z.jaxb.gen.And.fromValue(zedObject.getAnd().toString()));
      }
      getLogger().exiting(getClassName(), "visitAndPred", jaxbObject);
      return objectFactory_.createAndPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AndPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExistsPred(net.sourceforge.czt.z.ast.ExistsPred zedObject)
  {
    getLogger().entering(getClassName(), "visitExistsPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ExistsPred jaxbObject = objectFactory_.createExistsPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitExistsPred", jaxbObject);
      return objectFactory_.createExistsPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExistsPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitFreePara(net.sourceforge.czt.z.ast.FreePara zedObject)
  {
    getLogger().entering(getClassName(), "visitFreePara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.FreePara jaxbObject = objectFactory_.createFreePara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = FreetypeList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getFreetypeList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getFreetypeList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.FreetypeList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.FreetypeList>)term.accept(this);
        jaxbObject.setFreetypeList(newValue);
      }
      getLogger().exiting(getClassName(), "visitFreePara", jaxbObject);
      return objectFactory_.createFreePara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FreePara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOrExpr(net.sourceforge.czt.z.ast.OrExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitOrExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.OrExpr jaxbObject = objectFactory_.createOrExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitOrExpr", jaxbObject);
      return objectFactory_.createOrExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OrExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTupleExpr(net.sourceforge.czt.z.ast.TupleExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitTupleExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.TupleExpr jaxbObject = objectFactory_.createTupleExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitTupleExpr", jaxbObject);
      return objectFactory_.createTupleExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TupleExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPowerExpr(net.sourceforge.czt.z.ast.PowerExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPowerExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.PowerExpr jaxbObject = objectFactory_.createPowerExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitPowerExpr", jaxbObject);
      return objectFactory_.createPowerExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PowerExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitConstDecl(net.sourceforge.czt.z.ast.ConstDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitConstDecl", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ConstDecl jaxbObject = objectFactory_.createConstDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitConstDecl", jaxbObject);
      return objectFactory_.createConstDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConstDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZParaList(net.sourceforge.czt.z.ast.ZParaList zedObject)
  {
    getLogger().entering(getClassName(), "visitZParaList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZParaList jaxbObject = objectFactory_.createZParaList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Para
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Para o : zedObject.getPara()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para>)r;
				  jaxbObject.getPara().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Para";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZParaList", jaxbObject);
      return objectFactory_.createZParaList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZParaList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitThetaExpr(net.sourceforge.czt.z.ast.ThetaExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitThetaExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ThetaExpr jaxbObject = objectFactory_.createThetaExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = StrokeList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStrokeList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStrokeList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.StrokeList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.StrokeList>)term.accept(this);
        jaxbObject.setStrokeList(newValue);
      }
      getLogger().exiting(getClassName(), "visitThetaExpr", jaxbObject);
      return objectFactory_.createThetaExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ThetaExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOperator(net.sourceforge.czt.z.ast.Operator zedObject)
  {
    getLogger().entering(getClassName(), "visitOperator", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Operator jaxbObject = objectFactory_.createOperator();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Word
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
      getLogger().exiting(getClassName(), "visitOperator", jaxbObject);
      return objectFactory_.createOperator(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operator to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParent(net.sourceforge.czt.z.ast.Parent zedObject)
  {
    getLogger().entering(getClassName(), "visitParent", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Parent jaxbObject = objectFactory_.createParent();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Word
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getWord() != null) {
        jaxbObject.setWord(zedObject.getWord());
      }
      getLogger().exiting(getClassName(), "visitParent", jaxbObject);
      return objectFactory_.createParent(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Parent to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNegExpr(net.sourceforge.czt.z.ast.NegExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitNegExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NegExpr jaxbObject = objectFactory_.createNegExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitNegExpr", jaxbObject);
      return objectFactory_.createNegExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NegExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitMemPred(net.sourceforge.czt.z.ast.MemPred zedObject)
  {
    getLogger().entering(getClassName(), "visitMemPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.MemPred jaxbObject = objectFactory_.createMemPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Mixfix
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
      getLogger().exiting(getClassName(), "visitMemPred", jaxbObject);
      return objectFactory_.createMemPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a MemPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCompExpr(net.sourceforge.czt.z.ast.CompExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitCompExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.CompExpr jaxbObject = objectFactory_.createCompExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCompExpr", jaxbObject);
      return objectFactory_.createCompExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CompExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitForallExpr(net.sourceforge.czt.z.ast.ForallExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitForallExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ForallExpr jaxbObject = objectFactory_.createForallExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitForallExpr", jaxbObject);
      return objectFactory_.createForallExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ForallExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSetExpr(net.sourceforge.czt.z.ast.SetExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSetExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SetExpr jaxbObject = objectFactory_.createSetExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSetExpr", jaxbObject);
      return objectFactory_.createSetExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SetExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitBindSelExpr(net.sourceforge.czt.z.ast.BindSelExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitBindSelExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.BindSelExpr jaxbObject = objectFactory_.createBindSelExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitBindSelExpr", jaxbObject);
      return objectFactory_.createBindSelExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a BindSelExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitBranch(net.sourceforge.czt.z.ast.Branch zedObject)
  {
    getLogger().entering(getClassName(), "visitBranch", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Branch jaxbObject = objectFactory_.createBranch();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitBranch", jaxbObject);
      return objectFactory_.createBranch(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Branch to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitFalsePred(net.sourceforge.czt.z.ast.FalsePred zedObject)
  {
    getLogger().entering(getClassName(), "visitFalsePred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.FalsePred jaxbObject = objectFactory_.createFalsePred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitFalsePred", jaxbObject);
      return objectFactory_.createFalsePred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a FalsePred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZNameList(net.sourceforge.czt.z.ast.ZNameList zedObject)
  {
    getLogger().entering(getClassName(), "visitZNameList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZNameList jaxbObject = objectFactory_.createZNameList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Name o : zedObject.getName()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)r;
				  jaxbObject.getName().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Name";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZNameList", jaxbObject);
      return objectFactory_.createZNameList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZNameList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRefExpr(net.sourceforge.czt.z.ast.RefExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRefExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.RefExpr jaxbObject = objectFactory_.createRefExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
// prop.Name   = Mixfix
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getMixfix() != null) {
        jaxbObject.setMixfix(zedObject.getMixfix());
      }
// prop.Name   = Explicit
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExplicit() != null) {
        jaxbObject.setExplicit(zedObject.getExplicit());
      }
      getLogger().exiting(getClassName(), "visitRefExpr", jaxbObject);
      return objectFactory_.createRefExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RefExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitGivenPara(net.sourceforge.czt.z.ast.GivenPara zedObject)
  {
    getLogger().entering(getClassName(), "visitGivenPara", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.GivenPara jaxbObject = objectFactory_.createGivenPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitGivenPara", jaxbObject);
      return objectFactory_.createGivenPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GivenPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNegPred(net.sourceforge.czt.z.ast.NegPred zedObject)
  {
    getLogger().entering(getClassName(), "visitNegPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NegPred jaxbObject = objectFactory_.createNegPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitNegPred", jaxbObject);
      return objectFactory_.createNegPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NegPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitGenParamType(net.sourceforge.czt.z.ast.GenParamType zedObject)
  {
    getLogger().entering(getClassName(), "visitGenParamType", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.GenParamType jaxbObject = objectFactory_.createGenParamType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitGenParamType", jaxbObject);
      return objectFactory_.createGenParamType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a GenParamType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSectTypeEnvAnn(net.sourceforge.czt.z.ast.SectTypeEnvAnn zedObject)
  {
    getLogger().entering(getClassName(), "visitSectTypeEnvAnn", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnn jaxbObject = objectFactory_.createSectTypeEnvAnn();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameSectTypeTriple
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameSectTypeTriple o : zedObject.getNameSectTypeTriple()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple>)r;
				  jaxbObject.getNameSectTypeTriple().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSectTypeEnvAnn", jaxbObject);
      return objectFactory_.createSectTypeEnvAnn(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SectTypeEnvAnn to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitFreetype(net.sourceforge.czt.z.ast.Freetype zedObject)
  {
    getLogger().entering(getClassName(), "visitFreetype", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Freetype jaxbObject = objectFactory_.createFreetype();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = BranchList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getBranchList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getBranchList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.BranchList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.BranchList>)term.accept(this);
        jaxbObject.setBranchList(newValue);
      }
      getLogger().exiting(getClassName(), "visitFreetype", jaxbObject);
      return objectFactory_.createFreetype(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Freetype to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitIffPred(net.sourceforge.czt.z.ast.IffPred zedObject)
  {
    getLogger().entering(getClassName(), "visitIffPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.IffPred jaxbObject = objectFactory_.createIffPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Pred o : zedObject.getPred()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)r;
				  jaxbObject.getPred().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Pred";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitIffPred", jaxbObject);
      return objectFactory_.createIffPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a IffPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitImpliesPred(net.sourceforge.czt.z.ast.ImpliesPred zedObject)
  {
    getLogger().entering(getClassName(), "visitImpliesPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ImpliesPred jaxbObject = objectFactory_.createImpliesPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Pred o : zedObject.getPred()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)r;
				  jaxbObject.getPred().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Pred";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitImpliesPred", jaxbObject);
      return objectFactory_.createImpliesPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ImpliesPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSignature(net.sourceforge.czt.z.ast.Signature zedObject)
  {
    getLogger().entering(getClassName(), "visitSignature", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Signature jaxbObject = objectFactory_.createSignature();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = NameTypePair
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameTypePair o : zedObject.getNameTypePair()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair>)r;
				  jaxbObject.getNameTypePair().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameTypePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSignature", jaxbObject);
      return objectFactory_.createSignature(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Signature to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNarrSect(net.sourceforge.czt.z.ast.NarrSect zedObject)
  {
    getLogger().entering(getClassName(), "visitNarrSect", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.NarrSect jaxbObject = objectFactory_.createNarrSect();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Content
// prop.isList = false
// prop.isEnum = false 
      {
        java.util.List<? extends Object> list = zedObject.getContent();
        if (list.size() == 1) {
          Object o = list.get(0);
          if (o instanceof net.sourceforge.czt.base.ast.Term) {
            o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
          }
          jaxbObject.setContent(o);
        }
        else if (list.size() > 1) {
          java.util.List<Object> newlist = new java.util.ArrayList<Object>();
          for (Object o : list) {
            if (o instanceof net.sourceforge.czt.base.ast.Term) {
              o = ((net.sourceforge.czt.base.ast.Term) o).accept(this);
            }
            newlist.add(o);
          }
          jaxbObject.setContent(newlist);
        }
      }
      getLogger().exiting(getClassName(), "visitNarrSect", jaxbObject);
      return objectFactory_.createNarrSect(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NarrSect to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSpec(net.sourceforge.czt.z.ast.Spec zedObject)
  {
    getLogger().entering(getClassName(), "visitSpec", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.Spec jaxbObject = objectFactory_.createSpec();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Sect
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Sect o : zedObject.getSect()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Sect> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Sect>)r;
				  jaxbObject.getSect().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Sect";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Version
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getVersion() != null) {
        jaxbObject.setVersion(zedObject.getVersion());
      }
      getLogger().exiting(getClassName(), "visitSpec", jaxbObject);
      return objectFactory_.createSpec(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Spec to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProdExpr(net.sourceforge.czt.z.ast.ProdExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitProdExpr", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ProdExpr jaxbObject = objectFactory_.createProdExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitProdExpr", jaxbObject);
      return objectFactory_.createProdExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProdExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExprPred(net.sourceforge.czt.z.ast.ExprPred zedObject)
  {
    getLogger().entering(getClassName(), "visitExprPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ExprPred jaxbObject = objectFactory_.createExprPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitExprPred", jaxbObject);
      return objectFactory_.createExprPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExprPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZFreetypeList(net.sourceforge.czt.z.ast.ZFreetypeList zedObject)
  {
    getLogger().entering(getClassName(), "visitZFreetypeList", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.ZFreetypeList jaxbObject = objectFactory_.createZFreetypeList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Freetype
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Freetype o : zedObject.getFreetype()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Freetype> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Freetype>)r;
				  jaxbObject.getFreetype().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Freetype";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitZFreetypeList", jaxbObject);
      return objectFactory_.createZFreetypeList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZFreetypeList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOrPred(net.sourceforge.czt.z.ast.OrPred zedObject)
  {
    getLogger().entering(getClassName(), "visitOrPred", zedObject);
    try {
      net.sourceforge.czt.z.jaxb.gen.OrPred jaxbObject = objectFactory_.createOrPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Pred o : zedObject.getPred()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)r;
				  jaxbObject.getPred().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Pred";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitOrPred", jaxbObject);
      return objectFactory_.createOrPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OrPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
