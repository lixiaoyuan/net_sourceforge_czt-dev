
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.util;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author GnAST version 1.6-cdh
 */
public class Factory
{
  private net.sourceforge.czt.z.ast.ZFactory factory_ =
    new net.sourceforge.czt.z.impl.ZFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.z.ast.ZFactory factory)
  {
    factory_ = factory;
  }

  /**
   * Gives access to the inner extension-factory within this factory bridge.
   * This is useful so that methods from BasicFactory can be accessed through
   * this topmost level factory object
   */
  public net.sourceforge.czt.z.ast.ZFactory getZFactory()
  {
    return factory_;
  }

  /**
   * Creates an instance of {@link DecorExpr}.
   *
   * @return the new instance of DecorExpr.
   */
  public net.sourceforge.czt.z.ast.DecorExpr createDecorExpr()
  {
    return factory_.createDecorExpr();
  }

  /**
   * Creates an instance of {@link DecorExpr} with the given children.
   *
   * @return the new instance of DecorExpr.
   */
  public net.sourceforge.czt.z.ast.DecorExpr createDecorExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Stroke  stroke)
  {
    return factory_.createDecorExpr(expr, stroke);
  }

  /**
   * Creates an instance of {@link UnparsedPara}.
   *
   * @return the new instance of UnparsedPara.
   */
  public net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara()
  {
    return factory_.createUnparsedPara();
  }

  /**
   * Creates an instance of {@link UnparsedPara} with the given children.
   *
   * @return the new instance of UnparsedPara.
   */
  public net.sourceforge.czt.z.ast.UnparsedPara createUnparsedPara( java.util.List<? extends Object>  content)
  {
    return factory_.createUnparsedPara(content);
  }

  /**
   * Creates an instance of {@link ZSchText}.
   *
   * @return the new instance of ZSchText.
   */
  public net.sourceforge.czt.z.ast.ZSchText createZSchText()
  {
    return factory_.createZSchText();
  }

  /**
   * Creates an instance of {@link ZSchText} with the given children.
   *
   * @return the new instance of ZSchText.
   */
  public net.sourceforge.czt.z.ast.ZSchText createZSchText( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createZSchText(declList, pred);
  }

  /**
   * Creates an instance of {@link NewOldPair}.
   *
   * @return the new instance of NewOldPair.
   */
  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair()
  {
    return factory_.createNewOldPair();
  }

  /**
   * Creates an instance of {@link NewOldPair} with the given children.
   *
   * @return the new instance of NewOldPair.
   */
  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    return factory_.createNewOldPair(name);
  }

  /**
   * Creates an instance of {@link VarDecl}.
   *
   * @return the new instance of VarDecl.
   */
  public net.sourceforge.czt.z.ast.VarDecl createVarDecl()
  {
    return factory_.createVarDecl();
  }

  /**
   * Creates an instance of {@link VarDecl} with the given children.
   *
   * @return the new instance of VarDecl.
   */
  public net.sourceforge.czt.z.ast.VarDecl createVarDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createVarDecl(nameList, expr);
  }

  /**
   * Creates an instance of {@link ZName}.
   *
   * @return the new instance of ZName.
   */
  public net.sourceforge.czt.z.ast.ZName createZName()
  {
    return factory_.createZName();
  }

  /**
   * Creates an instance of {@link ZName} with the given children.
   *
   * @return the new instance of ZName.
   */
  public net.sourceforge.czt.z.ast.ZName createZName( String  word, net.sourceforge.czt.z.ast.StrokeList  strokeList, String  id)
  {
    return factory_.createZName(word, strokeList, id);
  }

  /**
   * Creates an instance of {@link UnparsedZSect}.
   *
   * @return the new instance of UnparsedZSect.
   */
  public net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect()
  {
    return factory_.createUnparsedZSect();
  }

  /**
   * Creates an instance of {@link UnparsedZSect} with the given children.
   *
   * @return the new instance of UnparsedZSect.
   */
  public net.sourceforge.czt.z.ast.UnparsedZSect createUnparsedZSect( java.util.List<? extends Object>  content)
  {
    return factory_.createUnparsedZSect(content);
  }

  /**
   * Creates an instance of {@link OptempPara}.
   *
   * @return the new instance of OptempPara.
   */
  public net.sourceforge.czt.z.ast.OptempPara createOptempPara()
  {
    return factory_.createOptempPara();
  }

  /**
   * Creates an instance of {@link OptempPara} with the given children.
   *
   * @return the new instance of OptempPara.
   */
  public net.sourceforge.czt.z.ast.OptempPara createOptempPara(java.util.List<? extends net.sourceforge.czt.z.ast.Oper>
 oper,net.sourceforge.czt.z.ast.Cat
 cat,net.sourceforge.czt.z.ast.Assoc
 assoc, java.math.BigInteger  prec)
  {
    return factory_.createOptempPara(oper, cat, assoc, prec);
  }

  /**
   * Creates an instance of {@link InclDecl}.
   *
   * @return the new instance of InclDecl.
   */
  public net.sourceforge.czt.z.ast.InclDecl createInclDecl()
  {
    return factory_.createInclDecl();
  }

  /**
   * Creates an instance of {@link InclDecl} with the given children.
   *
   * @return the new instance of InclDecl.
   */
  public net.sourceforge.czt.z.ast.InclDecl createInclDecl( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createInclDecl(expr);
  }

  /**
   * Creates an instance of {@link NarrPara}.
   *
   * @return the new instance of NarrPara.
   */
  public net.sourceforge.czt.z.ast.NarrPara createNarrPara()
  {
    return factory_.createNarrPara();
  }

  /**
   * Creates an instance of {@link NarrPara} with the given children.
   *
   * @return the new instance of NarrPara.
   */
  public net.sourceforge.czt.z.ast.NarrPara createNarrPara( java.util.List<? extends Object>  content)
  {
    return factory_.createNarrPara(content);
  }

  /**
   * Creates an instance of {@link TupleSelExpr}.
   *
   * @return the new instance of TupleSelExpr.
   */
  public net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr()
  {
    return factory_.createTupleSelExpr();
  }

  /**
   * Creates an instance of {@link TupleSelExpr} with the given children.
   *
   * @return the new instance of TupleSelExpr.
   */
  public net.sourceforge.czt.z.ast.TupleSelExpr createTupleSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    return factory_.createTupleSelExpr(expr, numeral);
  }

  /**
   * Creates an instance of {@link BindExpr}.
   *
   * @return the new instance of BindExpr.
   */
  public net.sourceforge.czt.z.ast.BindExpr createBindExpr()
  {
    return factory_.createBindExpr();
  }

  /**
   * Creates an instance of {@link BindExpr} with the given children.
   *
   * @return the new instance of BindExpr.
   */
  public net.sourceforge.czt.z.ast.BindExpr createBindExpr( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createBindExpr(declList);
  }

  /**
   * Creates an instance of {@link MuExpr}.
   *
   * @return the new instance of MuExpr.
   */
  public net.sourceforge.czt.z.ast.MuExpr createMuExpr()
  {
    return factory_.createMuExpr();
  }

  /**
   * Creates an instance of {@link MuExpr} with the given children.
   *
   * @return the new instance of MuExpr.
   */
  public net.sourceforge.czt.z.ast.MuExpr createMuExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createMuExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link TruePred}.
   *
   * @return the new instance of TruePred.
   */
  public net.sourceforge.czt.z.ast.TruePred createTruePred()
  {
    return factory_.createTruePred();
  }

  /**
   * Creates an instance of {@link IffExpr}.
   *
   * @return the new instance of IffExpr.
   */
  public net.sourceforge.czt.z.ast.IffExpr createIffExpr()
  {
    return factory_.createIffExpr();
  }

  /**
   * Creates an instance of {@link IffExpr} with the given children.
   *
   * @return the new instance of IffExpr.
   */
  public net.sourceforge.czt.z.ast.IffExpr createIffExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createIffExpr(expr);
  }

  /**
   * Creates an instance of {@link SignatureAnn}.
   *
   * @return the new instance of SignatureAnn.
   */
  public net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn()
  {
    return factory_.createSignatureAnn();
  }

  /**
   * Creates an instance of {@link SignatureAnn} with the given children.
   *
   * @return the new instance of SignatureAnn.
   */
  public net.sourceforge.czt.z.ast.SignatureAnn createSignatureAnn( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createSignatureAnn(signature);
  }

  /**
   * Creates an instance of {@link GivenType}.
   *
   * @return the new instance of GivenType.
   */
  public net.sourceforge.czt.z.ast.GivenType createGivenType()
  {
    return factory_.createGivenType();
  }

  /**
   * Creates an instance of {@link GivenType} with the given children.
   *
   * @return the new instance of GivenType.
   */
  public net.sourceforge.czt.z.ast.GivenType createGivenType( net.sourceforge.czt.z.ast.Name  name)
  {
    return factory_.createGivenType(name);
  }

  /**
   * Creates an instance of {@link PreExpr}.
   *
   * @return the new instance of PreExpr.
   */
  public net.sourceforge.czt.z.ast.PreExpr createPreExpr()
  {
    return factory_.createPreExpr();
  }

  /**
   * Creates an instance of {@link PreExpr} with the given children.
   *
   * @return the new instance of PreExpr.
   */
  public net.sourceforge.czt.z.ast.PreExpr createPreExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createPreExpr(expr);
  }

  /**
   * Creates an instance of {@link SetCompExpr}.
   *
   * @return the new instance of SetCompExpr.
   */
  public net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr()
  {
    return factory_.createSetCompExpr();
  }

  /**
   * Creates an instance of {@link SetCompExpr} with the given children.
   *
   * @return the new instance of SetCompExpr.
   */
  public net.sourceforge.czt.z.ast.SetCompExpr createSetCompExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createSetCompExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link ApplExpr}.
   *
   * @return the new instance of ApplExpr.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr()
  {
    return factory_.createApplExpr();
  }

  /**
   * Creates an instance of {@link ApplExpr} with the given children.
   *
   * @return the new instance of ApplExpr.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    return factory_.createApplExpr(expr, mixfix);
  }

  /**
   * Creates an instance of {@link NumStroke}.
   *
   * @return the new instance of NumStroke.
   */
  public net.sourceforge.czt.z.ast.NumStroke createNumStroke()
  {
    return factory_.createNumStroke();
  }

  /**
   * Creates an instance of {@link NumStroke} with the given children.
   *
   * @return the new instance of NumStroke.
   */
  public net.sourceforge.czt.z.ast.NumStroke createNumStroke( net.sourceforge.czt.base.ast.Digit  digit)
  {
    return factory_.createNumStroke(digit);
  }

  /**
   * Creates an instance of {@link ConjPara}.
   *
   * @return the new instance of ConjPara.
   */
  public net.sourceforge.czt.z.ast.ConjPara createConjPara()
  {
    return factory_.createConjPara();
  }

  /**
   * Creates an instance of {@link ConjPara} with the given children.
   *
   * @return the new instance of ConjPara.
   */
  public net.sourceforge.czt.z.ast.ConjPara createConjPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createConjPara(nameList, pred);
  }

  /**
   * Creates an instance of {@link Directive}.
   *
   * @return the new instance of Directive.
   */
  public net.sourceforge.czt.z.ast.Directive createDirective()
  {
    return factory_.createDirective();
  }

  /**
   * Creates an instance of {@link Directive} with the given children.
   *
   * @return the new instance of Directive.
   */
  public net.sourceforge.czt.z.ast.Directive createDirective( String  command, String  unicode,net.sourceforge.czt.z.ast.DirectiveType
 directiveType)
  {
    return factory_.createDirective(command, unicode, directiveType);
  }

  /**
   * Creates an instance of {@link ForallPred}.
   *
   * @return the new instance of ForallPred.
   */
  public net.sourceforge.czt.z.ast.ForallPred createForallPred()
  {
    return factory_.createForallPred();
  }

  /**
   * Creates an instance of {@link ForallPred} with the given children.
   *
   * @return the new instance of ForallPred.
   */
  public net.sourceforge.czt.z.ast.ForallPred createForallPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createForallPred(schText, pred);
  }

  /**
   * Creates an instance of {@link ZNumeral}.
   *
   * @return the new instance of ZNumeral.
   */
  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral()
  {
    return factory_.createZNumeral();
  }

  /**
   * Creates an instance of {@link ZNumeral} with the given children.
   *
   * @return the new instance of ZNumeral.
   */
  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral( java.math.BigInteger  value)
  {
    return factory_.createZNumeral(value);
  }

  /**
   * Creates an instance of {@link Exists1Pred}.
   *
   * @return the new instance of Exists1Pred.
   */
  public net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred()
  {
    return factory_.createExists1Pred();
  }

  /**
   * Creates an instance of {@link Exists1Pred} with the given children.
   *
   * @return the new instance of Exists1Pred.
   */
  public net.sourceforge.czt.z.ast.Exists1Pred createExists1Pred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createExists1Pred(schText, pred);
  }

  /**
   * Creates an instance of {@link Operand}.
   *
   * @return the new instance of Operand.
   */
  public net.sourceforge.czt.z.ast.Operand createOperand()
  {
    return factory_.createOperand();
  }

  /**
   * Creates an instance of {@link Operand} with the given children.
   *
   * @return the new instance of Operand.
   */
  public net.sourceforge.czt.z.ast.Operand createOperand( Boolean  list)
  {
    return factory_.createOperand(list);
  }

  /**
   * Creates an instance of {@link RenameExpr}.
   *
   * @return the new instance of RenameExpr.
   */
  public net.sourceforge.czt.z.ast.RenameExpr createRenameExpr()
  {
    return factory_.createRenameExpr();
  }

  /**
   * Creates an instance of {@link RenameExpr} with the given children.
   *
   * @return the new instance of RenameExpr.
   */
  public net.sourceforge.czt.z.ast.RenameExpr createRenameExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    return factory_.createRenameExpr(expr, renameList);
  }

  /**
   * Creates an instance of {@link CondExpr}.
   *
   * @return the new instance of CondExpr.
   */
  public net.sourceforge.czt.z.ast.CondExpr createCondExpr()
  {
    return factory_.createCondExpr();
  }

  /**
   * Creates an instance of {@link CondExpr} with the given children.
   *
   * @return the new instance of CondExpr.
   */
  public net.sourceforge.czt.z.ast.CondExpr createCondExpr( net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createCondExpr(pred, expr);
  }

  /**
   * Creates an instance of {@link NextStroke}.
   *
   * @return the new instance of NextStroke.
   */
  public net.sourceforge.czt.z.ast.NextStroke createNextStroke()
  {
    return factory_.createNextStroke();
  }

  /**
   * Creates an instance of {@link ProjExpr}.
   *
   * @return the new instance of ProjExpr.
   */
  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr()
  {
    return factory_.createProjExpr();
  }

  /**
   * Creates an instance of {@link ProjExpr} with the given children.
   *
   * @return the new instance of ProjExpr.
   */
  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createProjExpr(expr);
  }

  /**
   * Creates an instance of {@link ZDeclList}.
   *
   * @return the new instance of ZDeclList.
   */
  public net.sourceforge.czt.z.ast.ZDeclList createZDeclList()
  {
    return factory_.createZDeclList();
  }

  /**
   * Creates an instance of {@link ZDeclList} with the given children.
   *
   * @return the new instance of ZDeclList.
   */
  public net.sourceforge.czt.z.ast.ZDeclList createZDeclList(java.util.List<? extends net.sourceforge.czt.z.ast.Decl>
 decl)
  {
    return factory_.createZDeclList(decl);
  }

  /**
   * Creates an instance of {@link LocAnn}.
   *
   * @return the new instance of LocAnn.
   */
  public net.sourceforge.czt.z.ast.LocAnn createLocAnn()
  {
    return factory_.createLocAnn();
  }

  /**
   * Creates an instance of {@link LocAnn} with the given children.
   *
   * @return the new instance of LocAnn.
   */
  public net.sourceforge.czt.z.ast.LocAnn createLocAnn( String  loc, java.math.BigInteger  line, java.math.BigInteger  col, java.math.BigInteger  start, java.math.BigInteger  length)
  {
    return factory_.createLocAnn(loc, line, col, start, length);
  }

  /**
   * Creates an instance of {@link HideExpr}.
   *
   * @return the new instance of HideExpr.
   */
  public net.sourceforge.czt.z.ast.HideExpr createHideExpr()
  {
    return factory_.createHideExpr();
  }

  /**
   * Creates an instance of {@link HideExpr} with the given children.
   *
   * @return the new instance of HideExpr.
   */
  public net.sourceforge.czt.z.ast.HideExpr createHideExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.NameList  nameList)
  {
    return factory_.createHideExpr(expr, nameList);
  }

  /**
   * Creates an instance of {@link SchExpr}.
   *
   * @return the new instance of SchExpr.
   */
  public net.sourceforge.czt.z.ast.SchExpr createSchExpr()
  {
    return factory_.createSchExpr();
  }

  /**
   * Creates an instance of {@link SchExpr} with the given children.
   *
   * @return the new instance of SchExpr.
   */
  public net.sourceforge.czt.z.ast.SchExpr createSchExpr( net.sourceforge.czt.z.ast.SchText  schText)
  {
    return factory_.createSchExpr(schText);
  }

  /**
   * Creates an instance of {@link GenericType}.
   *
   * @return the new instance of GenericType.
   */
  public net.sourceforge.czt.z.ast.GenericType createGenericType()
  {
    return factory_.createGenericType();
  }

  /**
   * Creates an instance of {@link GenericType} with the given children.
   *
   * @return the new instance of GenericType.
   */
  public net.sourceforge.czt.z.ast.GenericType createGenericType( net.sourceforge.czt.z.ast.NameList  nameList,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    return factory_.createGenericType(nameList, type);
  }

  /**
   * Creates an instance of {@link NameSectTypeTriple}.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  public net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple()
  {
    return factory_.createNameSectTypeTriple();
  }

  /**
   * Creates an instance of {@link NameSectTypeTriple} with the given children.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  public net.sourceforge.czt.z.ast.NameSectTypeTriple createNameSectTypeTriple( net.sourceforge.czt.z.ast.Name  name, String  sect, net.sourceforge.czt.z.ast.Type  type)
  {
    return factory_.createNameSectTypeTriple(name, sect, type);
  }

  /**
   * Creates an instance of {@link Exists1Expr}.
   *
   * @return the new instance of Exists1Expr.
   */
  public net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr()
  {
    return factory_.createExists1Expr();
  }

  /**
   * Creates an instance of {@link Exists1Expr} with the given children.
   *
   * @return the new instance of Exists1Expr.
   */
  public net.sourceforge.czt.z.ast.Exists1Expr createExists1Expr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createExists1Expr(schText, expr);
  }

  /**
   * Creates an instance of {@link LatexMarkupPara}.
   *
   * @return the new instance of LatexMarkupPara.
   */
  public net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara()
  {
    return factory_.createLatexMarkupPara();
  }

  /**
   * Creates an instance of {@link LatexMarkupPara} with the given children.
   *
   * @return the new instance of LatexMarkupPara.
   */
  public net.sourceforge.czt.z.ast.LatexMarkupPara createLatexMarkupPara(java.util.List<? extends net.sourceforge.czt.z.ast.Directive>
 directive)
  {
    return factory_.createLatexMarkupPara(directive);
  }

  /**
   * Creates an instance of {@link ZRenameList}.
   *
   * @return the new instance of ZRenameList.
   */
  public net.sourceforge.czt.z.ast.ZRenameList createZRenameList()
  {
    return factory_.createZRenameList();
  }

  /**
   * Creates an instance of {@link ZRenameList} with the given children.
   *
   * @return the new instance of ZRenameList.
   */
  public net.sourceforge.czt.z.ast.ZRenameList createZRenameList(java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair)
  {
    return factory_.createZRenameList(newOldPair);
  }

  /**
   * Creates an instance of {@link NameTypePair}.
   *
   * @return the new instance of NameTypePair.
   */
  public net.sourceforge.czt.z.ast.NameTypePair createNameTypePair()
  {
    return factory_.createNameTypePair();
  }

  /**
   * Creates an instance of {@link NameTypePair} with the given children.
   *
   * @return the new instance of NameTypePair.
   */
  public net.sourceforge.czt.z.ast.NameTypePair createNameTypePair( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Type  type)
  {
    return factory_.createNameTypePair(name, type);
  }

  /**
   * Creates an instance of {@link ZStrokeList}.
   *
   * @return the new instance of ZStrokeList.
   */
  public net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList()
  {
    return factory_.createZStrokeList();
  }

  /**
   * Creates an instance of {@link ZStrokeList} with the given children.
   *
   * @return the new instance of ZStrokeList.
   */
  public net.sourceforge.czt.z.ast.ZStrokeList createZStrokeList(java.util.List<? extends net.sourceforge.czt.z.ast.Stroke>
 stroke)
  {
    return factory_.createZStrokeList(stroke);
  }

  /**
   * Creates an instance of {@link PowerType}.
   *
   * @return the new instance of PowerType.
   */
  public net.sourceforge.czt.z.ast.PowerType createPowerType()
  {
    return factory_.createPowerType();
  }

  /**
   * Creates an instance of {@link PowerType} with the given children.
   *
   * @return the new instance of PowerType.
   */
  public net.sourceforge.czt.z.ast.PowerType createPowerType( net.sourceforge.czt.z.ast.Type2  type)
  {
    return factory_.createPowerType(type);
  }

  /**
   * Creates an instance of {@link ParenAnn}.
   *
   * @return the new instance of ParenAnn.
   */
  public net.sourceforge.czt.z.ast.ParenAnn createParenAnn()
  {
    return factory_.createParenAnn();
  }

  /**
   * Creates an instance of {@link PipeExpr}.
   *
   * @return the new instance of PipeExpr.
   */
  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr()
  {
    return factory_.createPipeExpr();
  }

  /**
   * Creates an instance of {@link PipeExpr} with the given children.
   *
   * @return the new instance of PipeExpr.
   */
  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createPipeExpr(expr);
  }

  /**
   * Creates an instance of {@link TypeAnn}.
   *
   * @return the new instance of TypeAnn.
   */
  public net.sourceforge.czt.z.ast.TypeAnn createTypeAnn()
  {
    return factory_.createTypeAnn();
  }

  /**
   * Creates an instance of {@link TypeAnn} with the given children.
   *
   * @return the new instance of TypeAnn.
   */
  public net.sourceforge.czt.z.ast.TypeAnn createTypeAnn( net.sourceforge.czt.z.ast.Type  type)
  {
    return factory_.createTypeAnn(type);
  }

  /**
   * Creates an instance of {@link AxPara}.
   *
   * @return the new instance of AxPara.
   */
  public net.sourceforge.czt.z.ast.AxPara createAxPara()
  {
    return factory_.createAxPara();
  }

  /**
   * Creates an instance of {@link AxPara} with the given children.
   *
   * @return the new instance of AxPara.
   */
  public net.sourceforge.czt.z.ast.AxPara createAxPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.z.ast.Box
 box)
  {
    return factory_.createAxPara(nameList, schText, box);
  }

  /**
   * Creates an instance of {@link InStroke}.
   *
   * @return the new instance of InStroke.
   */
  public net.sourceforge.czt.z.ast.InStroke createInStroke()
  {
    return factory_.createInStroke();
  }

  /**
   * Creates an instance of {@link AndExpr}.
   *
   * @return the new instance of AndExpr.
   */
  public net.sourceforge.czt.z.ast.AndExpr createAndExpr()
  {
    return factory_.createAndExpr();
  }

  /**
   * Creates an instance of {@link AndExpr} with the given children.
   *
   * @return the new instance of AndExpr.
   */
  public net.sourceforge.czt.z.ast.AndExpr createAndExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createAndExpr(expr);
  }

  /**
   * Creates an instance of {@link ImpliesExpr}.
   *
   * @return the new instance of ImpliesExpr.
   */
  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr()
  {
    return factory_.createImpliesExpr();
  }

  /**
   * Creates an instance of {@link ImpliesExpr} with the given children.
   *
   * @return the new instance of ImpliesExpr.
   */
  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createImpliesExpr(expr);
  }

  /**
   * Creates an instance of {@link ZBranchList}.
   *
   * @return the new instance of ZBranchList.
   */
  public net.sourceforge.czt.z.ast.ZBranchList createZBranchList()
  {
    return factory_.createZBranchList();
  }

  /**
   * Creates an instance of {@link ZBranchList} with the given children.
   *
   * @return the new instance of ZBranchList.
   */
  public net.sourceforge.czt.z.ast.ZBranchList createZBranchList(java.util.List<? extends net.sourceforge.czt.z.ast.Branch>
 branch)
  {
    return factory_.createZBranchList(branch);
  }

  /**
   * Creates an instance of {@link SchemaType}.
   *
   * @return the new instance of SchemaType.
   */
  public net.sourceforge.czt.z.ast.SchemaType createSchemaType()
  {
    return factory_.createSchemaType();
  }

  /**
   * Creates an instance of {@link SchemaType} with the given children.
   *
   * @return the new instance of SchemaType.
   */
  public net.sourceforge.czt.z.ast.SchemaType createSchemaType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    return factory_.createSchemaType(signature);
  }

  /**
   * Creates an instance of {@link OutStroke}.
   *
   * @return the new instance of OutStroke.
   */
  public net.sourceforge.czt.z.ast.OutStroke createOutStroke()
  {
    return factory_.createOutStroke();
  }

  /**
   * Creates an instance of {@link NumExpr}.
   *
   * @return the new instance of NumExpr.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr()
  {
    return factory_.createNumExpr();
  }

  /**
   * Creates an instance of {@link NumExpr} with the given children.
   *
   * @return the new instance of NumExpr.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr( net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    return factory_.createNumExpr(numeral);
  }

  /**
   * Creates an instance of {@link ZExprList}.
   *
   * @return the new instance of ZExprList.
   */
  public net.sourceforge.czt.z.ast.ZExprList createZExprList()
  {
    return factory_.createZExprList();
  }

  /**
   * Creates an instance of {@link ZExprList} with the given children.
   *
   * @return the new instance of ZExprList.
   */
  public net.sourceforge.czt.z.ast.ZExprList createZExprList(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createZExprList(expr);
  }

  /**
   * Creates an instance of {@link ExistsExpr}.
   *
   * @return the new instance of ExistsExpr.
   */
  public net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr()
  {
    return factory_.createExistsExpr();
  }

  /**
   * Creates an instance of {@link ExistsExpr} with the given children.
   *
   * @return the new instance of ExistsExpr.
   */
  public net.sourceforge.czt.z.ast.ExistsExpr createExistsExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createExistsExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link ZSect}.
   *
   * @return the new instance of ZSect.
   */
  public net.sourceforge.czt.z.ast.ZSect createZSect()
  {
    return factory_.createZSect();
  }

  /**
   * Creates an instance of {@link ZSect} with the given children.
   *
   * @return the new instance of ZSect.
   */
  public net.sourceforge.czt.z.ast.ZSect createZSect( String  name,java.util.List<? extends net.sourceforge.czt.z.ast.Parent>
 parent, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    return factory_.createZSect(name, parent, paraList);
  }

  /**
   * Creates an instance of {@link LetExpr}.
   *
   * @return the new instance of LetExpr.
   */
  public net.sourceforge.czt.z.ast.LetExpr createLetExpr()
  {
    return factory_.createLetExpr();
  }

  /**
   * Creates an instance of {@link LetExpr} with the given children.
   *
   * @return the new instance of LetExpr.
   */
  public net.sourceforge.czt.z.ast.LetExpr createLetExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createLetExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link ProdType}.
   *
   * @return the new instance of ProdType.
   */
  public net.sourceforge.czt.z.ast.ProdType createProdType()
  {
    return factory_.createProdType();
  }

  /**
   * Creates an instance of {@link ProdType} with the given children.
   *
   * @return the new instance of ProdType.
   */
  public net.sourceforge.czt.z.ast.ProdType createProdType(java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    return factory_.createProdType(type);
  }

  /**
   * Creates an instance of {@link LambdaExpr}.
   *
   * @return the new instance of LambdaExpr.
   */
  public net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr()
  {
    return factory_.createLambdaExpr();
  }

  /**
   * Creates an instance of {@link LambdaExpr} with the given children.
   *
   * @return the new instance of LambdaExpr.
   */
  public net.sourceforge.czt.z.ast.LambdaExpr createLambdaExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createLambdaExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link AndPred}.
   *
   * @return the new instance of AndPred.
   */
  public net.sourceforge.czt.z.ast.AndPred createAndPred()
  {
    return factory_.createAndPred();
  }

  /**
   * Creates an instance of {@link AndPred} with the given children.
   *
   * @return the new instance of AndPred.
   */
  public net.sourceforge.czt.z.ast.AndPred createAndPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred,net.sourceforge.czt.z.ast.And
 and)
  {
    return factory_.createAndPred(pred, and);
  }

  /**
   * Creates an instance of {@link ExistsPred}.
   *
   * @return the new instance of ExistsPred.
   */
  public net.sourceforge.czt.z.ast.ExistsPred createExistsPred()
  {
    return factory_.createExistsPred();
  }

  /**
   * Creates an instance of {@link ExistsPred} with the given children.
   *
   * @return the new instance of ExistsPred.
   */
  public net.sourceforge.czt.z.ast.ExistsPred createExistsPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createExistsPred(schText, pred);
  }

  /**
   * Creates an instance of {@link FreePara}.
   *
   * @return the new instance of FreePara.
   */
  public net.sourceforge.czt.z.ast.FreePara createFreePara()
  {
    return factory_.createFreePara();
  }

  /**
   * Creates an instance of {@link FreePara} with the given children.
   *
   * @return the new instance of FreePara.
   */
  public net.sourceforge.czt.z.ast.FreePara createFreePara( net.sourceforge.czt.z.ast.FreetypeList  freetypeList)
  {
    return factory_.createFreePara(freetypeList);
  }

  /**
   * Creates an instance of {@link OrExpr}.
   *
   * @return the new instance of OrExpr.
   */
  public net.sourceforge.czt.z.ast.OrExpr createOrExpr()
  {
    return factory_.createOrExpr();
  }

  /**
   * Creates an instance of {@link OrExpr} with the given children.
   *
   * @return the new instance of OrExpr.
   */
  public net.sourceforge.czt.z.ast.OrExpr createOrExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createOrExpr(expr);
  }

  /**
   * Creates an instance of {@link TupleExpr}.
   *
   * @return the new instance of TupleExpr.
   */
  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr()
  {
    return factory_.createTupleExpr();
  }

  /**
   * Creates an instance of {@link TupleExpr} with the given children.
   *
   * @return the new instance of TupleExpr.
   */
  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createTupleExpr(exprList);
  }

  /**
   * Creates an instance of {@link PowerExpr}.
   *
   * @return the new instance of PowerExpr.
   */
  public net.sourceforge.czt.z.ast.PowerExpr createPowerExpr()
  {
    return factory_.createPowerExpr();
  }

  /**
   * Creates an instance of {@link PowerExpr} with the given children.
   *
   * @return the new instance of PowerExpr.
   */
  public net.sourceforge.czt.z.ast.PowerExpr createPowerExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createPowerExpr(expr);
  }

  /**
   * Creates an instance of {@link ConstDecl}.
   *
   * @return the new instance of ConstDecl.
   */
  public net.sourceforge.czt.z.ast.ConstDecl createConstDecl()
  {
    return factory_.createConstDecl();
  }

  /**
   * Creates an instance of {@link ConstDecl} with the given children.
   *
   * @return the new instance of ConstDecl.
   */
  public net.sourceforge.czt.z.ast.ConstDecl createConstDecl( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createConstDecl(name, expr);
  }

  /**
   * Creates an instance of {@link ZParaList}.
   *
   * @return the new instance of ZParaList.
   */
  public net.sourceforge.czt.z.ast.ZParaList createZParaList()
  {
    return factory_.createZParaList();
  }

  /**
   * Creates an instance of {@link ZParaList} with the given children.
   *
   * @return the new instance of ZParaList.
   */
  public net.sourceforge.czt.z.ast.ZParaList createZParaList(java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 para)
  {
    return factory_.createZParaList(para);
  }

  /**
   * Creates an instance of {@link ThetaExpr}.
   *
   * @return the new instance of ThetaExpr.
   */
  public net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr()
  {
    return factory_.createThetaExpr();
  }

  /**
   * Creates an instance of {@link ThetaExpr} with the given children.
   *
   * @return the new instance of ThetaExpr.
   */
  public net.sourceforge.czt.z.ast.ThetaExpr createThetaExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.StrokeList  strokeList)
  {
    return factory_.createThetaExpr(expr, strokeList);
  }

  /**
   * Creates an instance of {@link Operator}.
   *
   * @return the new instance of Operator.
   */
  public net.sourceforge.czt.z.ast.Operator createOperator()
  {
    return factory_.createOperator();
  }

  /**
   * Creates an instance of {@link Operator} with the given children.
   *
   * @return the new instance of Operator.
   */
  public net.sourceforge.czt.z.ast.Operator createOperator( String  word)
  {
    return factory_.createOperator(word);
  }

  /**
   * Creates an instance of {@link Parent}.
   *
   * @return the new instance of Parent.
   */
  public net.sourceforge.czt.z.ast.Parent createParent()
  {
    return factory_.createParent();
  }

  /**
   * Creates an instance of {@link Parent} with the given children.
   *
   * @return the new instance of Parent.
   */
  public net.sourceforge.czt.z.ast.Parent createParent( String  word)
  {
    return factory_.createParent(word);
  }

  /**
   * Creates an instance of {@link NegExpr}.
   *
   * @return the new instance of NegExpr.
   */
  public net.sourceforge.czt.z.ast.NegExpr createNegExpr()
  {
    return factory_.createNegExpr();
  }

  /**
   * Creates an instance of {@link NegExpr} with the given children.
   *
   * @return the new instance of NegExpr.
   */
  public net.sourceforge.czt.z.ast.NegExpr createNegExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createNegExpr(expr);
  }

  /**
   * Creates an instance of {@link MemPred}.
   *
   * @return the new instance of MemPred.
   */
  public net.sourceforge.czt.z.ast.MemPred createMemPred()
  {
    return factory_.createMemPred();
  }

  /**
   * Creates an instance of {@link MemPred} with the given children.
   *
   * @return the new instance of MemPred.
   */
  public net.sourceforge.czt.z.ast.MemPred createMemPred(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    return factory_.createMemPred(expr, mixfix);
  }

  /**
   * Creates an instance of {@link CompExpr}.
   *
   * @return the new instance of CompExpr.
   */
  public net.sourceforge.czt.z.ast.CompExpr createCompExpr()
  {
    return factory_.createCompExpr();
  }

  /**
   * Creates an instance of {@link CompExpr} with the given children.
   *
   * @return the new instance of CompExpr.
   */
  public net.sourceforge.czt.z.ast.CompExpr createCompExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    return factory_.createCompExpr(expr);
  }

  /**
   * Creates an instance of {@link ForallExpr}.
   *
   * @return the new instance of ForallExpr.
   */
  public net.sourceforge.czt.z.ast.ForallExpr createForallExpr()
  {
    return factory_.createForallExpr();
  }

  /**
   * Creates an instance of {@link ForallExpr} with the given children.
   *
   * @return the new instance of ForallExpr.
   */
  public net.sourceforge.czt.z.ast.ForallExpr createForallExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createForallExpr(schText, expr);
  }

  /**
   * Creates an instance of {@link SetExpr}.
   *
   * @return the new instance of SetExpr.
   */
  public net.sourceforge.czt.z.ast.SetExpr createSetExpr()
  {
    return factory_.createSetExpr();
  }

  /**
   * Creates an instance of {@link SetExpr} with the given children.
   *
   * @return the new instance of SetExpr.
   */
  public net.sourceforge.czt.z.ast.SetExpr createSetExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createSetExpr(exprList);
  }

  /**
   * Creates an instance of {@link BindSelExpr}.
   *
   * @return the new instance of BindSelExpr.
   */
  public net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr()
  {
    return factory_.createBindSelExpr();
  }

  /**
   * Creates an instance of {@link BindSelExpr} with the given children.
   *
   * @return the new instance of BindSelExpr.
   */
  public net.sourceforge.czt.z.ast.BindSelExpr createBindSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Name  name)
  {
    return factory_.createBindSelExpr(expr, name);
  }

  /**
   * Creates an instance of {@link Branch}.
   *
   * @return the new instance of Branch.
   */
  public net.sourceforge.czt.z.ast.Branch createBranch()
  {
    return factory_.createBranch();
  }

  /**
   * Creates an instance of {@link Branch} with the given children.
   *
   * @return the new instance of Branch.
   */
  public net.sourceforge.czt.z.ast.Branch createBranch( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createBranch(name, expr);
  }

  /**
   * Creates an instance of {@link FalsePred}.
   *
   * @return the new instance of FalsePred.
   */
  public net.sourceforge.czt.z.ast.FalsePred createFalsePred()
  {
    return factory_.createFalsePred();
  }

  /**
   * Creates an instance of {@link ZNameList}.
   *
   * @return the new instance of ZNameList.
   */
  public net.sourceforge.czt.z.ast.ZNameList createZNameList()
  {
    return factory_.createZNameList();
  }

  /**
   * Creates an instance of {@link ZNameList} with the given children.
   *
   * @return the new instance of ZNameList.
   */
  public net.sourceforge.czt.z.ast.ZNameList createZNameList(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    return factory_.createZNameList(name);
  }

  /**
   * Creates an instance of {@link RefExpr}.
   *
   * @return the new instance of RefExpr.
   */
  public net.sourceforge.czt.z.ast.RefExpr createRefExpr()
  {
    return factory_.createRefExpr();
  }

  /**
   * Creates an instance of {@link RefExpr} with the given children.
   *
   * @return the new instance of RefExpr.
   */
  public net.sourceforge.czt.z.ast.RefExpr createRefExpr( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList, Boolean  mixfix, Boolean  explicit)
  {
    return factory_.createRefExpr(name, exprList, mixfix, explicit);
  }

  /**
   * Creates an instance of {@link GivenPara}.
   *
   * @return the new instance of GivenPara.
   */
  public net.sourceforge.czt.z.ast.GivenPara createGivenPara()
  {
    return factory_.createGivenPara();
  }

  /**
   * Creates an instance of {@link GivenPara} with the given children.
   *
   * @return the new instance of GivenPara.
   */
  public net.sourceforge.czt.z.ast.GivenPara createGivenPara( net.sourceforge.czt.z.ast.NameList  nameList)
  {
    return factory_.createGivenPara(nameList);
  }

  /**
   * Creates an instance of {@link NegPred}.
   *
   * @return the new instance of NegPred.
   */
  public net.sourceforge.czt.z.ast.NegPred createNegPred()
  {
    return factory_.createNegPred();
  }

  /**
   * Creates an instance of {@link NegPred} with the given children.
   *
   * @return the new instance of NegPred.
   */
  public net.sourceforge.czt.z.ast.NegPred createNegPred( net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createNegPred(pred);
  }

  /**
   * Creates an instance of {@link GenParamType}.
   *
   * @return the new instance of GenParamType.
   */
  public net.sourceforge.czt.z.ast.GenParamType createGenParamType()
  {
    return factory_.createGenParamType();
  }

  /**
   * Creates an instance of {@link GenParamType} with the given children.
   *
   * @return the new instance of GenParamType.
   */
  public net.sourceforge.czt.z.ast.GenParamType createGenParamType( net.sourceforge.czt.z.ast.Name  name)
  {
    return factory_.createGenParamType(name);
  }

  /**
   * Creates an instance of {@link SectTypeEnvAnn}.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  public net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn()
  {
    return factory_.createSectTypeEnvAnn();
  }

  /**
   * Creates an instance of {@link SectTypeEnvAnn} with the given children.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  public net.sourceforge.czt.z.ast.SectTypeEnvAnn createSectTypeEnvAnn(java.util.List<? extends net.sourceforge.czt.z.ast.NameSectTypeTriple>
 nameSectTypeTriple)
  {
    return factory_.createSectTypeEnvAnn(nameSectTypeTriple);
  }

  /**
   * Creates an instance of {@link Freetype}.
   *
   * @return the new instance of Freetype.
   */
  public net.sourceforge.czt.z.ast.Freetype createFreetype()
  {
    return factory_.createFreetype();
  }

  /**
   * Creates an instance of {@link Freetype} with the given children.
   *
   * @return the new instance of Freetype.
   */
  public net.sourceforge.czt.z.ast.Freetype createFreetype( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.BranchList  branchList)
  {
    return factory_.createFreetype(name, branchList);
  }

  /**
   * Creates an instance of {@link IffPred}.
   *
   * @return the new instance of IffPred.
   */
  public net.sourceforge.czt.z.ast.IffPred createIffPred()
  {
    return factory_.createIffPred();
  }

  /**
   * Creates an instance of {@link IffPred} with the given children.
   *
   * @return the new instance of IffPred.
   */
  public net.sourceforge.czt.z.ast.IffPred createIffPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    return factory_.createIffPred(pred);
  }

  /**
   * Creates an instance of {@link ImpliesPred}.
   *
   * @return the new instance of ImpliesPred.
   */
  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred()
  {
    return factory_.createImpliesPred();
  }

  /**
   * Creates an instance of {@link ImpliesPred} with the given children.
   *
   * @return the new instance of ImpliesPred.
   */
  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    return factory_.createImpliesPred(pred);
  }

  /**
   * Creates an instance of {@link Signature}.
   *
   * @return the new instance of Signature.
   */
  public net.sourceforge.czt.z.ast.Signature createSignature()
  {
    return factory_.createSignature();
  }

  /**
   * Creates an instance of {@link Signature} with the given children.
   *
   * @return the new instance of Signature.
   */
  public net.sourceforge.czt.z.ast.Signature createSignature(java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 nameTypePair)
  {
    return factory_.createSignature(nameTypePair);
  }

  /**
   * Creates an instance of {@link NarrSect}.
   *
   * @return the new instance of NarrSect.
   */
  public net.sourceforge.czt.z.ast.NarrSect createNarrSect()
  {
    return factory_.createNarrSect();
  }

  /**
   * Creates an instance of {@link NarrSect} with the given children.
   *
   * @return the new instance of NarrSect.
   */
  public net.sourceforge.czt.z.ast.NarrSect createNarrSect( java.util.List<? extends Object>  content)
  {
    return factory_.createNarrSect(content);
  }

  /**
   * Creates an instance of {@link Spec}.
   *
   * @return the new instance of Spec.
   */
  public net.sourceforge.czt.z.ast.Spec createSpec()
  {
    return factory_.createSpec();
  }

  /**
   * Creates an instance of {@link Spec} with the given children.
   *
   * @return the new instance of Spec.
   */
  public net.sourceforge.czt.z.ast.Spec createSpec(java.util.List<? extends net.sourceforge.czt.z.ast.Sect>
 sect, String  version)
  {
    return factory_.createSpec(sect, version);
  }

  /**
   * Creates an instance of {@link ProdExpr}.
   *
   * @return the new instance of ProdExpr.
   */
  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr()
  {
    return factory_.createProdExpr();
  }

  /**
   * Creates an instance of {@link ProdExpr} with the given children.
   *
   * @return the new instance of ProdExpr.
   */
  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createProdExpr(exprList);
  }

  /**
   * Creates an instance of {@link ExprPred}.
   *
   * @return the new instance of ExprPred.
   */
  public net.sourceforge.czt.z.ast.ExprPred createExprPred()
  {
    return factory_.createExprPred();
  }

  /**
   * Creates an instance of {@link ExprPred} with the given children.
   *
   * @return the new instance of ExprPred.
   */
  public net.sourceforge.czt.z.ast.ExprPred createExprPred( net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createExprPred(expr);
  }

  /**
   * Creates an instance of {@link ZFreetypeList}.
   *
   * @return the new instance of ZFreetypeList.
   */
  public net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList()
  {
    return factory_.createZFreetypeList();
  }

  /**
   * Creates an instance of {@link ZFreetypeList} with the given children.
   *
   * @return the new instance of ZFreetypeList.
   */
  public net.sourceforge.czt.z.ast.ZFreetypeList createZFreetypeList(java.util.List<? extends net.sourceforge.czt.z.ast.Freetype>
 freetype)
  {
    return factory_.createZFreetypeList(freetype);
  }

  /**
   * Creates an instance of {@link OrPred}.
   *
   * @return the new instance of OrPred.
   */
  public net.sourceforge.czt.z.ast.OrPred createOrPred()
  {
    return factory_.createOrPred();
  }

  /**
   * Creates an instance of {@link OrPred} with the given children.
   *
   * @return the new instance of OrPred.
   */
  public net.sourceforge.czt.z.ast.OrPred createOrPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    return factory_.createOrPred(pred);
  }

  /**
   * Creates an empty list of the given element type.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list()
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    return result;
  }
  

  /**
   * Creates a list with the given elements.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list(@SuppressWarnings("unchecked") E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createApplication(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a ZName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String word, net.sourceforge.czt.z.ast.StrokeList strokes)
  {
    return createZName(word, strokes, null);
  }

  /**
   * Creates a ZName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String decorword)
  {
    net.sourceforge.czt.z.ast.ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZName(word, strokes, null);
  }

  public String getWordAndStrokes(String decorword,
                                  net.sourceforge.czt.z.ast.ZStrokeList strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        net.sourceforge.czt.base.ast.Digit digit =
          net.sourceforge.czt.base.util.CztDatatypeConverter.parseDigit(zchars[i - 1].toString());
        strokes.add(0, createNumStroke(digit));
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createEquality(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    zExprList.add(right);
    return createMemPred(left, createSetExpr(zExprList), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createFunOpAppl(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenInst(net.sourceforge.czt.z.ast.Name refName,
                               java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenOpApp(net.sourceforge.czt.z.ast.Name refName,
                                java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of Name, the formal parameters.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName,
                                    java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                                    net.sourceforge.czt.z.ast.Expr expr)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, expr);
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }
  
  public net.sourceforge.czt.z.ast.Pred createSetMembership(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createMemPred(left, right, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(int value)
  {
    return factory_.createNumExpr(createZNumeral(value));
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(java.math.BigInteger bigInt)
  {
    return createNumExpr(factory_.createZNumeral(bigInt));
  }

  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral(int value)
  {
    return factory_.createZNumeral(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createProdExpr(createZExprList(list(left, right)));
  }

  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName,
                               net.sourceforge.czt.z.ast.ZExprList zExprList,
                               Boolean mixfix)
  {
    return factory_.createRefExpr(refName, zExprList, mixfix, false);
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName)
  {
    return createRefExpr(refName, createZExprList(), Boolean.FALSE);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name, i.e., just copies the given ZName.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(net.sourceforge.czt.z.ast.ZName declName)
  {
    return createZName(declName.getWord(),
                       declName.getStrokeList(),
                       declName.getId());
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createRelOpAppl(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.Name refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of Name, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName,
                             java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                             net.sourceforge.czt.z.ast.SchText schemaText)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, createSchExpr(schemaText));
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public net.sourceforge.czt.z.ast.SetExpr createSequence(java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprList)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    int count = 1;
    for (java.util.Iterator<? extends net.sourceforge.czt.z.ast.Expr> i = exprList.iterator();
         i.hasNext(); count++) {
      zExprList.add(createTupleExpr(createNumExpr(count), i.next()));
    }
    return createSetExpr(zExprList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createTupleExpr(createZExprList(list(left, right)));
  }

  public java.math.BigInteger toBig(Integer i)
  {
    if (i != null) {
      return java.math.BigInteger.valueOf(i.intValue());
    }
    return null;
  }

  public net.sourceforge.czt.z.ast.NumStroke createNumStroke(int value)
  {
    net.sourceforge.czt.base.ast.Digit digit =
      net.sourceforge.czt.base.ast.Digit.fromValue(value);
    return createNumStroke(digit);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source, Integer line, Integer col)
  {
    return createLocAnn(source, line, col, null, null);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source,
                             Integer line, Integer col,
                             Integer start, Integer length)
  {
    return createLocAnn(source,
                        toBig(line), toBig(col),
                        toBig(start), toBig(length));
  }

  public net.sourceforge.czt.z.ast.AndExpr createAndExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.AndExpr result = createAndExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.AndPred createAndPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right, net.sourceforge.czt.z.ast.And and)
  {
    net.sourceforge.czt.z.ast.AndPred result = createAndPred();
    result.getPred().add(left);
    result.getPred().add(right);
    result.setAnd(and);
    return result;
  }

  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean  mixfix)
  {
    net.sourceforge.czt.z.ast.ApplExpr result = createApplExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.CompExpr createCompExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CompExpr result = createCompExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.CondExpr createCondExpr(net.sourceforge.czt.z.ast.Pred pred, net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CondExpr result = createCondExpr();
    result.setPred(pred);
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffExpr createIffExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.IffExpr result = createIffExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffPred createIffPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.IffPred result = createIffPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ImpliesExpr result = createImpliesExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.ImpliesPred result = createImpliesPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean mixfix)
  {
    net.sourceforge.czt.z.ast.MemPred result = createMemPred();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrExpr createOrExpr(net.sourceforge.czt.z.ast.Expr  left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.OrExpr result = createOrExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrPred createOrPred(net.sourceforge.czt.z.ast.Pred  left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.OrPred result = createOrPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.PipeExpr result = createPipeExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ProjExpr result = createProjExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(net.sourceforge.czt.z.ast.Name newName, net.sourceforge.czt.z.ast.Name oldName)
  {
    net.sourceforge.czt.z.ast.NewOldPair result = createNewOldPair();
    result.getName().add(newName);
    result.getName().add(oldName);
    return result;
  }}
