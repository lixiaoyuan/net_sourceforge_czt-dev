
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst	 extends net.sourceforge.czt.util.ReflectiveVisitor
{
  protected net.sourceforge.czt.z.ast.ZFactory mZFactory_;

  public JaxbToAst()
  {
    mZFactory_ =
      new net.sourceforge.czt.z.impl.ZFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory)
  {
    mZFactory_ = vZFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.z.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitDecorExpr(net.sourceforge.czt.z.jaxb.gen.DecorExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDecorExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Stroke stroke =
      (net.sourceforge.czt.z.ast.Stroke) dispatch(jaxbObject.getStroke());
    net.sourceforge.czt.z.ast.DecorExpr erg = mZFactory_.createDecorExpr(expr, stroke);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDecorExpr", erg);
    return erg;
  }

  public Object visitUnparsedPara(net.sourceforge.czt.z.jaxb.gen.UnparsedPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnparsedPara", jaxbObject);
    java.util.List<Object> content = new java.util.Vector<Object>();
    if (jaxbObject.getContent() != null) {
      content.add(dispatch(jaxbObject.getContent()));
    }
    net.sourceforge.czt.z.ast.UnparsedPara erg = mZFactory_.createUnparsedPara(content);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitUnparsedPara", erg);
    return erg;
  }

  public Object visitZSchText(net.sourceforge.czt.z.jaxb.gen.ZSchText jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZSchText", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.ZSchText erg = mZFactory_.createZSchText(declList, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZSchText", erg);
    return erg;
  }

  public Object visitNewOldPair(net.sourceforge.czt.z.jaxb.gen.NewOldPair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNewOldPair", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Name> name = new java.util.Vector<net.sourceforge.czt.z.ast.Name>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Name> 
					
		obj : jaxbObject.getName()) {
	  net.sourceforge.czt.z.ast.Name o = (net.sourceforge.czt.z.ast.Name) dispatch(obj);
	  name.add(o);
	}
    
    net.sourceforge.czt.z.ast.NewOldPair erg = mZFactory_.createNewOldPair(name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNewOldPair", erg);
    return erg;
  }

  public Object visitVarDecl(net.sourceforge.czt.z.jaxb.gen.VarDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVarDecl", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.VarDecl erg = mZFactory_.createVarDecl(nameList, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitVarDecl", erg);
    return erg;
  }

  public Object visitZName(net.sourceforge.czt.z.jaxb.gen.ZName jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZName", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    net.sourceforge.czt.z.ast.StrokeList strokeList =
      (net.sourceforge.czt.z.ast.StrokeList) dispatch(jaxbObject.getStrokeList());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.z.ast.ZName erg = mZFactory_.createZName(word, strokeList, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZName", erg);
    return erg;
  }

  public Object visitUnparsedZSect(net.sourceforge.czt.z.jaxb.gen.UnparsedZSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUnparsedZSect", jaxbObject);
    java.util.List<Object> content = new java.util.Vector<Object>();
    if (jaxbObject.getContent() != null) {
      content.add(dispatch(jaxbObject.getContent()));
    }
    net.sourceforge.czt.z.ast.UnparsedZSect erg = mZFactory_.createUnparsedZSect(content);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitUnparsedZSect", erg);
    return erg;
  }

  public Object visitOptempPara(net.sourceforge.czt.z.jaxb.gen.OptempPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOptempPara", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Oper> oper = new java.util.Vector<net.sourceforge.czt.z.ast.Oper>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Oper> 
					
		obj : jaxbObject.getOper()) {
	  net.sourceforge.czt.z.ast.Oper o = (net.sourceforge.czt.z.ast.Oper) dispatch(obj);
	  oper.add(o);
	}
    
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Cat cat = null;
    if (jaxbObject.getCat() != null) {
      String catJaxb = jaxbObject.getCat().value();
            
      cat = net.sourceforge.czt.z.ast.Cat.valueOf(catJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Assoc assoc = null;
    if (jaxbObject.getAssoc() != null) {
      String assocJaxb = jaxbObject.getAssoc().value();
            
      assoc = net.sourceforge.czt.z.ast.Assoc.valueOf(assocJaxb);
    }
    java.math.BigInteger prec =
      (java.math.BigInteger) dispatch(jaxbObject.getPrec());
    net.sourceforge.czt.z.ast.OptempPara erg = mZFactory_.createOptempPara(oper, cat, assoc, prec);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOptempPara", erg);
    return erg;
  }

  public Object visitInclDecl(net.sourceforge.czt.z.jaxb.gen.InclDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInclDecl", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.InclDecl erg = mZFactory_.createInclDecl(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInclDecl", erg);
    return erg;
  }

  public Object visitNarrPara(net.sourceforge.czt.z.jaxb.gen.NarrPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNarrPara", jaxbObject);
    java.util.List<Object> content = new java.util.Vector<Object>();
    if (jaxbObject.getContent() != null) {
      content.add(dispatch(jaxbObject.getContent()));
    }
    net.sourceforge.czt.z.ast.NarrPara erg = mZFactory_.createNarrPara(content);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNarrPara", erg);
    return erg;
  }

  public Object visitTupleSelExpr(net.sourceforge.czt.z.jaxb.gen.TupleSelExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTupleSelExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Numeral numeral =
      (net.sourceforge.czt.z.ast.Numeral) dispatch(jaxbObject.getNumeral());
    net.sourceforge.czt.z.ast.TupleSelExpr erg = mZFactory_.createTupleSelExpr(expr, numeral);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTupleSelExpr", erg);
    return erg;
  }

  public Object visitBindExpr(net.sourceforge.czt.z.jaxb.gen.BindExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBindExpr", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.z.ast.BindExpr erg = mZFactory_.createBindExpr(declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBindExpr", erg);
    return erg;
  }

  public Object visitMuExpr(net.sourceforge.czt.z.jaxb.gen.MuExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMuExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.MuExpr erg = mZFactory_.createMuExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitMuExpr", erg);
    return erg;
  }

  public Object visitTruePred(net.sourceforge.czt.z.jaxb.gen.TruePred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTruePred", jaxbObject);
    net.sourceforge.czt.z.ast.TruePred erg = mZFactory_.createTruePred();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTruePred", erg);
    return erg;
  }

  public Object visitIffExpr(net.sourceforge.czt.z.jaxb.gen.IffExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIffExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.IffExpr erg = mZFactory_.createIffExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIffExpr", erg);
    return erg;
  }

  public Object visitSignatureAnn(net.sourceforge.czt.z.jaxb.gen.SignatureAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSignatureAnn", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.z.ast.SignatureAnn erg = mZFactory_.createSignatureAnn(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSignatureAnn", erg);
    return erg;
  }

  public Object visitGivenType(net.sourceforge.czt.z.jaxb.gen.GivenType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGivenType", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.GivenType erg = mZFactory_.createGivenType(name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGivenType", erg);
    return erg;
  }

  public Object visitPreExpr(net.sourceforge.czt.z.jaxb.gen.PreExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPreExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.PreExpr erg = mZFactory_.createPreExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPreExpr", erg);
    return erg;
  }

  public Object visitSetCompExpr(net.sourceforge.czt.z.jaxb.gen.SetCompExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetCompExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.SetCompExpr erg = mZFactory_.createSetCompExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSetCompExpr", erg);
    return erg;
  }

  public Object visitApplExpr(net.sourceforge.czt.z.jaxb.gen.ApplExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitApplExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    Boolean mixfix =
      (Boolean) jaxbObject.isMixfix();
    net.sourceforge.czt.z.ast.ApplExpr erg = mZFactory_.createApplExpr(expr, mixfix);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitApplExpr", erg);
    return erg;
  }

  public Object visitNumStroke(net.sourceforge.czt.z.jaxb.gen.NumStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNumStroke", jaxbObject);
    net.sourceforge.czt.base.ast.Digit digit =
      (net.sourceforge.czt.base.ast.Digit) dispatch(jaxbObject.getDigit());
    net.sourceforge.czt.z.ast.NumStroke erg = mZFactory_.createNumStroke(digit);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNumStroke", erg);
    return erg;
  }

  public Object visitConjPara(net.sourceforge.czt.z.jaxb.gen.ConjPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConjPara", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.ConjPara erg = mZFactory_.createConjPara(nameList, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConjPara", erg);
    return erg;
  }

  public Object visitDirective(net.sourceforge.czt.z.jaxb.gen.Directive jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDirective", jaxbObject);
    String command =
      (String) dispatch(jaxbObject.getCommand());
    String unicode =
      (String) dispatch(jaxbObject.getUnicode());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.DirectiveType directiveType = null;
    if (jaxbObject.getDirectiveType() != null) {
      String directiveTypeJaxb = jaxbObject.getDirectiveType().value();
            
      directiveType = net.sourceforge.czt.z.ast.DirectiveType.valueOf(directiveTypeJaxb);
    }
    net.sourceforge.czt.z.ast.Directive erg = mZFactory_.createDirective(command, unicode, directiveType);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDirective", erg);
    return erg;
  }

  public Object visitForallPred(net.sourceforge.czt.z.jaxb.gen.ForallPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitForallPred", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.ForallPred erg = mZFactory_.createForallPred(schText, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitForallPred", erg);
    return erg;
  }

  public Object visitZNumeral(net.sourceforge.czt.z.jaxb.gen.ZNumeral jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZNumeral", jaxbObject);
    java.math.BigInteger value =
      (java.math.BigInteger) dispatch(jaxbObject.getValue());
    net.sourceforge.czt.z.ast.ZNumeral erg = mZFactory_.createZNumeral(value);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZNumeral", erg);
    return erg;
  }

  public Object visitExists1Pred(net.sourceforge.czt.z.jaxb.gen.Exists1Pred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExists1Pred", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.Exists1Pred erg = mZFactory_.createExists1Pred(schText, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExists1Pred", erg);
    return erg;
  }

  public Object visitOperand(net.sourceforge.czt.z.jaxb.gen.Operand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperand", jaxbObject);
    Boolean list =
      (Boolean) jaxbObject.isList();
    net.sourceforge.czt.z.ast.Operand erg = mZFactory_.createOperand(list);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOperand", erg);
    return erg;
  }

  public Object visitRenameExpr(net.sourceforge.czt.z.jaxb.gen.RenameExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.RenameList renameList =
      (net.sourceforge.czt.z.ast.RenameList) dispatch(jaxbObject.getRenameList());
    net.sourceforge.czt.z.ast.RenameExpr erg = mZFactory_.createRenameExpr(expr, renameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRenameExpr", erg);
    return erg;
  }

  public Object visitCondExpr(net.sourceforge.czt.z.jaxb.gen.CondExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCondExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.CondExpr erg = mZFactory_.createCondExpr(pred, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCondExpr", erg);
    return erg;
  }

  public Object visitNextStroke(net.sourceforge.czt.z.jaxb.gen.NextStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNextStroke", jaxbObject);
    net.sourceforge.czt.z.ast.NextStroke erg = mZFactory_.createNextStroke();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNextStroke", erg);
    return erg;
  }

  public Object visitProjExpr(net.sourceforge.czt.z.jaxb.gen.ProjExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProjExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.ProjExpr erg = mZFactory_.createProjExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProjExpr", erg);
    return erg;
  }

  public Object visitZDeclList(net.sourceforge.czt.z.jaxb.gen.ZDeclList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZDeclList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Decl> decl = new java.util.Vector<net.sourceforge.czt.z.ast.Decl>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Decl> 
					
		obj : jaxbObject.getDecl()) {
	  net.sourceforge.czt.z.ast.Decl o = (net.sourceforge.czt.z.ast.Decl) dispatch(obj);
	  decl.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZDeclList erg = mZFactory_.createZDeclList(decl);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZDeclList", erg);
    return erg;
  }

  public Object visitLocAnn(net.sourceforge.czt.z.jaxb.gen.LocAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLocAnn", jaxbObject);
    String loc =
      (String) dispatch(jaxbObject.getLoc());
    java.math.BigInteger line =
      (java.math.BigInteger) dispatch(jaxbObject.getLine());
    java.math.BigInteger col =
      (java.math.BigInteger) dispatch(jaxbObject.getCol());
    java.math.BigInteger start =
      (java.math.BigInteger) dispatch(jaxbObject.getStart());
    java.math.BigInteger length =
      (java.math.BigInteger) dispatch(jaxbObject.getLength());
    net.sourceforge.czt.z.ast.LocAnn erg = mZFactory_.createLocAnn(loc, line, col, start, length);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLocAnn", erg);
    return erg;
  }

  public Object visitHideExpr(net.sourceforge.czt.z.jaxb.gen.HideExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.HideExpr erg = mZFactory_.createHideExpr(expr, nameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideExpr", erg);
    return erg;
  }

  public Object visitSchExpr(net.sourceforge.czt.z.jaxb.gen.SchExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.SchExpr erg = mZFactory_.createSchExpr(schText);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSchExpr", erg);
    return erg;
  }

  public Object visitGenericType(net.sourceforge.czt.z.jaxb.gen.GenericType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGenericType", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
            
    java.util.List<net.sourceforge.czt.z.ast.Type2> type = new java.util.Vector<net.sourceforge.czt.z.ast.Type2>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Type2> 
					
		obj : jaxbObject.getType()) {
	  net.sourceforge.czt.z.ast.Type2 o = (net.sourceforge.czt.z.ast.Type2) dispatch(obj);
	  type.add(o);
	}
    
    net.sourceforge.czt.z.ast.GenericType erg = mZFactory_.createGenericType(nameList, type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGenericType", erg);
    return erg;
  }

  public Object visitNameSectTypeTriple(net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSectTypeTriple", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    String sect =
      (String) dispatch(jaxbObject.getSect());
    net.sourceforge.czt.z.ast.Type type =
      (net.sourceforge.czt.z.ast.Type) dispatch(jaxbObject.getType());
    net.sourceforge.czt.z.ast.NameSectTypeTriple erg = mZFactory_.createNameSectTypeTriple(name, sect, type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSectTypeTriple", erg);
    return erg;
  }

  public Object visitExists1Expr(net.sourceforge.czt.z.jaxb.gen.Exists1Expr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExists1Expr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Exists1Expr erg = mZFactory_.createExists1Expr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExists1Expr", erg);
    return erg;
  }

  public Object visitLatexMarkupPara(net.sourceforge.czt.z.jaxb.gen.LatexMarkupPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLatexMarkupPara", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Directive> directive = new java.util.Vector<net.sourceforge.czt.z.ast.Directive>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Directive> 
					
		obj : jaxbObject.getDirective()) {
	  net.sourceforge.czt.z.ast.Directive o = (net.sourceforge.czt.z.ast.Directive) dispatch(obj);
	  directive.add(o);
	}
    
    net.sourceforge.czt.z.ast.LatexMarkupPara erg = mZFactory_.createLatexMarkupPara(directive);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLatexMarkupPara", erg);
    return erg;
  }

  public Object visitZRenameList(net.sourceforge.czt.z.jaxb.gen.ZRenameList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZRenameList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.NewOldPair> newOldPair = new java.util.Vector<net.sourceforge.czt.z.ast.NewOldPair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NewOldPair> 
					
		obj : jaxbObject.getNewOldPair()) {
	  net.sourceforge.czt.z.ast.NewOldPair o = (net.sourceforge.czt.z.ast.NewOldPair) dispatch(obj);
	  newOldPair.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZRenameList erg = mZFactory_.createZRenameList(newOldPair);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZRenameList", erg);
    return erg;
  }

  public Object visitNameTypePair(net.sourceforge.czt.z.jaxb.gen.NameTypePair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameTypePair", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Type type =
      (net.sourceforge.czt.z.ast.Type) dispatch(jaxbObject.getType());
    net.sourceforge.czt.z.ast.NameTypePair erg = mZFactory_.createNameTypePair(name, type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameTypePair", erg);
    return erg;
  }

  public Object visitZStrokeList(net.sourceforge.czt.z.jaxb.gen.ZStrokeList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZStrokeList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Stroke> stroke = new java.util.Vector<net.sourceforge.czt.z.ast.Stroke>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Stroke> 
					
		obj : jaxbObject.getStroke()) {
	  net.sourceforge.czt.z.ast.Stroke o = (net.sourceforge.czt.z.ast.Stroke) dispatch(obj);
	  stroke.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZStrokeList erg = mZFactory_.createZStrokeList(stroke);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZStrokeList", erg);
    return erg;
  }

  public Object visitPowerType(net.sourceforge.czt.z.jaxb.gen.PowerType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPowerType", jaxbObject);
    net.sourceforge.czt.z.ast.Type2 type =
      (net.sourceforge.czt.z.ast.Type2) dispatch(jaxbObject.getType());
    net.sourceforge.czt.z.ast.PowerType erg = mZFactory_.createPowerType(type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPowerType", erg);
    return erg;
  }

  public Object visitParenAnn(net.sourceforge.czt.z.jaxb.gen.ParenAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParenAnn", jaxbObject);
    net.sourceforge.czt.z.ast.ParenAnn erg = mZFactory_.createParenAnn();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParenAnn", erg);
    return erg;
  }

  public Object visitPipeExpr(net.sourceforge.czt.z.jaxb.gen.PipeExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPipeExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.PipeExpr erg = mZFactory_.createPipeExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPipeExpr", erg);
    return erg;
  }

  public Object visitTypeAnn(net.sourceforge.czt.z.jaxb.gen.TypeAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTypeAnn", jaxbObject);
    net.sourceforge.czt.z.ast.Type type =
      (net.sourceforge.czt.z.ast.Type) dispatch(jaxbObject.getType());
    net.sourceforge.czt.z.ast.TypeAnn erg = mZFactory_.createTypeAnn(type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTypeAnn", erg);
    return erg;
  }

  public Object visitAxPara(net.sourceforge.czt.z.jaxb.gen.AxPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAxPara", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Box box = null;
    if (jaxbObject.getBox() != null) {
      String boxJaxb = jaxbObject.getBox().value();
            
      box = net.sourceforge.czt.z.ast.Box.valueOf(boxJaxb);
    }
    net.sourceforge.czt.z.ast.AxPara erg = mZFactory_.createAxPara(nameList, schText, box);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAxPara", erg);
    return erg;
  }

  public Object visitInStroke(net.sourceforge.czt.z.jaxb.gen.InStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInStroke", jaxbObject);
    net.sourceforge.czt.z.ast.InStroke erg = mZFactory_.createInStroke();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInStroke", erg);
    return erg;
  }

  public Object visitAndExpr(net.sourceforge.czt.z.jaxb.gen.AndExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAndExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.AndExpr erg = mZFactory_.createAndExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAndExpr", erg);
    return erg;
  }

  public Object visitImpliesExpr(net.sourceforge.czt.z.jaxb.gen.ImpliesExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitImpliesExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.ImpliesExpr erg = mZFactory_.createImpliesExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitImpliesExpr", erg);
    return erg;
  }

  public Object visitZBranchList(net.sourceforge.czt.z.jaxb.gen.ZBranchList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZBranchList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Branch> branch = new java.util.Vector<net.sourceforge.czt.z.ast.Branch>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Branch> 
					
		obj : jaxbObject.getBranch()) {
	  net.sourceforge.czt.z.ast.Branch o = (net.sourceforge.czt.z.ast.Branch) dispatch(obj);
	  branch.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZBranchList erg = mZFactory_.createZBranchList(branch);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZBranchList", erg);
    return erg;
  }

  public Object visitSchemaType(net.sourceforge.czt.z.jaxb.gen.SchemaType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSchemaType", jaxbObject);
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.z.ast.SchemaType erg = mZFactory_.createSchemaType(signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSchemaType", erg);
    return erg;
  }

  public Object visitOutStroke(net.sourceforge.czt.z.jaxb.gen.OutStroke jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOutStroke", jaxbObject);
    net.sourceforge.czt.z.ast.OutStroke erg = mZFactory_.createOutStroke();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOutStroke", erg);
    return erg;
  }

  public Object visitNumExpr(net.sourceforge.czt.z.jaxb.gen.NumExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNumExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Numeral numeral =
      (net.sourceforge.czt.z.ast.Numeral) dispatch(jaxbObject.getNumeral());
    net.sourceforge.czt.z.ast.NumExpr erg = mZFactory_.createNumExpr(numeral);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNumExpr", erg);
    return erg;
  }

  public Object visitZExprList(net.sourceforge.czt.z.jaxb.gen.ZExprList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZExprList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZExprList erg = mZFactory_.createZExprList(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZExprList", erg);
    return erg;
  }

  public Object visitExistsExpr(net.sourceforge.czt.z.jaxb.gen.ExistsExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExistsExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.ExistsExpr erg = mZFactory_.createExistsExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExistsExpr", erg);
    return erg;
  }

  public Object visitZSect(net.sourceforge.czt.z.jaxb.gen.ZSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZSect", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
            
    java.util.List<net.sourceforge.czt.z.ast.Parent> parent = new java.util.Vector<net.sourceforge.czt.z.ast.Parent>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Parent> 
					
		obj : jaxbObject.getParent()) {
	  net.sourceforge.czt.z.ast.Parent o = (net.sourceforge.czt.z.ast.Parent) dispatch(obj);
	  parent.add(o);
	}
    
    net.sourceforge.czt.z.ast.ParaList paraList =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getParaList());
    net.sourceforge.czt.z.ast.ZSect erg = mZFactory_.createZSect(name, parent, paraList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZSect", erg);
    return erg;
  }

  public Object visitLetExpr(net.sourceforge.czt.z.jaxb.gen.LetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLetExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.LetExpr erg = mZFactory_.createLetExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLetExpr", erg);
    return erg;
  }

  public Object visitProdType(net.sourceforge.czt.z.jaxb.gen.ProdType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProdType", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Type2> type = new java.util.Vector<net.sourceforge.czt.z.ast.Type2>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Type2> 
					
		obj : jaxbObject.getType()) {
	  net.sourceforge.czt.z.ast.Type2 o = (net.sourceforge.czt.z.ast.Type2) dispatch(obj);
	  type.add(o);
	}
    
    net.sourceforge.czt.z.ast.ProdType erg = mZFactory_.createProdType(type);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProdType", erg);
    return erg;
  }

  public Object visitLambdaExpr(net.sourceforge.czt.z.jaxb.gen.LambdaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitLambdaExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.LambdaExpr erg = mZFactory_.createLambdaExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitLambdaExpr", erg);
    return erg;
  }

  public Object visitAndPred(net.sourceforge.czt.z.jaxb.gen.AndPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAndPred", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Pred> pred = new java.util.Vector<net.sourceforge.czt.z.ast.Pred>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Pred> 
					
		obj : jaxbObject.getPred()) {
	  net.sourceforge.czt.z.ast.Pred o = (net.sourceforge.czt.z.ast.Pred) dispatch(obj);
	  pred.add(o);
	}
    
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.And and = null;
    if (jaxbObject.getAnd() != null) {
      String andJaxb = jaxbObject.getAnd().value();
            
      and = net.sourceforge.czt.z.ast.And.valueOf(andJaxb);
    }
    net.sourceforge.czt.z.ast.AndPred erg = mZFactory_.createAndPred(pred, and);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAndPred", erg);
    return erg;
  }

  public Object visitExistsPred(net.sourceforge.czt.z.jaxb.gen.ExistsPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExistsPred", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.ExistsPred erg = mZFactory_.createExistsPred(schText, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExistsPred", erg);
    return erg;
  }

  public Object visitFreePara(net.sourceforge.czt.z.jaxb.gen.FreePara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFreePara", jaxbObject);
    net.sourceforge.czt.z.ast.FreetypeList freetypeList =
      (net.sourceforge.czt.z.ast.FreetypeList) dispatch(jaxbObject.getFreetypeList());
    net.sourceforge.czt.z.ast.FreePara erg = mZFactory_.createFreePara(freetypeList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitFreePara", erg);
    return erg;
  }

  public Object visitOrExpr(net.sourceforge.czt.z.jaxb.gen.OrExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOrExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.OrExpr erg = mZFactory_.createOrExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOrExpr", erg);
    return erg;
  }

  public Object visitTupleExpr(net.sourceforge.czt.z.jaxb.gen.TupleExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTupleExpr", jaxbObject);
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    net.sourceforge.czt.z.ast.TupleExpr erg = mZFactory_.createTupleExpr(exprList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTupleExpr", erg);
    return erg;
  }

  public Object visitPowerExpr(net.sourceforge.czt.z.jaxb.gen.PowerExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPowerExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.PowerExpr erg = mZFactory_.createPowerExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPowerExpr", erg);
    return erg;
  }

  public Object visitConstDecl(net.sourceforge.czt.z.jaxb.gen.ConstDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConstDecl", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.ConstDecl erg = mZFactory_.createConstDecl(name, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConstDecl", erg);
    return erg;
  }

  public Object visitZParaList(net.sourceforge.czt.z.jaxb.gen.ZParaList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZParaList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Para> para = new java.util.Vector<net.sourceforge.czt.z.ast.Para>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Para> 
					
		obj : jaxbObject.getPara()) {
	  net.sourceforge.czt.z.ast.Para o = (net.sourceforge.czt.z.ast.Para) dispatch(obj);
	  para.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZParaList erg = mZFactory_.createZParaList(para);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZParaList", erg);
    return erg;
  }

  public Object visitThetaExpr(net.sourceforge.czt.z.jaxb.gen.ThetaExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitThetaExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.StrokeList strokeList =
      (net.sourceforge.czt.z.ast.StrokeList) dispatch(jaxbObject.getStrokeList());
    net.sourceforge.czt.z.ast.ThetaExpr erg = mZFactory_.createThetaExpr(expr, strokeList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitThetaExpr", erg);
    return erg;
  }

  public Object visitOperator(net.sourceforge.czt.z.jaxb.gen.Operator jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperator", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    net.sourceforge.czt.z.ast.Operator erg = mZFactory_.createOperator(word);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOperator", erg);
    return erg;
  }

  public Object visitParent(net.sourceforge.czt.z.jaxb.gen.Parent jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParent", jaxbObject);
    String word =
      (String) dispatch(jaxbObject.getWord());
    net.sourceforge.czt.z.ast.Parent erg = mZFactory_.createParent(word);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParent", erg);
    return erg;
  }

  public Object visitNegExpr(net.sourceforge.czt.z.jaxb.gen.NegExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNegExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.NegExpr erg = mZFactory_.createNegExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNegExpr", erg);
    return erg;
  }

  public Object visitMemPred(net.sourceforge.czt.z.jaxb.gen.MemPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitMemPred", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    Boolean mixfix =
      (Boolean) jaxbObject.isMixfix();
    net.sourceforge.czt.z.ast.MemPred erg = mZFactory_.createMemPred(expr, mixfix);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitMemPred", erg);
    return erg;
  }

  public Object visitCompExpr(net.sourceforge.czt.z.jaxb.gen.CompExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCompExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.z.ast.CompExpr erg = mZFactory_.createCompExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCompExpr", erg);
    return erg;
  }

  public Object visitForallExpr(net.sourceforge.czt.z.jaxb.gen.ForallExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitForallExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.ForallExpr erg = mZFactory_.createForallExpr(schText, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitForallExpr", erg);
    return erg;
  }

  public Object visitSetExpr(net.sourceforge.czt.z.jaxb.gen.SetExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSetExpr", jaxbObject);
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    net.sourceforge.czt.z.ast.SetExpr erg = mZFactory_.createSetExpr(exprList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSetExpr", erg);
    return erg;
  }

  public Object visitBindSelExpr(net.sourceforge.czt.z.jaxb.gen.BindSelExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBindSelExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.BindSelExpr erg = mZFactory_.createBindSelExpr(expr, name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBindSelExpr", erg);
    return erg;
  }

  public Object visitBranch(net.sourceforge.czt.z.jaxb.gen.Branch jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitBranch", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Branch erg = mZFactory_.createBranch(name, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitBranch", erg);
    return erg;
  }

  public Object visitFalsePred(net.sourceforge.czt.z.jaxb.gen.FalsePred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFalsePred", jaxbObject);
    net.sourceforge.czt.z.ast.FalsePred erg = mZFactory_.createFalsePred();

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitFalsePred", erg);
    return erg;
  }

  public Object visitZNameList(net.sourceforge.czt.z.jaxb.gen.ZNameList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZNameList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Name> name = new java.util.Vector<net.sourceforge.czt.z.ast.Name>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Name> 
					
		obj : jaxbObject.getName()) {
	  net.sourceforge.czt.z.ast.Name o = (net.sourceforge.czt.z.ast.Name) dispatch(obj);
	  name.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZNameList erg = mZFactory_.createZNameList(name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZNameList", erg);
    return erg;
  }

  public Object visitRefExpr(net.sourceforge.czt.z.jaxb.gen.RefExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRefExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    Boolean mixfix =
      (Boolean) jaxbObject.isMixfix();
    Boolean explicit =
      (Boolean) jaxbObject.isExplicit();
    net.sourceforge.czt.z.ast.RefExpr erg = mZFactory_.createRefExpr(name, exprList, mixfix, explicit);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRefExpr", erg);
    return erg;
  }

  public Object visitGivenPara(net.sourceforge.czt.z.jaxb.gen.GivenPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGivenPara", jaxbObject);
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.GivenPara erg = mZFactory_.createGivenPara(nameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGivenPara", erg);
    return erg;
  }

  public Object visitNegPred(net.sourceforge.czt.z.jaxb.gen.NegPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNegPred", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.z.ast.NegPred erg = mZFactory_.createNegPred(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNegPred", erg);
    return erg;
  }

  public Object visitGenParamType(net.sourceforge.czt.z.jaxb.gen.GenParamType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitGenParamType", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.GenParamType erg = mZFactory_.createGenParamType(name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitGenParamType", erg);
    return erg;
  }

  public Object visitSectTypeEnvAnn(net.sourceforge.czt.z.jaxb.gen.SectTypeEnvAnn jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSectTypeEnvAnn", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.NameSectTypeTriple> nameSectTypeTriple = new java.util.Vector<net.sourceforge.czt.z.ast.NameSectTypeTriple>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameSectTypeTriple> 
					
		obj : jaxbObject.getNameSectTypeTriple()) {
	  net.sourceforge.czt.z.ast.NameSectTypeTriple o = (net.sourceforge.czt.z.ast.NameSectTypeTriple) dispatch(obj);
	  nameSectTypeTriple.add(o);
	}
    
    net.sourceforge.czt.z.ast.SectTypeEnvAnn erg = mZFactory_.createSectTypeEnvAnn(nameSectTypeTriple);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSectTypeEnvAnn", erg);
    return erg;
  }

  public Object visitFreetype(net.sourceforge.czt.z.jaxb.gen.Freetype jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitFreetype", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.BranchList branchList =
      (net.sourceforge.czt.z.ast.BranchList) dispatch(jaxbObject.getBranchList());
    net.sourceforge.czt.z.ast.Freetype erg = mZFactory_.createFreetype(name, branchList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitFreetype", erg);
    return erg;
  }

  public Object visitIffPred(net.sourceforge.czt.z.jaxb.gen.IffPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitIffPred", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Pred> pred = new java.util.Vector<net.sourceforge.czt.z.ast.Pred>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Pred> 
					
		obj : jaxbObject.getPred()) {
	  net.sourceforge.czt.z.ast.Pred o = (net.sourceforge.czt.z.ast.Pred) dispatch(obj);
	  pred.add(o);
	}
    
    net.sourceforge.czt.z.ast.IffPred erg = mZFactory_.createIffPred(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitIffPred", erg);
    return erg;
  }

  public Object visitImpliesPred(net.sourceforge.czt.z.jaxb.gen.ImpliesPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitImpliesPred", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Pred> pred = new java.util.Vector<net.sourceforge.czt.z.ast.Pred>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Pred> 
					
		obj : jaxbObject.getPred()) {
	  net.sourceforge.czt.z.ast.Pred o = (net.sourceforge.czt.z.ast.Pred) dispatch(obj);
	  pred.add(o);
	}
    
    net.sourceforge.czt.z.ast.ImpliesPred erg = mZFactory_.createImpliesPred(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitImpliesPred", erg);
    return erg;
  }

  public Object visitSignature(net.sourceforge.czt.z.jaxb.gen.Signature jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSignature", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.NameTypePair> nameTypePair = new java.util.Vector<net.sourceforge.czt.z.ast.NameTypePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameTypePair> 
					
		obj : jaxbObject.getNameTypePair()) {
	  net.sourceforge.czt.z.ast.NameTypePair o = (net.sourceforge.czt.z.ast.NameTypePair) dispatch(obj);
	  nameTypePair.add(o);
	}
    
    net.sourceforge.czt.z.ast.Signature erg = mZFactory_.createSignature(nameTypePair);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSignature", erg);
    return erg;
  }

  public Object visitNarrSect(net.sourceforge.czt.z.jaxb.gen.NarrSect jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNarrSect", jaxbObject);
    java.util.List<Object> content = new java.util.Vector<Object>();
    if (jaxbObject.getContent() != null) {
      content.add(dispatch(jaxbObject.getContent()));
    }
    net.sourceforge.czt.z.ast.NarrSect erg = mZFactory_.createNarrSect(content);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNarrSect", erg);
    return erg;
  }

  public Object visitSpec(net.sourceforge.czt.z.jaxb.gen.Spec jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSpec", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Sect> sect = new java.util.Vector<net.sourceforge.czt.z.ast.Sect>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Sect> 
					
		obj : jaxbObject.getSect()) {
	  net.sourceforge.czt.z.ast.Sect o = (net.sourceforge.czt.z.ast.Sect) dispatch(obj);
	  sect.add(o);
	}
    
    String version =
      (String) dispatch(jaxbObject.getVersion());
    net.sourceforge.czt.z.ast.Spec erg = mZFactory_.createSpec(sect, version);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSpec", erg);
    return erg;
  }

  public Object visitProdExpr(net.sourceforge.czt.z.jaxb.gen.ProdExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProdExpr", jaxbObject);
    net.sourceforge.czt.z.ast.ExprList exprList =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getExprList());
    net.sourceforge.czt.z.ast.ProdExpr erg = mZFactory_.createProdExpr(exprList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProdExpr", erg);
    return erg;
  }

  public Object visitExprPred(net.sourceforge.czt.z.jaxb.gen.ExprPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExprPred", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.ExprPred erg = mZFactory_.createExprPred(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExprPred", erg);
    return erg;
  }

  public Object visitZFreetypeList(net.sourceforge.czt.z.jaxb.gen.ZFreetypeList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZFreetypeList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Freetype> freetype = new java.util.Vector<net.sourceforge.czt.z.ast.Freetype>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Freetype> 
					
		obj : jaxbObject.getFreetype()) {
	  net.sourceforge.czt.z.ast.Freetype o = (net.sourceforge.czt.z.ast.Freetype) dispatch(obj);
	  freetype.add(o);
	}
    
    net.sourceforge.czt.z.ast.ZFreetypeList erg = mZFactory_.createZFreetypeList(freetype);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZFreetypeList", erg);
    return erg;
  }

  public Object visitOrPred(net.sourceforge.czt.z.jaxb.gen.OrPred jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOrPred", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Pred> pred = new java.util.Vector<net.sourceforge.czt.z.ast.Pred>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Pred> 
					
		obj : jaxbObject.getPred()) {
	  net.sourceforge.czt.z.ast.Pred o = (net.sourceforge.czt.z.ast.Pred) dispatch(obj);
	  pred.add(o);
	}
    
    net.sourceforge.czt.z.ast.OrPred erg = mZFactory_.createOrPred(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOrPred", erg);
    return erg;
  }
}
