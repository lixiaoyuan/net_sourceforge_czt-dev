
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.util;

import java.util.*;

import net.sourceforge.czt.base.ast.Term;

import net.sourceforge.czt.z.ast.*;

/**
 * <p>A flyweight object factory for the AST.</p>
 *
 * <p>This object factory maintains a set of terms that have been
 * created with this factory and returns those instead of creating a new
 * one when asked to create a Term that is equal to an already existing
 * one.</p>
 *
 * <p>This implementation is based on hash maps over Terms and is
 * therefore only applicable to Terms that are never modified.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public class FlyweightFactory
  implements  net.sourceforge.czt.z.ast.ZFactory
{
  private net.sourceforge.czt.z.ast.ZFactory factory_ =
    new net.sourceforge.czt.z.impl.ZFactoryImpl();
    
    // TODO: couldn't this be ? extends Term? + String... ergh.
  private Map<List<Object>,Term> terms_ = new HashMap<List<Object>,Term>();
  private int nCreates_ = 0;

  /**
   * Creates a new flyweight factory that uses the given base factory
   * for creating AST terms.
   */
  public FlyweightFactory(net.sourceforge.czt.z.ast.ZFactory factory)
  {
    factory_ = factory;
  }

  /**
   * Creates an instance of {@link DecorExpr}.
   *
   * @return the new instance of DecorExpr.
   */
  public DecorExpr createDecorExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("DecorExpr");
    DecorExpr result = (DecorExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createDecorExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link DecorExpr} with the given children.
   *
   * @return the new instance of DecorExpr.
   */
  public DecorExpr createDecorExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Stroke  stroke)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("DecorExpr");
    argList.add(expr);
    argList.add(stroke);
    DecorExpr result = (DecorExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createDecorExpr(expr, stroke);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link UnparsedPara}.
   *
   * @return the new instance of UnparsedPara.
   */
  public UnparsedPara createUnparsedPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("UnparsedPara");
    UnparsedPara result = (UnparsedPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createUnparsedPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link UnparsedPara} with the given children.
   *
   * @return the new instance of UnparsedPara.
   */
  public UnparsedPara createUnparsedPara( java.util.List<? extends Object>  content)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("UnparsedPara");
    argList.add(content);
    UnparsedPara result = (UnparsedPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createUnparsedPara(content);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZSchText}.
   *
   * @return the new instance of ZSchText.
   */
  public ZSchText createZSchText()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZSchText");
    ZSchText result = (ZSchText) terms_.get(argList);
    if (result == null) {
      result = factory_.createZSchText();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZSchText} with the given children.
   *
   * @return the new instance of ZSchText.
   */
  public ZSchText createZSchText( net.sourceforge.czt.z.ast.DeclList  declList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ZSchText");
    argList.add(declList);
    argList.add(pred);
    ZSchText result = (ZSchText) terms_.get(argList);
    if (result == null) {
      result = factory_.createZSchText(declList, pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NewOldPair}.
   *
   * @return the new instance of NewOldPair.
   */
  public NewOldPair createNewOldPair()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NewOldPair");
    NewOldPair result = (NewOldPair) terms_.get(argList);
    if (result == null) {
      result = factory_.createNewOldPair();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NewOldPair} with the given children.
   *
   * @return the new instance of NewOldPair.
   */
  public NewOldPair createNewOldPair(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NewOldPair");
    argList.add(name);
    NewOldPair result = (NewOldPair) terms_.get(argList);
    if (result == null) {
      result = factory_.createNewOldPair(name);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link VarDecl}.
   *
   * @return the new instance of VarDecl.
   */
  public VarDecl createVarDecl()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("VarDecl");
    VarDecl result = (VarDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createVarDecl();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link VarDecl} with the given children.
   *
   * @return the new instance of VarDecl.
   */
  public VarDecl createVarDecl( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("VarDecl");
    argList.add(nameList);
    argList.add(expr);
    VarDecl result = (VarDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createVarDecl(nameList, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZName}.
   *
   * @return the new instance of ZName.
   */
  public ZName createZName()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZName");
    ZName result = (ZName) terms_.get(argList);
    if (result == null) {
      result = factory_.createZName();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZName} with the given children.
   *
   * @return the new instance of ZName.
   */
  public ZName createZName( String  word, net.sourceforge.czt.z.ast.StrokeList  strokeList, String  id)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(3);
    argList.add("ZName");
    argList.add(word);
    argList.add(strokeList);
    argList.add(id);
    ZName result = (ZName) terms_.get(argList);
    if (result == null) {
      result = factory_.createZName(word, strokeList, id);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link UnparsedZSect}.
   *
   * @return the new instance of UnparsedZSect.
   */
  public UnparsedZSect createUnparsedZSect()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("UnparsedZSect");
    UnparsedZSect result = (UnparsedZSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createUnparsedZSect();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link UnparsedZSect} with the given children.
   *
   * @return the new instance of UnparsedZSect.
   */
  public UnparsedZSect createUnparsedZSect( java.util.List<? extends Object>  content)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("UnparsedZSect");
    argList.add(content);
    UnparsedZSect result = (UnparsedZSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createUnparsedZSect(content);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OptempPara}.
   *
   * @return the new instance of OptempPara.
   */
  public OptempPara createOptempPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("OptempPara");
    OptempPara result = (OptempPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createOptempPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OptempPara} with the given children.
   *
   * @return the new instance of OptempPara.
   */
  public OptempPara createOptempPara(java.util.List<? extends net.sourceforge.czt.z.ast.Oper>
 oper,net.sourceforge.czt.z.ast.Cat
 cat,net.sourceforge.czt.z.ast.Assoc
 assoc, java.math.BigInteger  prec)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(4);
    argList.add("OptempPara");
    argList.add(oper);
    argList.add(cat);
    argList.add(assoc);
    argList.add(prec);
    OptempPara result = (OptempPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createOptempPara(oper, cat, assoc, prec);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link InclDecl}.
   *
   * @return the new instance of InclDecl.
   */
  public InclDecl createInclDecl()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("InclDecl");
    InclDecl result = (InclDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createInclDecl();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link InclDecl} with the given children.
   *
   * @return the new instance of InclDecl.
   */
  public InclDecl createInclDecl( net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("InclDecl");
    argList.add(expr);
    InclDecl result = (InclDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createInclDecl(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NarrPara}.
   *
   * @return the new instance of NarrPara.
   */
  public NarrPara createNarrPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NarrPara");
    NarrPara result = (NarrPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createNarrPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NarrPara} with the given children.
   *
   * @return the new instance of NarrPara.
   */
  public NarrPara createNarrPara( java.util.List<? extends Object>  content)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NarrPara");
    argList.add(content);
    NarrPara result = (NarrPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createNarrPara(content);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TupleSelExpr}.
   *
   * @return the new instance of TupleSelExpr.
   */
  public TupleSelExpr createTupleSelExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("TupleSelExpr");
    TupleSelExpr result = (TupleSelExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createTupleSelExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TupleSelExpr} with the given children.
   *
   * @return the new instance of TupleSelExpr.
   */
  public TupleSelExpr createTupleSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("TupleSelExpr");
    argList.add(expr);
    argList.add(numeral);
    TupleSelExpr result = (TupleSelExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createTupleSelExpr(expr, numeral);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link BindExpr}.
   *
   * @return the new instance of BindExpr.
   */
  public BindExpr createBindExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("BindExpr");
    BindExpr result = (BindExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createBindExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link BindExpr} with the given children.
   *
   * @return the new instance of BindExpr.
   */
  public BindExpr createBindExpr( net.sourceforge.czt.z.ast.DeclList  declList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("BindExpr");
    argList.add(declList);
    BindExpr result = (BindExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createBindExpr(declList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link MuExpr}.
   *
   * @return the new instance of MuExpr.
   */
  public MuExpr createMuExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("MuExpr");
    MuExpr result = (MuExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createMuExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link MuExpr} with the given children.
   *
   * @return the new instance of MuExpr.
   */
  public MuExpr createMuExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("MuExpr");
    argList.add(schText);
    argList.add(expr);
    MuExpr result = (MuExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createMuExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TruePred}.
   *
   * @return the new instance of TruePred.
   */
  public TruePred createTruePred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("TruePred");
    TruePred result = (TruePred) terms_.get(argList);
    if (result == null) {
      result = factory_.createTruePred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link IffExpr}.
   *
   * @return the new instance of IffExpr.
   */
  public IffExpr createIffExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("IffExpr");
    IffExpr result = (IffExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createIffExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link IffExpr} with the given children.
   *
   * @return the new instance of IffExpr.
   */
  public IffExpr createIffExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("IffExpr");
    argList.add(expr);
    IffExpr result = (IffExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createIffExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SignatureAnn}.
   *
   * @return the new instance of SignatureAnn.
   */
  public SignatureAnn createSignatureAnn()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SignatureAnn");
    SignatureAnn result = (SignatureAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createSignatureAnn();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SignatureAnn} with the given children.
   *
   * @return the new instance of SignatureAnn.
   */
  public SignatureAnn createSignatureAnn( net.sourceforge.czt.z.ast.Signature  signature)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("SignatureAnn");
    argList.add(signature);
    SignatureAnn result = (SignatureAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createSignatureAnn(signature);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GivenType}.
   *
   * @return the new instance of GivenType.
   */
  public GivenType createGivenType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("GivenType");
    GivenType result = (GivenType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGivenType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GivenType} with the given children.
   *
   * @return the new instance of GivenType.
   */
  public GivenType createGivenType( net.sourceforge.czt.z.ast.Name  name)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("GivenType");
    argList.add(name);
    GivenType result = (GivenType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGivenType(name);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PreExpr}.
   *
   * @return the new instance of PreExpr.
   */
  public PreExpr createPreExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("PreExpr");
    PreExpr result = (PreExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPreExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PreExpr} with the given children.
   *
   * @return the new instance of PreExpr.
   */
  public PreExpr createPreExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("PreExpr");
    argList.add(expr);
    PreExpr result = (PreExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPreExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SetCompExpr}.
   *
   * @return the new instance of SetCompExpr.
   */
  public SetCompExpr createSetCompExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SetCompExpr");
    SetCompExpr result = (SetCompExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSetCompExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SetCompExpr} with the given children.
   *
   * @return the new instance of SetCompExpr.
   */
  public SetCompExpr createSetCompExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("SetCompExpr");
    argList.add(schText);
    argList.add(expr);
    SetCompExpr result = (SetCompExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSetCompExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ApplExpr}.
   *
   * @return the new instance of ApplExpr.
   */
  public ApplExpr createApplExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ApplExpr");
    ApplExpr result = (ApplExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createApplExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ApplExpr} with the given children.
   *
   * @return the new instance of ApplExpr.
   */
  public ApplExpr createApplExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ApplExpr");
    argList.add(expr);
    argList.add(mixfix);
    ApplExpr result = (ApplExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createApplExpr(expr, mixfix);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NumStroke}.
   *
   * @return the new instance of NumStroke.
   */
  public NumStroke createNumStroke()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NumStroke");
    NumStroke result = (NumStroke) terms_.get(argList);
    if (result == null) {
      result = factory_.createNumStroke();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NumStroke} with the given children.
   *
   * @return the new instance of NumStroke.
   */
  public NumStroke createNumStroke( net.sourceforge.czt.base.ast.Digit  digit)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NumStroke");
    argList.add(digit);
    NumStroke result = (NumStroke) terms_.get(argList);
    if (result == null) {
      result = factory_.createNumStroke(digit);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ConjPara}.
   *
   * @return the new instance of ConjPara.
   */
  public ConjPara createConjPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ConjPara");
    ConjPara result = (ConjPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createConjPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ConjPara} with the given children.
   *
   * @return the new instance of ConjPara.
   */
  public ConjPara createConjPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ConjPara");
    argList.add(nameList);
    argList.add(pred);
    ConjPara result = (ConjPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createConjPara(nameList, pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Directive}.
   *
   * @return the new instance of Directive.
   */
  public Directive createDirective()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Directive");
    Directive result = (Directive) terms_.get(argList);
    if (result == null) {
      result = factory_.createDirective();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Directive} with the given children.
   *
   * @return the new instance of Directive.
   */
  public Directive createDirective( String  command, String  unicode,net.sourceforge.czt.z.ast.DirectiveType
 directiveType)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(3);
    argList.add("Directive");
    argList.add(command);
    argList.add(unicode);
    argList.add(directiveType);
    Directive result = (Directive) terms_.get(argList);
    if (result == null) {
      result = factory_.createDirective(command, unicode, directiveType);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ForallPred}.
   *
   * @return the new instance of ForallPred.
   */
  public ForallPred createForallPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ForallPred");
    ForallPred result = (ForallPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createForallPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ForallPred} with the given children.
   *
   * @return the new instance of ForallPred.
   */
  public ForallPred createForallPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ForallPred");
    argList.add(schText);
    argList.add(pred);
    ForallPred result = (ForallPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createForallPred(schText, pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZNumeral}.
   *
   * @return the new instance of ZNumeral.
   */
  public ZNumeral createZNumeral()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZNumeral");
    ZNumeral result = (ZNumeral) terms_.get(argList);
    if (result == null) {
      result = factory_.createZNumeral();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZNumeral} with the given children.
   *
   * @return the new instance of ZNumeral.
   */
  public ZNumeral createZNumeral( java.math.BigInteger  value)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZNumeral");
    argList.add(value);
    ZNumeral result = (ZNumeral) terms_.get(argList);
    if (result == null) {
      result = factory_.createZNumeral(value);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Exists1Pred}.
   *
   * @return the new instance of Exists1Pred.
   */
  public Exists1Pred createExists1Pred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Exists1Pred");
    Exists1Pred result = (Exists1Pred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExists1Pred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Exists1Pred} with the given children.
   *
   * @return the new instance of Exists1Pred.
   */
  public Exists1Pred createExists1Pred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("Exists1Pred");
    argList.add(schText);
    argList.add(pred);
    Exists1Pred result = (Exists1Pred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExists1Pred(schText, pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Operand}.
   *
   * @return the new instance of Operand.
   */
  public Operand createOperand()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Operand");
    Operand result = (Operand) terms_.get(argList);
    if (result == null) {
      result = factory_.createOperand();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Operand} with the given children.
   *
   * @return the new instance of Operand.
   */
  public Operand createOperand( Boolean  list)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("Operand");
    argList.add(list);
    Operand result = (Operand) terms_.get(argList);
    if (result == null) {
      result = factory_.createOperand(list);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link RenameExpr}.
   *
   * @return the new instance of RenameExpr.
   */
  public RenameExpr createRenameExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("RenameExpr");
    RenameExpr result = (RenameExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createRenameExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link RenameExpr} with the given children.
   *
   * @return the new instance of RenameExpr.
   */
  public RenameExpr createRenameExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("RenameExpr");
    argList.add(expr);
    argList.add(renameList);
    RenameExpr result = (RenameExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createRenameExpr(expr, renameList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link CondExpr}.
   *
   * @return the new instance of CondExpr.
   */
  public CondExpr createCondExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("CondExpr");
    CondExpr result = (CondExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createCondExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link CondExpr} with the given children.
   *
   * @return the new instance of CondExpr.
   */
  public CondExpr createCondExpr( net.sourceforge.czt.z.ast.Pred  pred,java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("CondExpr");
    argList.add(pred);
    argList.add(expr);
    CondExpr result = (CondExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createCondExpr(pred, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NextStroke}.
   *
   * @return the new instance of NextStroke.
   */
  public NextStroke createNextStroke()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NextStroke");
    NextStroke result = (NextStroke) terms_.get(argList);
    if (result == null) {
      result = factory_.createNextStroke();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProjExpr}.
   *
   * @return the new instance of ProjExpr.
   */
  public ProjExpr createProjExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ProjExpr");
    ProjExpr result = (ProjExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createProjExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProjExpr} with the given children.
   *
   * @return the new instance of ProjExpr.
   */
  public ProjExpr createProjExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ProjExpr");
    argList.add(expr);
    ProjExpr result = (ProjExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createProjExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZDeclList}.
   *
   * @return the new instance of ZDeclList.
   */
  public ZDeclList createZDeclList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZDeclList");
    ZDeclList result = (ZDeclList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZDeclList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZDeclList} with the given children.
   *
   * @return the new instance of ZDeclList.
   */
  public ZDeclList createZDeclList(java.util.List<? extends net.sourceforge.czt.z.ast.Decl>
 decl)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZDeclList");
    argList.add(decl);
    ZDeclList result = (ZDeclList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZDeclList(decl);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LocAnn}.
   *
   * @return the new instance of LocAnn.
   */
  public LocAnn createLocAnn()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("LocAnn");
    LocAnn result = (LocAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createLocAnn();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LocAnn} with the given children.
   *
   * @return the new instance of LocAnn.
   */
  public LocAnn createLocAnn( String  loc, java.math.BigInteger  line, java.math.BigInteger  col, java.math.BigInteger  start, java.math.BigInteger  length)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(5);
    argList.add("LocAnn");
    argList.add(loc);
    argList.add(line);
    argList.add(col);
    argList.add(start);
    argList.add(length);
    LocAnn result = (LocAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createLocAnn(loc, line, col, start, length);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link HideExpr}.
   *
   * @return the new instance of HideExpr.
   */
  public HideExpr createHideExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("HideExpr");
    HideExpr result = (HideExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createHideExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link HideExpr} with the given children.
   *
   * @return the new instance of HideExpr.
   */
  public HideExpr createHideExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.NameList  nameList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("HideExpr");
    argList.add(expr);
    argList.add(nameList);
    HideExpr result = (HideExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createHideExpr(expr, nameList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SchExpr}.
   *
   * @return the new instance of SchExpr.
   */
  public SchExpr createSchExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SchExpr");
    SchExpr result = (SchExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSchExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SchExpr} with the given children.
   *
   * @return the new instance of SchExpr.
   */
  public SchExpr createSchExpr( net.sourceforge.czt.z.ast.SchText  schText)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("SchExpr");
    argList.add(schText);
    SchExpr result = (SchExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSchExpr(schText);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GenericType}.
   *
   * @return the new instance of GenericType.
   */
  public GenericType createGenericType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("GenericType");
    GenericType result = (GenericType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGenericType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GenericType} with the given children.
   *
   * @return the new instance of GenericType.
   */
  public GenericType createGenericType( net.sourceforge.czt.z.ast.NameList  nameList,java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("GenericType");
    argList.add(nameList);
    argList.add(type);
    GenericType result = (GenericType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGenericType(nameList, type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NameSectTypeTriple}.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  public NameSectTypeTriple createNameSectTypeTriple()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NameSectTypeTriple");
    NameSectTypeTriple result = (NameSectTypeTriple) terms_.get(argList);
    if (result == null) {
      result = factory_.createNameSectTypeTriple();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NameSectTypeTriple} with the given children.
   *
   * @return the new instance of NameSectTypeTriple.
   */
  public NameSectTypeTriple createNameSectTypeTriple( net.sourceforge.czt.z.ast.Name  name, String  sect, net.sourceforge.czt.z.ast.Type  type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(3);
    argList.add("NameSectTypeTriple");
    argList.add(name);
    argList.add(sect);
    argList.add(type);
    NameSectTypeTriple result = (NameSectTypeTriple) terms_.get(argList);
    if (result == null) {
      result = factory_.createNameSectTypeTriple(name, sect, type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Exists1Expr}.
   *
   * @return the new instance of Exists1Expr.
   */
  public Exists1Expr createExists1Expr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Exists1Expr");
    Exists1Expr result = (Exists1Expr) terms_.get(argList);
    if (result == null) {
      result = factory_.createExists1Expr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Exists1Expr} with the given children.
   *
   * @return the new instance of Exists1Expr.
   */
  public Exists1Expr createExists1Expr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("Exists1Expr");
    argList.add(schText);
    argList.add(expr);
    Exists1Expr result = (Exists1Expr) terms_.get(argList);
    if (result == null) {
      result = factory_.createExists1Expr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LatexMarkupPara}.
   *
   * @return the new instance of LatexMarkupPara.
   */
  public LatexMarkupPara createLatexMarkupPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("LatexMarkupPara");
    LatexMarkupPara result = (LatexMarkupPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createLatexMarkupPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LatexMarkupPara} with the given children.
   *
   * @return the new instance of LatexMarkupPara.
   */
  public LatexMarkupPara createLatexMarkupPara(java.util.List<? extends net.sourceforge.czt.z.ast.Directive>
 directive)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("LatexMarkupPara");
    argList.add(directive);
    LatexMarkupPara result = (LatexMarkupPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createLatexMarkupPara(directive);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZRenameList}.
   *
   * @return the new instance of ZRenameList.
   */
  public ZRenameList createZRenameList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZRenameList");
    ZRenameList result = (ZRenameList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZRenameList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZRenameList} with the given children.
   *
   * @return the new instance of ZRenameList.
   */
  public ZRenameList createZRenameList(java.util.List<? extends net.sourceforge.czt.z.ast.NewOldPair>
 newOldPair)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZRenameList");
    argList.add(newOldPair);
    ZRenameList result = (ZRenameList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZRenameList(newOldPair);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NameTypePair}.
   *
   * @return the new instance of NameTypePair.
   */
  public NameTypePair createNameTypePair()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NameTypePair");
    NameTypePair result = (NameTypePair) terms_.get(argList);
    if (result == null) {
      result = factory_.createNameTypePair();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NameTypePair} with the given children.
   *
   * @return the new instance of NameTypePair.
   */
  public NameTypePair createNameTypePair( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Type  type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("NameTypePair");
    argList.add(name);
    argList.add(type);
    NameTypePair result = (NameTypePair) terms_.get(argList);
    if (result == null) {
      result = factory_.createNameTypePair(name, type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZStrokeList}.
   *
   * @return the new instance of ZStrokeList.
   */
  public ZStrokeList createZStrokeList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZStrokeList");
    ZStrokeList result = (ZStrokeList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZStrokeList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZStrokeList} with the given children.
   *
   * @return the new instance of ZStrokeList.
   */
  public ZStrokeList createZStrokeList(java.util.List<? extends net.sourceforge.czt.z.ast.Stroke>
 stroke)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZStrokeList");
    argList.add(stroke);
    ZStrokeList result = (ZStrokeList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZStrokeList(stroke);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PowerType}.
   *
   * @return the new instance of PowerType.
   */
  public PowerType createPowerType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("PowerType");
    PowerType result = (PowerType) terms_.get(argList);
    if (result == null) {
      result = factory_.createPowerType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PowerType} with the given children.
   *
   * @return the new instance of PowerType.
   */
  public PowerType createPowerType( net.sourceforge.czt.z.ast.Type2  type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("PowerType");
    argList.add(type);
    PowerType result = (PowerType) terms_.get(argList);
    if (result == null) {
      result = factory_.createPowerType(type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ParenAnn}.
   *
   * @return the new instance of ParenAnn.
   */
  public ParenAnn createParenAnn()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ParenAnn");
    ParenAnn result = (ParenAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createParenAnn();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PipeExpr}.
   *
   * @return the new instance of PipeExpr.
   */
  public PipeExpr createPipeExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("PipeExpr");
    PipeExpr result = (PipeExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPipeExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PipeExpr} with the given children.
   *
   * @return the new instance of PipeExpr.
   */
  public PipeExpr createPipeExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("PipeExpr");
    argList.add(expr);
    PipeExpr result = (PipeExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPipeExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TypeAnn}.
   *
   * @return the new instance of TypeAnn.
   */
  public TypeAnn createTypeAnn()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("TypeAnn");
    TypeAnn result = (TypeAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createTypeAnn();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TypeAnn} with the given children.
   *
   * @return the new instance of TypeAnn.
   */
  public TypeAnn createTypeAnn( net.sourceforge.czt.z.ast.Type  type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("TypeAnn");
    argList.add(type);
    TypeAnn result = (TypeAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createTypeAnn(type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AxPara}.
   *
   * @return the new instance of AxPara.
   */
  public AxPara createAxPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("AxPara");
    AxPara result = (AxPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createAxPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AxPara} with the given children.
   *
   * @return the new instance of AxPara.
   */
  public AxPara createAxPara( net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.SchText  schText,net.sourceforge.czt.z.ast.Box
 box)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(3);
    argList.add("AxPara");
    argList.add(nameList);
    argList.add(schText);
    argList.add(box);
    AxPara result = (AxPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createAxPara(nameList, schText, box);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link InStroke}.
   *
   * @return the new instance of InStroke.
   */
  public InStroke createInStroke()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("InStroke");
    InStroke result = (InStroke) terms_.get(argList);
    if (result == null) {
      result = factory_.createInStroke();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AndExpr}.
   *
   * @return the new instance of AndExpr.
   */
  public AndExpr createAndExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("AndExpr");
    AndExpr result = (AndExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createAndExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AndExpr} with the given children.
   *
   * @return the new instance of AndExpr.
   */
  public AndExpr createAndExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("AndExpr");
    argList.add(expr);
    AndExpr result = (AndExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createAndExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ImpliesExpr}.
   *
   * @return the new instance of ImpliesExpr.
   */
  public ImpliesExpr createImpliesExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ImpliesExpr");
    ImpliesExpr result = (ImpliesExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createImpliesExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ImpliesExpr} with the given children.
   *
   * @return the new instance of ImpliesExpr.
   */
  public ImpliesExpr createImpliesExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ImpliesExpr");
    argList.add(expr);
    ImpliesExpr result = (ImpliesExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createImpliesExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZBranchList}.
   *
   * @return the new instance of ZBranchList.
   */
  public ZBranchList createZBranchList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZBranchList");
    ZBranchList result = (ZBranchList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZBranchList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZBranchList} with the given children.
   *
   * @return the new instance of ZBranchList.
   */
  public ZBranchList createZBranchList(java.util.List<? extends net.sourceforge.czt.z.ast.Branch>
 branch)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZBranchList");
    argList.add(branch);
    ZBranchList result = (ZBranchList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZBranchList(branch);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SchemaType}.
   *
   * @return the new instance of SchemaType.
   */
  public SchemaType createSchemaType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SchemaType");
    SchemaType result = (SchemaType) terms_.get(argList);
    if (result == null) {
      result = factory_.createSchemaType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SchemaType} with the given children.
   *
   * @return the new instance of SchemaType.
   */
  public SchemaType createSchemaType( net.sourceforge.czt.z.ast.Signature  signature)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("SchemaType");
    argList.add(signature);
    SchemaType result = (SchemaType) terms_.get(argList);
    if (result == null) {
      result = factory_.createSchemaType(signature);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OutStroke}.
   *
   * @return the new instance of OutStroke.
   */
  public OutStroke createOutStroke()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("OutStroke");
    OutStroke result = (OutStroke) terms_.get(argList);
    if (result == null) {
      result = factory_.createOutStroke();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NumExpr}.
   *
   * @return the new instance of NumExpr.
   */
  public NumExpr createNumExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NumExpr");
    NumExpr result = (NumExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createNumExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NumExpr} with the given children.
   *
   * @return the new instance of NumExpr.
   */
  public NumExpr createNumExpr( net.sourceforge.czt.z.ast.Numeral  numeral)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NumExpr");
    argList.add(numeral);
    NumExpr result = (NumExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createNumExpr(numeral);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZExprList}.
   *
   * @return the new instance of ZExprList.
   */
  public ZExprList createZExprList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZExprList");
    ZExprList result = (ZExprList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZExprList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZExprList} with the given children.
   *
   * @return the new instance of ZExprList.
   */
  public ZExprList createZExprList(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZExprList");
    argList.add(expr);
    ZExprList result = (ZExprList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZExprList(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExistsExpr}.
   *
   * @return the new instance of ExistsExpr.
   */
  public ExistsExpr createExistsExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ExistsExpr");
    ExistsExpr result = (ExistsExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createExistsExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExistsExpr} with the given children.
   *
   * @return the new instance of ExistsExpr.
   */
  public ExistsExpr createExistsExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ExistsExpr");
    argList.add(schText);
    argList.add(expr);
    ExistsExpr result = (ExistsExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createExistsExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZSect}.
   *
   * @return the new instance of ZSect.
   */
  public ZSect createZSect()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZSect");
    ZSect result = (ZSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createZSect();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZSect} with the given children.
   *
   * @return the new instance of ZSect.
   */
  public ZSect createZSect( String  name,java.util.List<? extends net.sourceforge.czt.z.ast.Parent>
 parent, net.sourceforge.czt.z.ast.ParaList  paraList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(3);
    argList.add("ZSect");
    argList.add(name);
    argList.add(parent);
    argList.add(paraList);
    ZSect result = (ZSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createZSect(name, parent, paraList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LetExpr}.
   *
   * @return the new instance of LetExpr.
   */
  public LetExpr createLetExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("LetExpr");
    LetExpr result = (LetExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createLetExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LetExpr} with the given children.
   *
   * @return the new instance of LetExpr.
   */
  public LetExpr createLetExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("LetExpr");
    argList.add(schText);
    argList.add(expr);
    LetExpr result = (LetExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createLetExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProdType}.
   *
   * @return the new instance of ProdType.
   */
  public ProdType createProdType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ProdType");
    ProdType result = (ProdType) terms_.get(argList);
    if (result == null) {
      result = factory_.createProdType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProdType} with the given children.
   *
   * @return the new instance of ProdType.
   */
  public ProdType createProdType(java.util.List<? extends net.sourceforge.czt.z.ast.Type2>
 type)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ProdType");
    argList.add(type);
    ProdType result = (ProdType) terms_.get(argList);
    if (result == null) {
      result = factory_.createProdType(type);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LambdaExpr}.
   *
   * @return the new instance of LambdaExpr.
   */
  public LambdaExpr createLambdaExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("LambdaExpr");
    LambdaExpr result = (LambdaExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createLambdaExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link LambdaExpr} with the given children.
   *
   * @return the new instance of LambdaExpr.
   */
  public LambdaExpr createLambdaExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("LambdaExpr");
    argList.add(schText);
    argList.add(expr);
    LambdaExpr result = (LambdaExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createLambdaExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AndPred}.
   *
   * @return the new instance of AndPred.
   */
  public AndPred createAndPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("AndPred");
    AndPred result = (AndPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createAndPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link AndPred} with the given children.
   *
   * @return the new instance of AndPred.
   */
  public AndPred createAndPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred,net.sourceforge.czt.z.ast.And
 and)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("AndPred");
    argList.add(pred);
    argList.add(and);
    AndPred result = (AndPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createAndPred(pred, and);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExistsPred}.
   *
   * @return the new instance of ExistsPred.
   */
  public ExistsPred createExistsPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ExistsPred");
    ExistsPred result = (ExistsPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExistsPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExistsPred} with the given children.
   *
   * @return the new instance of ExistsPred.
   */
  public ExistsPred createExistsPred( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ExistsPred");
    argList.add(schText);
    argList.add(pred);
    ExistsPred result = (ExistsPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExistsPred(schText, pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link FreePara}.
   *
   * @return the new instance of FreePara.
   */
  public FreePara createFreePara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("FreePara");
    FreePara result = (FreePara) terms_.get(argList);
    if (result == null) {
      result = factory_.createFreePara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link FreePara} with the given children.
   *
   * @return the new instance of FreePara.
   */
  public FreePara createFreePara( net.sourceforge.czt.z.ast.FreetypeList  freetypeList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("FreePara");
    argList.add(freetypeList);
    FreePara result = (FreePara) terms_.get(argList);
    if (result == null) {
      result = factory_.createFreePara(freetypeList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OrExpr}.
   *
   * @return the new instance of OrExpr.
   */
  public OrExpr createOrExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("OrExpr");
    OrExpr result = (OrExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createOrExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OrExpr} with the given children.
   *
   * @return the new instance of OrExpr.
   */
  public OrExpr createOrExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("OrExpr");
    argList.add(expr);
    OrExpr result = (OrExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createOrExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TupleExpr}.
   *
   * @return the new instance of TupleExpr.
   */
  public TupleExpr createTupleExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("TupleExpr");
    TupleExpr result = (TupleExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createTupleExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link TupleExpr} with the given children.
   *
   * @return the new instance of TupleExpr.
   */
  public TupleExpr createTupleExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("TupleExpr");
    argList.add(exprList);
    TupleExpr result = (TupleExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createTupleExpr(exprList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PowerExpr}.
   *
   * @return the new instance of PowerExpr.
   */
  public PowerExpr createPowerExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("PowerExpr");
    PowerExpr result = (PowerExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPowerExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link PowerExpr} with the given children.
   *
   * @return the new instance of PowerExpr.
   */
  public PowerExpr createPowerExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("PowerExpr");
    argList.add(expr);
    PowerExpr result = (PowerExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createPowerExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ConstDecl}.
   *
   * @return the new instance of ConstDecl.
   */
  public ConstDecl createConstDecl()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ConstDecl");
    ConstDecl result = (ConstDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createConstDecl();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ConstDecl} with the given children.
   *
   * @return the new instance of ConstDecl.
   */
  public ConstDecl createConstDecl( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ConstDecl");
    argList.add(name);
    argList.add(expr);
    ConstDecl result = (ConstDecl) terms_.get(argList);
    if (result == null) {
      result = factory_.createConstDecl(name, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZParaList}.
   *
   * @return the new instance of ZParaList.
   */
  public ZParaList createZParaList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZParaList");
    ZParaList result = (ZParaList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZParaList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZParaList} with the given children.
   *
   * @return the new instance of ZParaList.
   */
  public ZParaList createZParaList(java.util.List<? extends net.sourceforge.czt.z.ast.Para>
 para)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZParaList");
    argList.add(para);
    ZParaList result = (ZParaList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZParaList(para);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ThetaExpr}.
   *
   * @return the new instance of ThetaExpr.
   */
  public ThetaExpr createThetaExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ThetaExpr");
    ThetaExpr result = (ThetaExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createThetaExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ThetaExpr} with the given children.
   *
   * @return the new instance of ThetaExpr.
   */
  public ThetaExpr createThetaExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.StrokeList  strokeList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ThetaExpr");
    argList.add(expr);
    argList.add(strokeList);
    ThetaExpr result = (ThetaExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createThetaExpr(expr, strokeList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Operator}.
   *
   * @return the new instance of Operator.
   */
  public Operator createOperator()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Operator");
    Operator result = (Operator) terms_.get(argList);
    if (result == null) {
      result = factory_.createOperator();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Operator} with the given children.
   *
   * @return the new instance of Operator.
   */
  public Operator createOperator( String  word)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("Operator");
    argList.add(word);
    Operator result = (Operator) terms_.get(argList);
    if (result == null) {
      result = factory_.createOperator(word);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Parent}.
   *
   * @return the new instance of Parent.
   */
  public Parent createParent()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Parent");
    Parent result = (Parent) terms_.get(argList);
    if (result == null) {
      result = factory_.createParent();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Parent} with the given children.
   *
   * @return the new instance of Parent.
   */
  public Parent createParent( String  word)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("Parent");
    argList.add(word);
    Parent result = (Parent) terms_.get(argList);
    if (result == null) {
      result = factory_.createParent(word);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NegExpr}.
   *
   * @return the new instance of NegExpr.
   */
  public NegExpr createNegExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NegExpr");
    NegExpr result = (NegExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createNegExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NegExpr} with the given children.
   *
   * @return the new instance of NegExpr.
   */
  public NegExpr createNegExpr( net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NegExpr");
    argList.add(expr);
    NegExpr result = (NegExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createNegExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link MemPred}.
   *
   * @return the new instance of MemPred.
   */
  public MemPred createMemPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("MemPred");
    MemPred result = (MemPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createMemPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link MemPred} with the given children.
   *
   * @return the new instance of MemPred.
   */
  public MemPred createMemPred(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr, Boolean  mixfix)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("MemPred");
    argList.add(expr);
    argList.add(mixfix);
    MemPred result = (MemPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createMemPred(expr, mixfix);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link CompExpr}.
   *
   * @return the new instance of CompExpr.
   */
  public CompExpr createCompExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("CompExpr");
    CompExpr result = (CompExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createCompExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link CompExpr} with the given children.
   *
   * @return the new instance of CompExpr.
   */
  public CompExpr createCompExpr(java.util.List<? extends net.sourceforge.czt.z.ast.Expr>
 expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("CompExpr");
    argList.add(expr);
    CompExpr result = (CompExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createCompExpr(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ForallExpr}.
   *
   * @return the new instance of ForallExpr.
   */
  public ForallExpr createForallExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ForallExpr");
    ForallExpr result = (ForallExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createForallExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ForallExpr} with the given children.
   *
   * @return the new instance of ForallExpr.
   */
  public ForallExpr createForallExpr( net.sourceforge.czt.z.ast.SchText  schText, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("ForallExpr");
    argList.add(schText);
    argList.add(expr);
    ForallExpr result = (ForallExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createForallExpr(schText, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SetExpr}.
   *
   * @return the new instance of SetExpr.
   */
  public SetExpr createSetExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SetExpr");
    SetExpr result = (SetExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSetExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SetExpr} with the given children.
   *
   * @return the new instance of SetExpr.
   */
  public SetExpr createSetExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("SetExpr");
    argList.add(exprList);
    SetExpr result = (SetExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createSetExpr(exprList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link BindSelExpr}.
   *
   * @return the new instance of BindSelExpr.
   */
  public BindSelExpr createBindSelExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("BindSelExpr");
    BindSelExpr result = (BindSelExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createBindSelExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link BindSelExpr} with the given children.
   *
   * @return the new instance of BindSelExpr.
   */
  public BindSelExpr createBindSelExpr( net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Name  name)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("BindSelExpr");
    argList.add(expr);
    argList.add(name);
    BindSelExpr result = (BindSelExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createBindSelExpr(expr, name);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Branch}.
   *
   * @return the new instance of Branch.
   */
  public Branch createBranch()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Branch");
    Branch result = (Branch) terms_.get(argList);
    if (result == null) {
      result = factory_.createBranch();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Branch} with the given children.
   *
   * @return the new instance of Branch.
   */
  public Branch createBranch( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("Branch");
    argList.add(name);
    argList.add(expr);
    Branch result = (Branch) terms_.get(argList);
    if (result == null) {
      result = factory_.createBranch(name, expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link FalsePred}.
   *
   * @return the new instance of FalsePred.
   */
  public FalsePred createFalsePred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("FalsePred");
    FalsePred result = (FalsePred) terms_.get(argList);
    if (result == null) {
      result = factory_.createFalsePred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZNameList}.
   *
   * @return the new instance of ZNameList.
   */
  public ZNameList createZNameList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZNameList");
    ZNameList result = (ZNameList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZNameList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZNameList} with the given children.
   *
   * @return the new instance of ZNameList.
   */
  public ZNameList createZNameList(java.util.List<? extends net.sourceforge.czt.z.ast.Name>
 name)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZNameList");
    argList.add(name);
    ZNameList result = (ZNameList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZNameList(name);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link RefExpr}.
   *
   * @return the new instance of RefExpr.
   */
  public RefExpr createRefExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("RefExpr");
    RefExpr result = (RefExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createRefExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link RefExpr} with the given children.
   *
   * @return the new instance of RefExpr.
   */
  public RefExpr createRefExpr( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.ExprList  exprList, Boolean  mixfix, Boolean  explicit)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(4);
    argList.add("RefExpr");
    argList.add(name);
    argList.add(exprList);
    argList.add(mixfix);
    argList.add(explicit);
    RefExpr result = (RefExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createRefExpr(name, exprList, mixfix, explicit);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GivenPara}.
   *
   * @return the new instance of GivenPara.
   */
  public GivenPara createGivenPara()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("GivenPara");
    GivenPara result = (GivenPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createGivenPara();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GivenPara} with the given children.
   *
   * @return the new instance of GivenPara.
   */
  public GivenPara createGivenPara( net.sourceforge.czt.z.ast.NameList  nameList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("GivenPara");
    argList.add(nameList);
    GivenPara result = (GivenPara) terms_.get(argList);
    if (result == null) {
      result = factory_.createGivenPara(nameList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NegPred}.
   *
   * @return the new instance of NegPred.
   */
  public NegPred createNegPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NegPred");
    NegPred result = (NegPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createNegPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NegPred} with the given children.
   *
   * @return the new instance of NegPred.
   */
  public NegPred createNegPred( net.sourceforge.czt.z.ast.Pred  pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NegPred");
    argList.add(pred);
    NegPred result = (NegPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createNegPred(pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GenParamType}.
   *
   * @return the new instance of GenParamType.
   */
  public GenParamType createGenParamType()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("GenParamType");
    GenParamType result = (GenParamType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGenParamType();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link GenParamType} with the given children.
   *
   * @return the new instance of GenParamType.
   */
  public GenParamType createGenParamType( net.sourceforge.czt.z.ast.Name  name)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("GenParamType");
    argList.add(name);
    GenParamType result = (GenParamType) terms_.get(argList);
    if (result == null) {
      result = factory_.createGenParamType(name);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SectTypeEnvAnn}.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  public SectTypeEnvAnn createSectTypeEnvAnn()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("SectTypeEnvAnn");
    SectTypeEnvAnn result = (SectTypeEnvAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createSectTypeEnvAnn();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link SectTypeEnvAnn} with the given children.
   *
   * @return the new instance of SectTypeEnvAnn.
   */
  public SectTypeEnvAnn createSectTypeEnvAnn(java.util.List<? extends net.sourceforge.czt.z.ast.NameSectTypeTriple>
 nameSectTypeTriple)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("SectTypeEnvAnn");
    argList.add(nameSectTypeTriple);
    SectTypeEnvAnn result = (SectTypeEnvAnn) terms_.get(argList);
    if (result == null) {
      result = factory_.createSectTypeEnvAnn(nameSectTypeTriple);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Freetype}.
   *
   * @return the new instance of Freetype.
   */
  public Freetype createFreetype()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Freetype");
    Freetype result = (Freetype) terms_.get(argList);
    if (result == null) {
      result = factory_.createFreetype();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Freetype} with the given children.
   *
   * @return the new instance of Freetype.
   */
  public Freetype createFreetype( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.BranchList  branchList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("Freetype");
    argList.add(name);
    argList.add(branchList);
    Freetype result = (Freetype) terms_.get(argList);
    if (result == null) {
      result = factory_.createFreetype(name, branchList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link IffPred}.
   *
   * @return the new instance of IffPred.
   */
  public IffPred createIffPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("IffPred");
    IffPred result = (IffPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createIffPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link IffPred} with the given children.
   *
   * @return the new instance of IffPred.
   */
  public IffPred createIffPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("IffPred");
    argList.add(pred);
    IffPred result = (IffPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createIffPred(pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ImpliesPred}.
   *
   * @return the new instance of ImpliesPred.
   */
  public ImpliesPred createImpliesPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ImpliesPred");
    ImpliesPred result = (ImpliesPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createImpliesPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ImpliesPred} with the given children.
   *
   * @return the new instance of ImpliesPred.
   */
  public ImpliesPred createImpliesPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ImpliesPred");
    argList.add(pred);
    ImpliesPred result = (ImpliesPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createImpliesPred(pred);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Signature}.
   *
   * @return the new instance of Signature.
   */
  public Signature createSignature()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Signature");
    Signature result = (Signature) terms_.get(argList);
    if (result == null) {
      result = factory_.createSignature();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Signature} with the given children.
   *
   * @return the new instance of Signature.
   */
  public Signature createSignature(java.util.List<? extends net.sourceforge.czt.z.ast.NameTypePair>
 nameTypePair)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("Signature");
    argList.add(nameTypePair);
    Signature result = (Signature) terms_.get(argList);
    if (result == null) {
      result = factory_.createSignature(nameTypePair);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NarrSect}.
   *
   * @return the new instance of NarrSect.
   */
  public NarrSect createNarrSect()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("NarrSect");
    NarrSect result = (NarrSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createNarrSect();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link NarrSect} with the given children.
   *
   * @return the new instance of NarrSect.
   */
  public NarrSect createNarrSect( java.util.List<? extends Object>  content)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("NarrSect");
    argList.add(content);
    NarrSect result = (NarrSect) terms_.get(argList);
    if (result == null) {
      result = factory_.createNarrSect(content);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Spec}.
   *
   * @return the new instance of Spec.
   */
  public Spec createSpec()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("Spec");
    Spec result = (Spec) terms_.get(argList);
    if (result == null) {
      result = factory_.createSpec();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link Spec} with the given children.
   *
   * @return the new instance of Spec.
   */
  public Spec createSpec(java.util.List<? extends net.sourceforge.czt.z.ast.Sect>
 sect, String  version)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(2);
    argList.add("Spec");
    argList.add(sect);
    argList.add(version);
    Spec result = (Spec) terms_.get(argList);
    if (result == null) {
      result = factory_.createSpec(sect, version);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProdExpr}.
   *
   * @return the new instance of ProdExpr.
   */
  public ProdExpr createProdExpr()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ProdExpr");
    ProdExpr result = (ProdExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createProdExpr();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ProdExpr} with the given children.
   *
   * @return the new instance of ProdExpr.
   */
  public ProdExpr createProdExpr( net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ProdExpr");
    argList.add(exprList);
    ProdExpr result = (ProdExpr) terms_.get(argList);
    if (result == null) {
      result = factory_.createProdExpr(exprList);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExprPred}.
   *
   * @return the new instance of ExprPred.
   */
  public ExprPred createExprPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ExprPred");
    ExprPred result = (ExprPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExprPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ExprPred} with the given children.
   *
   * @return the new instance of ExprPred.
   */
  public ExprPred createExprPred( net.sourceforge.czt.z.ast.Expr  expr)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ExprPred");
    argList.add(expr);
    ExprPred result = (ExprPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createExprPred(expr);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZFreetypeList}.
   *
   * @return the new instance of ZFreetypeList.
   */
  public ZFreetypeList createZFreetypeList()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("ZFreetypeList");
    ZFreetypeList result = (ZFreetypeList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZFreetypeList();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link ZFreetypeList} with the given children.
   *
   * @return the new instance of ZFreetypeList.
   */
  public ZFreetypeList createZFreetypeList(java.util.List<? extends net.sourceforge.czt.z.ast.Freetype>
 freetype)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("ZFreetypeList");
    argList.add(freetype);
    ZFreetypeList result = (ZFreetypeList) terms_.get(argList);
    if (result == null) {
      result = factory_.createZFreetypeList(freetype);
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OrPred}.
   *
   * @return the new instance of OrPred.
   */
  public OrPred createOrPred()
  {
    nCreates_++;
    final int listSize = 1;
    List<Object> argList = new ArrayList<Object>(listSize);
    argList.add("OrPred");
    OrPred result = (OrPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createOrPred();
      terms_.put(argList, result);
    }
    return result;
  }

  /**
   * Creates an instance of {@link OrPred} with the given children.
   *
   * @return the new instance of OrPred.
   */
  public OrPred createOrPred(java.util.List<? extends net.sourceforge.czt.z.ast.Pred>
 pred)
  {
    nCreates_++;
    List<Object> argList = new ArrayList<Object>(1);
    argList.add("OrPred");
    argList.add(pred);
    OrPred result = (OrPred) terms_.get(argList);
    if (result == null) {
      result = factory_.createOrPred(pred);
      terms_.put(argList, result);
    }
    return result;
  }


  /**
   * Returns the number of hashed Terms.
   */
  public int numberOfTerms()
  {
    return terms_.size();
  }

  /**
   * Returns the number of create calls to this factory so far.
   */
  public int numberOfCreates()
  {
    return nCreates_;
  }

}
