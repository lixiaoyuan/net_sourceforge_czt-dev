
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstInterface.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.z.ast;

																																																				

/**
 * A reference expression (C.6.21, C.6.28, C.6.29).
        <ul>
        <li>C.6.21 (Generic Operator Application).  For example: S \rel T.
                In this case, mixfix and explicit are always true,
                and the list of instantiating expressions is non-empty
                (it contains [S,T]).</li>
        <li>C.6.28 (Reference).  For example: \arithmos
                In this case, mixfix and explicit are always false
                and the list of instantiating expressions is empty.
                Another example before typechecking is \emptyset.
                The typechecker transforms \emptyset to a generic
                instantiation and explicit remains false (see 13.2.3.3).</li>
        <li>C.6.29 (Generic Instantiation).  For example: \emptyset[T].
                In this case, mixfix is always false and the list of 
                instantiating expressions is non-empty (it contains [T]).
                The explicit attribute indicates whether the instantiating
                expressions are explicitly given in the specification
                (explicit is true) or whether they were inferred by the
                typechecker (explicit is false).</li>
        </ul>
 *
 * @author GnAST version 1.6-cdh
 */ 
 



public interface RefExpr extends 		 		net.sourceforge.czt.z.ast.Expr
 			{

  /**
   * Returns the Name element.
   *
   * @return the Name element.
   */
  net.sourceforge.czt.z.ast.Name getName();


  /**
   * Sets the Name element.
   *
   * @param name   the Name element.
   * @see #getName
   */
  void setName(net.sourceforge.czt.z.ast.Name name);

  /**
   * Returns the ExprList element.
   *
   * @return the ExprList element.
   */
  net.sourceforge.czt.z.ast.ExprList getExprList();


  /**
   * This is a convenience method.
   * It returns a ZExprList if #getExprList
   * returns an instance of ZExprList
   * and throws an UnsupportedAstClassException otherwise.
   */
  net.sourceforge.czt.z.ast.ZExprList getZExprList();

  /**
   * Sets the ExprList element.
   *
   * @param exprList   the ExprList element.
   * @see #getExprList
   */
  void setExprList(net.sourceforge.czt.z.ast.ExprList exprList);

  /**
   * Returns the Mixfix element.
   *
   * @return the Mixfix element.
   */
  Boolean getMixfix();


  /**
   * Sets the Mixfix element.
   *
   * @param mixfix   the Mixfix element.
   * @see #getMixfix
   */
  void setMixfix(Boolean mixfix);

  /**
   * Returns the Explicit element.
   *
   * @return the Explicit element.
   */
  Boolean getExplicit();


  /**
   * Sets the Explicit element.
   *
   * @param explicit   the Explicit element.
   * @see #getExplicit
   */
  void setExplicit(Boolean explicit);

  /**
   * This is a convenience method.
   * It returns the ZName if Name is an instance of
   * ZName and throws an UnsupportedAstClassException otherwise.
   */
  ZName getZName();
}
