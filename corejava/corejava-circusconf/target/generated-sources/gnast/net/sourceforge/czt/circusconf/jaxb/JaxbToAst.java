
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circusconf.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.circuspatt.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.circusconf.ast.CircusConfFactory mCircusConfFactory_;

  public JaxbToAst()
  {
    mCircusConfFactory_ =
      new net.sourceforge.czt.circusconf.impl.CircusConfFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zpatt.ast.ZpattFactory vZpattFactory, net.sourceforge.czt.circus.ast.CircusFactory vCircusFactory, net.sourceforge.czt.circuspatt.ast.CircusPatternFactory vCircusPatternFactory, net.sourceforge.czt.circusconf.ast.CircusConfFactory vCircusConfFactory)
  {
    super(vZFactory, vZpattFactory, vCircusFactory, vCircusPatternFactory);
    mCircusConfFactory_ = vCircusConfFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.circusconf.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitConfidentialityAction(net.sourceforge.czt.circusconf.jaxb.gen.ConfidentialityAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConfidentialityAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circusconf.ast.ConfidentialityAction erg = mCircusConfFactory_.createConfidentialityAction(circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConfidentialityAction", erg);
    return erg;
  }

  public Object visitConfidentialityProcess(net.sourceforge.czt.circusconf.jaxb.gen.ConfidentialityProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConfidentialityProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.circusconf.ast.ConfidentialityProcess erg = mCircusConfFactory_.createConfidentialityProcess(circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConfidentialityProcess", erg);
    return erg;
  }
}
