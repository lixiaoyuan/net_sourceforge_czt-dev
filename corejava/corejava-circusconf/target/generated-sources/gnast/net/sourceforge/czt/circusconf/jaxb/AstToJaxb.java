
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circusconf.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.circuspatt.jaxb.AstToJaxb
  implements net.sourceforge.czt.circusconf.visitor.CircusConfVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circusconf.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circusconf.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.circusconf.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitConfidentialityAction(net.sourceforge.czt.circusconf.ast.ConfidentialityAction zedObject)
  {
    getLogger().entering(getClassName(), "visitConfidentialityAction", zedObject);
    try {
      net.sourceforge.czt.circusconf.jaxb.gen.ConfidentialityAction jaxbObject = objectFactory_.createConfidentialityAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
      getLogger().exiting(getClassName(), "visitConfidentialityAction", jaxbObject);
      return objectFactory_.createConfidentialityAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConfidentialityAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitConfidentialityProcess(net.sourceforge.czt.circusconf.ast.ConfidentialityProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitConfidentialityProcess", zedObject);
    try {
      net.sourceforge.czt.circusconf.jaxb.gen.ConfidentialityProcess jaxbObject = objectFactory_.createConfidentialityProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
      getLogger().exiting(getClassName(), "visitConfidentialityProcess", jaxbObject);
      return objectFactory_.createConfidentialityProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConfidentialityProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
