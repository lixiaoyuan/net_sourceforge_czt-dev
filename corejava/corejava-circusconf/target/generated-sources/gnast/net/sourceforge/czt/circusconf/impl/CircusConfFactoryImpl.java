
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circusconf.impl;


/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public class CircusConfFactoryImpl
  extends net.sourceforge.czt.circuspatt.impl.CircusPatternFactoryImpl
  implements net.sourceforge.czt.circusconf.ast.CircusConfFactory
{
  protected CircusConfFactoryImpl(net.sourceforge.czt.util.Visitor<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public CircusConfFactoryImpl()
  {
    super(new net.sourceforge.czt.circusconf.util.PrintVisitor());
  }

  public net.sourceforge.czt.circusconf.ast.ConfidentialityAction createConfidentialityAction()
  {
    net.sourceforge.czt.circusconf.ast.ConfidentialityAction zedObject = new net.sourceforge.czt.circusconf.impl.ConfidentialityActionImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circusconf.ast.ConfidentialityAction createConfidentialityAction( net.sourceforge.czt.circus.ast.CircusAction  circusAction)
  {
    net.sourceforge.czt.circusconf.ast.ConfidentialityAction zedObject = createConfidentialityAction();
    zedObject.setCircusAction(circusAction);
    return zedObject;
  }

  public net.sourceforge.czt.circusconf.ast.ConfidentialityProcess createConfidentialityProcess()
  {
    net.sourceforge.czt.circusconf.ast.ConfidentialityProcess zedObject = new net.sourceforge.czt.circusconf.impl.ConfidentialityProcessImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.circusconf.ast.ConfidentialityProcess createConfidentialityProcess( net.sourceforge.czt.circus.ast.CircusProcess  circusProcess)
  {
    net.sourceforge.czt.circusconf.ast.ConfidentialityProcess zedObject = createConfidentialityProcess();
    zedObject.setCircusProcess(circusProcess);
    return zedObject;
  }


}
