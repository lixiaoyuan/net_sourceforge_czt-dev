
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circuspatt.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.circus.jaxb.AstToJaxb
  implements net.sourceforge.czt.circuspatt.visitor.CircusPatternVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circuspatt.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circuspatt.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.circuspatt.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerCommunicationBinding(net.sourceforge.czt.circuspatt.ast.JokerCommunicationBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerCommunicationBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunicationBinding jaxbObject = objectFactory_.createJokerCommunicationBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerCommunication
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerCommunication() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerCommunication();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunication> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunication>)term.accept(this);
        jaxbObject.setJokerCommunication(newValue);
      }
// prop.Name   = Communication
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommunication() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCommunication();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication>)term.accept(this);
        jaxbObject.setCommunication(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerCommunicationBinding", jaxbObject);
      return objectFactory_.createJokerCommunicationBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerCommunicationBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerChannelSetBinding(net.sourceforge.czt.circuspatt.ast.JokerChannelSetBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerChannelSetBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSetBinding jaxbObject = objectFactory_.createJokerChannelSetBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSet>)term.accept(this);
        jaxbObject.setJokerChannelSet(newValue);
      }
// prop.Name   = ChannelSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.ChannelSet>)term.accept(this);
        jaxbObject.setChannelSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerChannelSetBinding", jaxbObject);
      return objectFactory_.createJokerChannelSetBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerChannelSetBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerCommunication(net.sourceforge.czt.circuspatt.ast.JokerCommunication zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerCommunication", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunication jaxbObject = objectFactory_.createJokerCommunication();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ChannelExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr>)term.accept(this);
        jaxbObject.setChannelExpr(newValue);
      }
// prop.Name   = FieldList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getFieldList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getFieldList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.FieldList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.FieldList>)term.accept(this);
        jaxbObject.setFieldList(newValue);
      }
// prop.Name   = CommUsage
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCommUsage() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCommUsage(net.sourceforge.czt.circus.jaxb.gen.CommUsage.fromValue(zedObject.getCommUsage().toString()));
      }
// prop.Name   = CommPattern
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCommPattern() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCommPattern(net.sourceforge.czt.circus.jaxb.gen.CommPattern.fromValue(zedObject.getCommPattern().toString()));
      }
// prop.Name   = MultiSych
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getMultiSych() != null) {
        jaxbObject.setMultiSych(zedObject.getMultiSych());
      }
// prop.Name   = Indexed
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getIndexed() != null) {
        jaxbObject.setIndexed(zedObject.getIndexed());
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerCommunication", jaxbObject);
      return objectFactory_.createJokerCommunication(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerCommunication to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerProcessBinding(net.sourceforge.czt.circuspatt.ast.JokerProcessBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerProcessBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcessBinding jaxbObject = objectFactory_.createJokerProcessBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcess>)term.accept(this);
        jaxbObject.setJokerProcess(newValue);
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerProcessBinding", jaxbObject);
      return objectFactory_.createJokerProcessBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerProcessBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerNameSet(net.sourceforge.czt.circuspatt.ast.JokerNameSet zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameSet", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSet jaxbObject = objectFactory_.createJokerNameSet();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerNameSet", jaxbObject);
      return objectFactory_.createJokerNameSet(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameSet to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerActionBinding(net.sourceforge.czt.circuspatt.ast.JokerActionBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerActionBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerActionBinding jaxbObject = objectFactory_.createJokerActionBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerAction>)term.accept(this);
        jaxbObject.setJokerAction(newValue);
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerActionBinding", jaxbObject);
      return objectFactory_.createJokerActionBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerActionBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerAction(net.sourceforge.czt.circuspatt.ast.JokerAction zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerAction", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerAction jaxbObject = objectFactory_.createJokerAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerAction", jaxbObject);
      return objectFactory_.createJokerAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerChannelSet(net.sourceforge.czt.circuspatt.ast.JokerChannelSet zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerChannelSet", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSet jaxbObject = objectFactory_.createJokerChannelSet();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerChannelSet", jaxbObject);
      return objectFactory_.createJokerChannelSet(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerChannelSet to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCircusJokers(net.sourceforge.czt.circuspatt.ast.CircusJokers zedObject)
  {
    getLogger().entering(getClassName(), "visitCircusJokers", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.CircusJokers jaxbObject = objectFactory_.createCircusJokers();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (String o : zedObject.getName()) 
        {
																	jaxbObject.getName().add(o);
		        }
      }
// prop.Name   = CircusJokerType
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCircusJokerType() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCircusJokerType(net.sourceforge.czt.circuspatt.jaxb.gen.CircusJokerType.fromValue(zedObject.getCircusJokerType().toString()));
      }
      getLogger().exiting(getClassName(), "visitCircusJokers", jaxbObject);
      return objectFactory_.createCircusJokers(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CircusJokers to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerNameSetBinding(net.sourceforge.czt.circuspatt.ast.JokerNameSetBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameSetBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSetBinding jaxbObject = objectFactory_.createJokerNameSetBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerNameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSet>)term.accept(this);
        jaxbObject.setJokerNameSet(newValue);
      }
// prop.Name   = NameSet
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameSet() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameSet();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.NameSet>)term.accept(this);
        jaxbObject.setNameSet(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerNameSetBinding", jaxbObject);
      return objectFactory_.createJokerNameSetBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameSetBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerPara(net.sourceforge.czt.circuspatt.ast.JokerPara zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerPara", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerPara jaxbObject = objectFactory_.createJokerPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerPara", jaxbObject);
      return objectFactory_.createJokerPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerParaBinding(net.sourceforge.czt.circuspatt.ast.JokerParaBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerParaBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaBinding jaxbObject = objectFactory_.createJokerParaBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerPara
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerPara() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerPara();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerPara> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerPara>)term.accept(this);
        jaxbObject.setJokerPara(newValue);
      }
// prop.Name   = Para
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPara() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPara();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para>)term.accept(this);
        jaxbObject.setPara(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerParaBinding", jaxbObject);
      return objectFactory_.createJokerParaBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerParaBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerParaListBinding(net.sourceforge.czt.circuspatt.ast.JokerParaListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerParaListBinding", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaListBinding jaxbObject = objectFactory_.createJokerParaListBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerParaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerParaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerParaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaList>)term.accept(this);
        jaxbObject.setJokerParaList(newValue);
      }
// prop.Name   = ParaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getParaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getParaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ParaList>)term.accept(this);
        jaxbObject.setParaList(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerParaListBinding", jaxbObject);
      return objectFactory_.createJokerParaListBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerParaListBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerProcess(net.sourceforge.czt.circuspatt.ast.JokerProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerProcess", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcess jaxbObject = objectFactory_.createJokerProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerProcess", jaxbObject);
      return objectFactory_.createJokerProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerParaList(net.sourceforge.czt.circuspatt.ast.JokerParaList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerParaList", zedObject);
    try {
      net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaList jaxbObject = objectFactory_.createJokerParaList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerParaList", jaxbObject);
      return objectFactory_.createJokerParaList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerParaList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
