
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circuspatt.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.circus.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.circuspatt.ast.CircusPatternFactory mCircusPatternFactory_;

  public JaxbToAst()
  {
    mCircusPatternFactory_ =
      new net.sourceforge.czt.circuspatt.impl.CircusPatternFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zpatt.ast.ZpattFactory vZpattFactory, net.sourceforge.czt.circus.ast.CircusFactory vCircusFactory, net.sourceforge.czt.circuspatt.ast.CircusPatternFactory vCircusPatternFactory)
  {
    super(vZFactory, vZpattFactory, vCircusFactory);
    mCircusPatternFactory_ = vCircusPatternFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.circuspatt.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitJokerCommunicationBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunicationBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerCommunicationBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerCommunication jokerCommunication =
      (net.sourceforge.czt.circuspatt.ast.JokerCommunication) dispatch(jaxbObject.getJokerCommunication());
    net.sourceforge.czt.circus.ast.Communication communication =
      (net.sourceforge.czt.circus.ast.Communication) dispatch(jaxbObject.getCommunication());
    net.sourceforge.czt.circuspatt.ast.JokerCommunicationBinding erg = mCircusPatternFactory_.createJokerCommunicationBinding(jokerCommunication, communication);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerCommunicationBinding", erg);
    return erg;
  }

  public Object visitJokerChannelSetBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSetBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerChannelSetBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerChannelSet jokerChannelSet =
      (net.sourceforge.czt.circuspatt.ast.JokerChannelSet) dispatch(jaxbObject.getJokerChannelSet());
    net.sourceforge.czt.circus.ast.ChannelSet channelSet =
      (net.sourceforge.czt.circus.ast.ChannelSet) dispatch(jaxbObject.getChannelSet());
    net.sourceforge.czt.circuspatt.ast.JokerChannelSetBinding erg = mCircusPatternFactory_.createJokerChannelSetBinding(jokerChannelSet, channelSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerChannelSetBinding", erg);
    return erg;
  }

  public Object visitJokerCommunication(net.sourceforge.czt.circuspatt.jaxb.gen.JokerCommunication jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerCommunication", jaxbObject);
    net.sourceforge.czt.z.ast.RefExpr channelExpr =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getChannelExpr());
    net.sourceforge.czt.circus.ast.FieldList fieldList =
      (net.sourceforge.czt.circus.ast.FieldList) dispatch(jaxbObject.getFieldList());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CommUsage commUsage = null;
    if (jaxbObject.getCommUsage() != null) {
      String commUsageJaxb = jaxbObject.getCommUsage().value();
            
      commUsage = net.sourceforge.czt.circus.ast.CommUsage.valueOf(commUsageJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circus.ast.CommPattern commPattern = null;
    if (jaxbObject.getCommPattern() != null) {
      String commPatternJaxb = jaxbObject.getCommPattern().value();
            
      commPattern = net.sourceforge.czt.circus.ast.CommPattern.valueOf(commPatternJaxb);
    }
    java.math.BigInteger multiSych =
      (java.math.BigInteger) dispatch(jaxbObject.getMultiSych());
    Boolean indexed =
      (Boolean) jaxbObject.isIndexed();
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerCommunication erg = mCircusPatternFactory_.createJokerCommunication(channelExpr, fieldList, commUsage, commPattern, multiSych, indexed, name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerCommunication", erg);
    return erg;
  }

  public Object visitJokerProcessBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcessBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerProcessBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerProcess jokerProcess =
      (net.sourceforge.czt.circuspatt.ast.JokerProcess) dispatch(jaxbObject.getJokerProcess());
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.circuspatt.ast.JokerProcessBinding erg = mCircusPatternFactory_.createJokerProcessBinding(jokerProcess, circusProcess);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerProcessBinding", erg);
    return erg;
  }

  public Object visitJokerNameSet(net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerNameSet", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerNameSet erg = mCircusPatternFactory_.createJokerNameSet(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerNameSet", erg);
    return erg;
  }

  public Object visitJokerActionBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerActionBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerActionBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerAction jokerAction =
      (net.sourceforge.czt.circuspatt.ast.JokerAction) dispatch(jaxbObject.getJokerAction());
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circuspatt.ast.JokerActionBinding erg = mCircusPatternFactory_.createJokerActionBinding(jokerAction, circusAction);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerActionBinding", erg);
    return erg;
  }

  public Object visitJokerAction(net.sourceforge.czt.circuspatt.jaxb.gen.JokerAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerAction", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerAction erg = mCircusPatternFactory_.createJokerAction(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerAction", erg);
    return erg;
  }

  public Object visitJokerChannelSet(net.sourceforge.czt.circuspatt.jaxb.gen.JokerChannelSet jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerChannelSet", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerChannelSet erg = mCircusPatternFactory_.createJokerChannelSet(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerChannelSet", erg);
    return erg;
  }

  public Object visitCircusJokers(net.sourceforge.czt.circuspatt.jaxb.gen.CircusJokers jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCircusJokers", jaxbObject);
            
    java.util.List<String> name = new java.util.Vector<String>();
    
    for (
    																String
					
		obj : jaxbObject.getName()) {
	  String o = (String) dispatch(obj);
	  name.add(o);
	}
    
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.circuspatt.ast.CircusJokerType circusJokerType = null;
    if (jaxbObject.getCircusJokerType() != null) {
      String circusJokerTypeJaxb = jaxbObject.getCircusJokerType().value();
            
      circusJokerType = net.sourceforge.czt.circuspatt.ast.CircusJokerType.valueOf(circusJokerTypeJaxb);
    }
    net.sourceforge.czt.circuspatt.ast.CircusJokers erg = mCircusPatternFactory_.createCircusJokers(name, circusJokerType);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCircusJokers", erg);
    return erg;
  }

  public Object visitJokerNameSetBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerNameSetBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerNameSetBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerNameSet jokerNameSet =
      (net.sourceforge.czt.circuspatt.ast.JokerNameSet) dispatch(jaxbObject.getJokerNameSet());
    net.sourceforge.czt.circus.ast.NameSet nameSet =
      (net.sourceforge.czt.circus.ast.NameSet) dispatch(jaxbObject.getNameSet());
    net.sourceforge.czt.circuspatt.ast.JokerNameSetBinding erg = mCircusPatternFactory_.createJokerNameSetBinding(jokerNameSet, nameSet);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerNameSetBinding", erg);
    return erg;
  }

  public Object visitJokerPara(net.sourceforge.czt.circuspatt.jaxb.gen.JokerPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerPara", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerPara erg = mCircusPatternFactory_.createJokerPara(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerPara", erg);
    return erg;
  }

  public Object visitJokerParaBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerParaBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerPara jokerPara =
      (net.sourceforge.czt.circuspatt.ast.JokerPara) dispatch(jaxbObject.getJokerPara());
    net.sourceforge.czt.z.ast.Para para =
      (net.sourceforge.czt.z.ast.Para) dispatch(jaxbObject.getPara());
    net.sourceforge.czt.circuspatt.ast.JokerParaBinding erg = mCircusPatternFactory_.createJokerParaBinding(jokerPara, para);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerParaBinding", erg);
    return erg;
  }

  public Object visitJokerParaListBinding(net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaListBinding jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerParaListBinding", jaxbObject);
    net.sourceforge.czt.circuspatt.ast.JokerParaList jokerParaList =
      (net.sourceforge.czt.circuspatt.ast.JokerParaList) dispatch(jaxbObject.getJokerParaList());
    net.sourceforge.czt.z.ast.ParaList paraList =
      (net.sourceforge.czt.z.ast.ParaList) dispatch(jaxbObject.getParaList());
    net.sourceforge.czt.circuspatt.ast.JokerParaListBinding erg = mCircusPatternFactory_.createJokerParaListBinding(jokerParaList, paraList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerParaListBinding", erg);
    return erg;
  }

  public Object visitJokerProcess(net.sourceforge.czt.circuspatt.jaxb.gen.JokerProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerProcess", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerProcess erg = mCircusPatternFactory_.createJokerProcess(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerProcess", erg);
    return erg;
  }

  public Object visitJokerParaList(net.sourceforge.czt.circuspatt.jaxb.gen.JokerParaList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitJokerParaList", jaxbObject);
    String name =
      (String) dispatch(jaxbObject.getName());
    String id =
      (String) dispatch(jaxbObject.getId());
    net.sourceforge.czt.circuspatt.ast.JokerParaList erg = mCircusPatternFactory_.createJokerParaList(name, id);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitJokerParaList", erg);
    return erg;
  }
}
