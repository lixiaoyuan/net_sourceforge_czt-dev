
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zeves.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.z.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.zeves.ast.ZEvesFactory mZEvesFactory_;

  public JaxbToAst()
  {
    mZEvesFactory_ =
      new net.sourceforge.czt.zeves.impl.ZEvesFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zeves.ast.ZEvesFactory vZEvesFactory)
  {
    super(vZFactory);
    mZEvesFactory_ = vZEvesFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.zeves.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitSimplificationCommand(net.sourceforge.czt.zeves.jaxb.gen.SimplificationCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSimplificationCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.RewriteKind rewriteKind = null;
    if (jaxbObject.getRewriteKind() != null) {
      String rewriteKindJaxb = jaxbObject.getRewriteKind().value();
            
      rewriteKind = net.sourceforge.czt.zeves.ast.RewriteKind.valueOf(rewriteKindJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.RewritePower rewritePower = null;
    if (jaxbObject.getRewritePower() != null) {
      String rewritePowerJaxb = jaxbObject.getRewritePower().value();
            
      rewritePower = net.sourceforge.czt.zeves.ast.RewritePower.valueOf(rewritePowerJaxb);
    }
    net.sourceforge.czt.zeves.ast.SimplificationCommand erg = mZEvesFactory_.createSimplificationCommand(proofStep, rewriteKind, rewritePower);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSimplificationCommand", erg);
    return erg;
  }

  public Object visitInstantiationList(net.sourceforge.czt.zeves.jaxb.gen.InstantiationList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInstantiationList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.zeves.ast.Instantiation> instantiation = new java.util.Vector<net.sourceforge.czt.zeves.ast.Instantiation>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.zeves.jaxb.gen.Instantiation> 
					
		obj : jaxbObject.getInstantiation()) {
	  net.sourceforge.czt.zeves.ast.Instantiation o = (net.sourceforge.czt.zeves.ast.Instantiation) dispatch(obj);
	  instantiation.add(o);
	}
    
    net.sourceforge.czt.zeves.ast.InstantiationList erg = mZEvesFactory_.createInstantiationList(instantiation);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInstantiationList", erg);
    return erg;
  }

  public Object visitZEvesLabel(net.sourceforge.czt.zeves.jaxb.gen.ZEvesLabel jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZEvesLabel", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.LabelAbility labelAbility = null;
    if (jaxbObject.getLabelAbility() != null) {
      String labelAbilityJaxb = jaxbObject.getLabelAbility().value();
            
      labelAbility = net.sourceforge.czt.zeves.ast.LabelAbility.valueOf(labelAbilityJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.LabelUsage labelUsage = null;
    if (jaxbObject.getLabelUsage() != null) {
      String labelUsageJaxb = jaxbObject.getLabelUsage().value();
            
      labelUsage = net.sourceforge.czt.zeves.ast.LabelUsage.valueOf(labelUsageJaxb);
    }
    net.sourceforge.czt.zeves.ast.ZEvesLabel erg = mZEvesFactory_.createZEvesLabel(name, labelAbility, labelUsage);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZEvesLabel", erg);
    return erg;
  }

  public Object visitApplyCommand(net.sourceforge.czt.zeves.jaxb.gen.ApplyCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitApplyCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.ProofCommand proofCommand =
      (net.sourceforge.czt.zeves.ast.ProofCommand) dispatch(jaxbObject.getProofCommand());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.zeves.ast.ApplyCommand erg = mZEvesFactory_.createApplyCommand(proofStep, proofCommand, nameList, expr, pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitApplyCommand", erg);
    return erg;
  }

  public Object visitQuantifiersCommand(net.sourceforge.czt.zeves.jaxb.gen.QuantifiersCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitQuantifiersCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.InstantiationList instantiationList =
      (net.sourceforge.czt.zeves.ast.InstantiationList) dispatch(jaxbObject.getInstantiationList());
    net.sourceforge.czt.zeves.ast.QuantifiersCommand erg = mZEvesFactory_.createQuantifiersCommand(proofStep, instantiationList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitQuantifiersCommand", erg);
    return erg;
  }

  public Object visitProofCommandInfo(net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofCommandInfo", jaxbObject);
    java.math.BigInteger proofStepRank =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStepRank());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.ProofStepKind proofStepKind = null;
    if (jaxbObject.getProofStepKind() != null) {
      String proofStepKindJaxb = jaxbObject.getProofStepKind().value();
            
      proofStepKind = net.sourceforge.czt.zeves.ast.ProofStepKind.valueOf(proofStepKindJaxb);
    }
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.ProofStepScope proofStepScope = null;
    if (jaxbObject.getProofStepScope() != null) {
      String proofStepScopeJaxb = jaxbObject.getProofStepScope().value();
            
      proofStepScope = net.sourceforge.czt.zeves.ast.ProofStepScope.valueOf(proofStepScopeJaxb);
    }
    net.sourceforge.czt.zeves.ast.ProofCommandInfo erg = mZEvesFactory_.createProofCommandInfo(proofStepRank, proofStepKind, proofStepScope);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofCommandInfo", erg);
    return erg;
  }

  public Object visitProofScript(net.sourceforge.czt.zeves.jaxb.gen.ProofScript jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofScript", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.zeves.ast.ProofCommandList proofCommandList =
      (net.sourceforge.czt.zeves.ast.ProofCommandList) dispatch(jaxbObject.getProofCommandList());
    net.sourceforge.czt.zeves.ast.ProofScript erg = mZEvesFactory_.createProofScript(name, proofCommandList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofScript", erg);
    return erg;
  }

  public Object visitUseCommand(net.sourceforge.czt.zeves.jaxb.gen.UseCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitUseCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.InstantiationList instantiationList =
      (net.sourceforge.czt.zeves.ast.InstantiationList) dispatch(jaxbObject.getInstantiationList());
    net.sourceforge.czt.z.ast.RefExpr theoremRef =
      (net.sourceforge.czt.z.ast.RefExpr) dispatch(jaxbObject.getTheoremRef());
    net.sourceforge.czt.zeves.ast.UseCommand erg = mZEvesFactory_.createUseCommand(proofStep, instantiationList, theoremRef);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitUseCommand", erg);
    return erg;
  }

  public Object visitProofCommandInfoList(net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfoList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofCommandInfoList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.zeves.ast.ProofCommandInfo> proofCommandInfo = new java.util.Vector<net.sourceforge.czt.zeves.ast.ProofCommandInfo>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo> 
					
		obj : jaxbObject.getProofCommandInfo()) {
	  net.sourceforge.czt.zeves.ast.ProofCommandInfo o = (net.sourceforge.czt.zeves.ast.ProofCommandInfo) dispatch(obj);
	  proofCommandInfo.add(o);
	}
    
    net.sourceforge.czt.zeves.ast.ProofCommandInfoList erg = mZEvesFactory_.createProofCommandInfoList(proofCommandInfo);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofCommandInfoList", erg);
    return erg;
  }

  public Object visitSorryCommand(net.sourceforge.czt.zeves.jaxb.gen.SorryCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSorryCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    Boolean keepGoal =
      (Boolean) jaxbObject.isKeepGoal();
    net.sourceforge.czt.zeves.ast.SorryCommand erg = mZEvesFactory_.createSorryCommand(proofStep, keepGoal);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSorryCommand", erg);
    return erg;
  }

  public Object visitProofType(net.sourceforge.czt.zeves.jaxb.gen.ProofType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofType", jaxbObject);
    net.sourceforge.czt.zeves.ast.ProofCommandInfoList proofCommandInfoList =
      (net.sourceforge.czt.zeves.ast.ProofCommandInfoList) dispatch(jaxbObject.getProofCommandInfoList());
    net.sourceforge.czt.zeves.ast.ProofType erg = mZEvesFactory_.createProofType(proofCommandInfoList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofType", erg);
    return erg;
  }

  public Object visitWithCommand(net.sourceforge.czt.zeves.jaxb.gen.WithCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitWithCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.ProofCommand proofCommand =
      (net.sourceforge.czt.zeves.ast.ProofCommand) dispatch(jaxbObject.getProofCommand());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    Boolean enabled =
      (Boolean) jaxbObject.isEnabled();
    net.sourceforge.czt.zeves.ast.WithCommand erg = mZEvesFactory_.createWithCommand(proofStep, proofCommand, nameList, expr, pred, enabled);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitWithCommand", erg);
    return erg;
  }

  public Object visitSubstitutionCommand(net.sourceforge.czt.zeves.jaxb.gen.SubstitutionCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSubstitutionCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.ProofCommand proofCommand =
      (net.sourceforge.czt.zeves.ast.ProofCommand) dispatch(jaxbObject.getProofCommand());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.SubstitutionKind substitutionKind = null;
    if (jaxbObject.getSubstitutionKind() != null) {
      String substitutionKindJaxb = jaxbObject.getSubstitutionKind().value();
            
      substitutionKind = net.sourceforge.czt.zeves.ast.SubstitutionKind.valueOf(substitutionKindJaxb);
    }
    net.sourceforge.czt.zeves.ast.SubstitutionCommand erg = mZEvesFactory_.createSubstitutionCommand(proofStep, proofCommand, nameList, expr, pred, substitutionKind);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSubstitutionCommand", erg);
    return erg;
  }

  public Object visitZEvesNote(net.sourceforge.czt.zeves.jaxb.gen.ZEvesNote jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitZEvesNote", jaxbObject);
    String note =
      (String) dispatch(jaxbObject.getNote());
    net.sourceforge.czt.zeves.ast.ZEvesNote erg = mZEvesFactory_.createZEvesNote(note);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitZEvesNote", erg);
    return erg;
  }

  public Object visitNormalizationCommand(net.sourceforge.czt.zeves.jaxb.gen.NormalizationCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNormalizationCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.zeves.ast.ProofCommand proofCommand =
      (net.sourceforge.czt.zeves.ast.ProofCommand) dispatch(jaxbObject.getProofCommand());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.NormalizationKind normalizationKind = null;
    if (jaxbObject.getNormalizationKind() != null) {
      String normalizationKindJaxb = jaxbObject.getNormalizationKind().value();
            
      normalizationKind = net.sourceforge.czt.zeves.ast.NormalizationKind.valueOf(normalizationKindJaxb);
    }
    net.sourceforge.czt.zeves.ast.NormalizationCommand erg = mZEvesFactory_.createNormalizationCommand(proofStep, proofCommand, normalizationKind);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNormalizationCommand", erg);
    return erg;
  }

  public Object visitProofCommandList(net.sourceforge.czt.zeves.jaxb.gen.ProofCommandList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitProofCommandList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.zeves.ast.ProofCommand> proofCommand = new java.util.Vector<net.sourceforge.czt.zeves.ast.ProofCommand>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> 
					
		obj : jaxbObject.getProofCommand()) {
	  net.sourceforge.czt.zeves.ast.ProofCommand o = (net.sourceforge.czt.zeves.ast.ProofCommand) dispatch(obj);
	  proofCommand.add(o);
	}
    
    net.sourceforge.czt.zeves.ast.ProofCommandList erg = mZEvesFactory_.createProofCommandList(proofCommand);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitProofCommandList", erg);
    return erg;
  }

  public Object visitInstantiation(net.sourceforge.czt.zeves.jaxb.gen.Instantiation jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInstantiation", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.InstantiationKind instantiationKind = null;
    if (jaxbObject.getInstantiationKind() != null) {
      String instantiationKindJaxb = jaxbObject.getInstantiationKind().value();
            
      instantiationKind = net.sourceforge.czt.zeves.ast.InstantiationKind.valueOf(instantiationKindJaxb);
    }
    net.sourceforge.czt.zeves.ast.Instantiation erg = mZEvesFactory_.createInstantiation(name, expr, instantiationKind);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInstantiation", erg);
    return erg;
  }

  public Object visitCaseAnalysisCommand(net.sourceforge.czt.zeves.jaxb.gen.CaseAnalysisCommand jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitCaseAnalysisCommand", jaxbObject);
    java.math.BigInteger proofStep =
      (java.math.BigInteger) dispatch(jaxbObject.getProofStep());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.zeves.ast.CaseAnalysisKind caseAnalysisKind = null;
    if (jaxbObject.getCaseAnalysisKind() != null) {
      String caseAnalysisKindJaxb = jaxbObject.getCaseAnalysisKind().value();
            
      caseAnalysisKind = net.sourceforge.czt.zeves.ast.CaseAnalysisKind.valueOf(caseAnalysisKindJaxb);
    }
    net.sourceforge.czt.zeves.ast.CaseAnalysisCommand erg = mZEvesFactory_.createCaseAnalysisCommand(proofStep, pred, caseAnalysisKind);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitCaseAnalysisCommand", erg);
    return erg;
  }
}
