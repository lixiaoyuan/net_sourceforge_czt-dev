
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactoryImpl.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zeves.impl;


/**
 * <p>An implementation of the object factory for constructing
 * concrete Z terms.  Each factory method returns an instance
 * of the corresponding class provided in this package.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public class ZEvesFactoryImpl
  extends net.sourceforge.czt.z.impl.ZFactoryImpl
  implements net.sourceforge.czt.zeves.ast.ZEvesFactory
{
  protected ZEvesFactoryImpl(net.sourceforge.czt.util.Visitor<String> toStringVisitor)
  {
    super(toStringVisitor);
  }

  public ZEvesFactoryImpl()
  {
    super(new net.sourceforge.czt.zeves.util.PrintVisitor());
  }

  public net.sourceforge.czt.zeves.ast.SimplificationCommand createSimplificationCommand()
  {
    net.sourceforge.czt.zeves.ast.SimplificationCommand zedObject = new net.sourceforge.czt.zeves.impl.SimplificationCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.SimplificationCommand createSimplificationCommand( java.math.BigInteger  proofStep,net.sourceforge.czt.zeves.ast.RewriteKind
 rewriteKind,net.sourceforge.czt.zeves.ast.RewritePower
 rewritePower)
  {
    net.sourceforge.czt.zeves.ast.SimplificationCommand zedObject = createSimplificationCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setRewriteKind(rewriteKind);
    zedObject.setRewritePower(rewritePower);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.InstantiationList createInstantiationList()
  {
    net.sourceforge.czt.zeves.ast.InstantiationList zedObject = new net.sourceforge.czt.zeves.impl.InstantiationListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.InstantiationList createInstantiationList(java.util.List<? extends net.sourceforge.czt.zeves.ast.Instantiation>
 instantiation)
  {
    net.sourceforge.czt.zeves.ast.InstantiationList zedObject = createInstantiationList();
    if (instantiation != null) {
      zedObject.getInstantiation().addAll(instantiation);
    }
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ZEvesLabel createZEvesLabel()
  {
    net.sourceforge.czt.zeves.ast.ZEvesLabel zedObject = new net.sourceforge.czt.zeves.impl.ZEvesLabelImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ZEvesLabel createZEvesLabel( net.sourceforge.czt.z.ast.Name  name,net.sourceforge.czt.zeves.ast.LabelAbility
 labelAbility,net.sourceforge.czt.zeves.ast.LabelUsage
 labelUsage)
  {
    net.sourceforge.czt.zeves.ast.ZEvesLabel zedObject = createZEvesLabel();
    zedObject.setName(name);
    zedObject.setLabelAbility(labelAbility);
    zedObject.setLabelUsage(labelUsage);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ApplyCommand createApplyCommand()
  {
    net.sourceforge.czt.zeves.ast.ApplyCommand zedObject = new net.sourceforge.czt.zeves.impl.ApplyCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ApplyCommand createApplyCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred)
  {
    net.sourceforge.czt.zeves.ast.ApplyCommand zedObject = createApplyCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setProofCommand(proofCommand);
    zedObject.setNameList(nameList);
    zedObject.setExpr(expr);
    zedObject.setPred(pred);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.QuantifiersCommand createQuantifiersCommand()
  {
    net.sourceforge.czt.zeves.ast.QuantifiersCommand zedObject = new net.sourceforge.czt.zeves.impl.QuantifiersCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.QuantifiersCommand createQuantifiersCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.InstantiationList  instantiationList)
  {
    net.sourceforge.czt.zeves.ast.QuantifiersCommand zedObject = createQuantifiersCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setInstantiationList(instantiationList);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandInfo createProofCommandInfo()
  {
    net.sourceforge.czt.zeves.ast.ProofCommandInfo zedObject = new net.sourceforge.czt.zeves.impl.ProofCommandInfoImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandInfo createProofCommandInfo( java.math.BigInteger  proofStepRank,net.sourceforge.czt.zeves.ast.ProofStepKind
 proofStepKind,net.sourceforge.czt.zeves.ast.ProofStepScope
 proofStepScope)
  {
    net.sourceforge.czt.zeves.ast.ProofCommandInfo zedObject = createProofCommandInfo();
    zedObject.setProofStepRank(proofStepRank);
    zedObject.setProofStepKind(proofStepKind);
    zedObject.setProofStepScope(proofStepScope);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofScript createProofScript()
  {
    net.sourceforge.czt.zeves.ast.ProofScript zedObject = new net.sourceforge.czt.zeves.impl.ProofScriptImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofScript createProofScript( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.zeves.ast.ProofCommandList  proofCommandList)
  {
    net.sourceforge.czt.zeves.ast.ProofScript zedObject = createProofScript();
    zedObject.setName(name);
    zedObject.setProofCommandList(proofCommandList);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.UseCommand createUseCommand()
  {
    net.sourceforge.czt.zeves.ast.UseCommand zedObject = new net.sourceforge.czt.zeves.impl.UseCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.UseCommand createUseCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.InstantiationList  instantiationList, net.sourceforge.czt.z.ast.RefExpr  theoremRef)
  {
    net.sourceforge.czt.zeves.ast.UseCommand zedObject = createUseCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setInstantiationList(instantiationList);
    zedObject.setTheoremRef(theoremRef);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandInfoList createProofCommandInfoList()
  {
    net.sourceforge.czt.zeves.ast.ProofCommandInfoList zedObject = new net.sourceforge.czt.zeves.impl.ProofCommandInfoListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandInfoList createProofCommandInfoList(java.util.List<? extends net.sourceforge.czt.zeves.ast.ProofCommandInfo>
 proofCommandInfo)
  {
    net.sourceforge.czt.zeves.ast.ProofCommandInfoList zedObject = createProofCommandInfoList();
    if (proofCommandInfo != null) {
      zedObject.getProofCommandInfo().addAll(proofCommandInfo);
    }
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.SorryCommand createSorryCommand()
  {
    net.sourceforge.czt.zeves.ast.SorryCommand zedObject = new net.sourceforge.czt.zeves.impl.SorryCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.SorryCommand createSorryCommand( java.math.BigInteger  proofStep, Boolean  keepGoal)
  {
    net.sourceforge.czt.zeves.ast.SorryCommand zedObject = createSorryCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setKeepGoal(keepGoal);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofType createProofType()
  {
    net.sourceforge.czt.zeves.ast.ProofType zedObject = new net.sourceforge.czt.zeves.impl.ProofTypeImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofType createProofType( net.sourceforge.czt.zeves.ast.ProofCommandInfoList  proofCommandInfoList)
  {
    net.sourceforge.czt.zeves.ast.ProofType zedObject = createProofType();
    zedObject.setProofCommandInfoList(proofCommandInfoList);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.WithCommand createWithCommand()
  {
    net.sourceforge.czt.zeves.ast.WithCommand zedObject = new net.sourceforge.czt.zeves.impl.WithCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.WithCommand createWithCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred, Boolean  enabled)
  {
    net.sourceforge.czt.zeves.ast.WithCommand zedObject = createWithCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setProofCommand(proofCommand);
    zedObject.setNameList(nameList);
    zedObject.setExpr(expr);
    zedObject.setPred(pred);
    zedObject.setEnabled(enabled);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.SubstitutionCommand createSubstitutionCommand()
  {
    net.sourceforge.czt.zeves.ast.SubstitutionCommand zedObject = new net.sourceforge.czt.zeves.impl.SubstitutionCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.SubstitutionCommand createSubstitutionCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred,net.sourceforge.czt.zeves.ast.SubstitutionKind
 substitutionKind)
  {
    net.sourceforge.czt.zeves.ast.SubstitutionCommand zedObject = createSubstitutionCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setProofCommand(proofCommand);
    zedObject.setNameList(nameList);
    zedObject.setExpr(expr);
    zedObject.setPred(pred);
    zedObject.setSubstitutionKind(substitutionKind);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ZEvesNote createZEvesNote()
  {
    net.sourceforge.czt.zeves.ast.ZEvesNote zedObject = new net.sourceforge.czt.zeves.impl.ZEvesNoteImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ZEvesNote createZEvesNote( String  note)
  {
    net.sourceforge.czt.zeves.ast.ZEvesNote zedObject = createZEvesNote();
    zedObject.setNote(note);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.NormalizationCommand createNormalizationCommand()
  {
    net.sourceforge.czt.zeves.ast.NormalizationCommand zedObject = new net.sourceforge.czt.zeves.impl.NormalizationCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.NormalizationCommand createNormalizationCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand,net.sourceforge.czt.zeves.ast.NormalizationKind
 normalizationKind)
  {
    net.sourceforge.czt.zeves.ast.NormalizationCommand zedObject = createNormalizationCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setProofCommand(proofCommand);
    zedObject.setNormalizationKind(normalizationKind);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandList createProofCommandList()
  {
    net.sourceforge.czt.zeves.ast.ProofCommandList zedObject = new net.sourceforge.czt.zeves.impl.ProofCommandListImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.ProofCommandList createProofCommandList(java.util.List<? extends net.sourceforge.czt.zeves.ast.ProofCommand>
 proofCommand)
  {
    net.sourceforge.czt.zeves.ast.ProofCommandList zedObject = createProofCommandList();
    if (proofCommand != null) {
      zedObject.getProofCommand().addAll(proofCommand);
    }
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.Instantiation createInstantiation()
  {
    net.sourceforge.czt.zeves.ast.Instantiation zedObject = new net.sourceforge.czt.zeves.impl.InstantiationImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.Instantiation createInstantiation( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr,net.sourceforge.czt.zeves.ast.InstantiationKind
 instantiationKind)
  {
    net.sourceforge.czt.zeves.ast.Instantiation zedObject = createInstantiation();
    zedObject.setName(name);
    zedObject.setExpr(expr);
    zedObject.setInstantiationKind(instantiationKind);
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createCaseAnalysisCommand()
  {
    net.sourceforge.czt.zeves.ast.CaseAnalysisCommand zedObject = new net.sourceforge.czt.zeves.impl.CaseAnalysisCommandImpl(this);
    countInstance();
    return zedObject;
  }

  public net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createCaseAnalysisCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.z.ast.Pred  pred,net.sourceforge.czt.zeves.ast.CaseAnalysisKind
 caseAnalysisKind)
  {
    net.sourceforge.czt.zeves.ast.CaseAnalysisCommand zedObject = createCaseAnalysisCommand();
    zedObject.setProofStep(proofStep);
    zedObject.setPred(pred);
    zedObject.setCaseAnalysisKind(caseAnalysisKind);
    return zedObject;
  }

private <E> java.util.List<E> newList(@SuppressWarnings("unchecked")E... elems)
{
	java.util.List<E> result = new java.util.ArrayList<E>();
	result.addAll(java.util.Arrays.asList(elems));
	return result;
}

private java.math.BigInteger proofStep_ = java.math.BigInteger.ZERO;

private void countStep()
{
	proofStep_ = proofStep_.add(java.math.BigInteger.ONE);
}

public void resetProofSteps()
{
	proofStep_ = java.math.BigInteger.ZERO;
}

public long currentProofStep()
{
	return proofStep_.longValue();
}

public net.sourceforge.czt.zeves.ast.ApplyCommand createGlobalApplyCommand(net.sourceforge.czt.z.ast.Name name)
{
	countStep();
	return createApplyCommand(proofStep_, null, createZNameList(newList(name)), null, null);
}

public net.sourceforge.czt.zeves.ast.ApplyCommand createApplyToExprCommand(net.sourceforge.czt.z.ast.Name name, net.sourceforge.czt.z.ast.Expr expr)
{
	countStep();
	return createApplyCommand(proofStep_, null, createZNameList(newList(name)), expr, null);
}

public net.sourceforge.czt.zeves.ast.ApplyCommand createApplyToPredCommand(net.sourceforge.czt.z.ast.Name name, net.sourceforge.czt.z.ast.Pred pred)
{
	countStep();
	return createApplyCommand(proofStep_, null, createZNameList(newList(name)), null, pred);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createSimplifyCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Simplify, net.sourceforge.czt.zeves.ast.RewritePower.None);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createRewriteCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Rewrite, net.sourceforge.czt.zeves.ast.RewritePower.None);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createReduceCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Reduce, net.sourceforge.czt.zeves.ast.RewritePower.None);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createProveBySimplifyCommand()
{
	throw new UnsupportedOperationException("Prove command can only be by rewrite or reduce");
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createProveByRewriteCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Rewrite, net.sourceforge.czt.zeves.ast.RewritePower.Prove);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createProveByReduceCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Reduce, net.sourceforge.czt.zeves.ast.RewritePower.Prove);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createTrivialSimplifyCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Simplify, net.sourceforge.czt.zeves.ast.RewritePower.Trivial);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createTrivialRewriteCommand()
{
	countStep();
	return createSimplificationCommand(proofStep_, net.sourceforge.czt.zeves.ast.RewriteKind.Rewrite, net.sourceforge.czt.zeves.ast.RewritePower.Trivial);
}

public net.sourceforge.czt.zeves.ast.SimplificationCommand createTrivialReduceCommand()
{
	throw new UnsupportedOperationException("Trivial command can only be by rewrite or simplify");
}

public net.sourceforge.czt.zeves.ast.NormalizationCommand createConjunctiveCommand()
{
	countStep();
	return createNormalizationCommand(proofStep_, null, net.sourceforge.czt.zeves.ast.NormalizationKind.Conjunctive);
}

public net.sourceforge.czt.zeves.ast.NormalizationCommand createDisjunctiveCommand()
{
	countStep();
	return createNormalizationCommand(proofStep_, null, net.sourceforge.czt.zeves.ast.NormalizationKind.Disjunctive);
}

public net.sourceforge.czt.zeves.ast.NormalizationCommand createRearrangeCommand()
{
	countStep();
	return createNormalizationCommand(proofStep_, null, net.sourceforge.czt.zeves.ast.NormalizationKind.Rearrange);
}

public net.sourceforge.czt.zeves.ast.NormalizationCommand createWithNormalizationCommand(net.sourceforge.czt.zeves.ast.ProofCommand cmd)
{
	countStep();
	return createNormalizationCommand(proofStep_, cmd, net.sourceforge.czt.zeves.ast.NormalizationKind.Command);
}

public net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createCasesCommand()
{
	countStep();
	return createCaseAnalysisCommand(proofStep_, null, net.sourceforge.czt.zeves.ast.CaseAnalysisKind.Cases);
}

public net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createNextCommand()
{
	countStep();
	return createCaseAnalysisCommand(proofStep_, null, net.sourceforge.czt.zeves.ast.CaseAnalysisKind.Next);
}

public net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createSplitCommand(net.sourceforge.czt.z.ast.Pred toSplitOver)
{
	countStep();
	return createCaseAnalysisCommand(proofStep_, toSplitOver, net.sourceforge.czt.zeves.ast.CaseAnalysisKind.Split);
}

public net.sourceforge.czt.zeves.ast.WithCommand createWithEnabledCommand(net.sourceforge.czt.z.ast.NameList nl, net.sourceforge.czt.zeves.ast.ProofCommand cmd)
{
	countStep();
	return createWithCommand(proofStep_, cmd, nl, null, null, true);
}

public net.sourceforge.czt.zeves.ast.WithCommand createWithDisabledCommand(net.sourceforge.czt.z.ast.NameList nl, net.sourceforge.czt.zeves.ast.ProofCommand cmd)
{
	countStep();
	return createWithCommand(proofStep_, cmd, nl, null, null, false);
}

public net.sourceforge.czt.zeves.ast.WithCommand createWithPredicateCommand(net.sourceforge.czt.z.ast.Pred pred, net.sourceforge.czt.zeves.ast.ProofCommand cmd)
{
	countStep();
	return createWithCommand(proofStep_, cmd, null, null, pred, null);
}

public net.sourceforge.czt.zeves.ast.WithCommand createWithExpressionCommand(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.zeves.ast.ProofCommand cmd)
{
	countStep();
	return createWithCommand(proofStep_, cmd, null, expr, null, null);
}

public net.sourceforge.czt.zeves.ast.SubstitutionCommand createGlobalEqualitySubstituteCommand()
{
	countStep();
	return createSubstitutionCommand(proofStep_, null, null, null, null, net.sourceforge.czt.zeves.ast.SubstitutionKind.Equality);
}

public net.sourceforge.czt.zeves.ast.SubstitutionCommand createGlobalInvokeCommand()
{
	countStep();
	return createSubstitutionCommand(proofStep_, null, null, null, null, net.sourceforge.czt.zeves.ast.SubstitutionKind.Invoke);
}

public net.sourceforge.czt.zeves.ast.SubstitutionCommand createEqualitySubstituteCommand(net.sourceforge.czt.z.ast.Expr expr)
{
	countStep();
	return createSubstitutionCommand(proofStep_, null, null, expr, null, net.sourceforge.czt.zeves.ast.SubstitutionKind.Equality);
}

public net.sourceforge.czt.zeves.ast.SubstitutionCommand createInvokeCommand(net.sourceforge.czt.z.ast.Name name)
{
	countStep();
	return createSubstitutionCommand(proofStep_, null, createZNameList(newList(name)), null, null, net.sourceforge.czt.zeves.ast.SubstitutionKind.Invoke);
}

public net.sourceforge.czt.zeves.ast.SubstitutionCommand createInvokePredicateCommand(net.sourceforge.czt.z.ast.Pred pred)
{
	countStep();
	return createSubstitutionCommand(proofStep_, null, null, null, pred, net.sourceforge.czt.zeves.ast.SubstitutionKind.Invoke);
}

public net.sourceforge.czt.zeves.ast.QuantifiersCommand createPrenexCommand()
{
	countStep();
	return createQuantifiersCommand(proofStep_, null);
}

public net.sourceforge.czt.zeves.ast.QuantifiersCommand createInstantiateCommand(net.sourceforge.czt.zeves.ast.InstantiationList inst)
{
	countStep();
	return createQuantifiersCommand(proofStep_, inst);
}

public net.sourceforge.czt.zeves.ast.UseCommand createUseCommand(net.sourceforge.czt.z.ast.RefExpr thmRef)
{
	countStep();
	return createUseCommand(proofStep_, null, thmRef);
}

public net.sourceforge.czt.zeves.ast.UseCommand createUseCommand(net.sourceforge.czt.z.ast.RefExpr thmRef, net.sourceforge.czt.zeves.ast.InstantiationList inst)
{
	countStep();
	return createUseCommand(proofStep_, inst, thmRef);
}

public net.sourceforge.czt.zeves.ast.SorryCommand createSorryCommand(boolean keepGoal)
{
	countStep();
	return createSorryCommand(proofStep_, keepGoal);
}}
