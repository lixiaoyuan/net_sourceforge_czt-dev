
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zeves.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.zeves.visitor.ZEvesVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.zeves.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.zeves.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.zeves.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSimplificationCommand(net.sourceforge.czt.zeves.ast.SimplificationCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSimplificationCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.SimplificationCommand jaxbObject = objectFactory_.createSimplificationCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = RewriteKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getRewriteKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setRewriteKind(net.sourceforge.czt.zeves.jaxb.gen.RewriteKind.fromValue(zedObject.getRewriteKind().toString()));
      }
// prop.Name   = RewritePower
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getRewritePower() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setRewritePower(net.sourceforge.czt.zeves.jaxb.gen.RewritePower.fromValue(zedObject.getRewritePower().toString()));
      }
      getLogger().exiting(getClassName(), "visitSimplificationCommand", jaxbObject);
      return objectFactory_.createSimplificationCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SimplificationCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInstantiationList(net.sourceforge.czt.zeves.ast.InstantiationList zedObject)
  {
    getLogger().entering(getClassName(), "visitInstantiationList", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.InstantiationList jaxbObject = objectFactory_.createInstantiationList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Instantiation
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zeves.ast.Instantiation o : zedObject.getInstantiation()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.Instantiation> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.Instantiation>)r;
				  jaxbObject.getInstantiation().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zeves.jaxb.gen.Instantiation";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitInstantiationList", jaxbObject);
      return objectFactory_.createInstantiationList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InstantiationList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZEvesLabel(net.sourceforge.czt.zeves.ast.ZEvesLabel zedObject)
  {
    getLogger().entering(getClassName(), "visitZEvesLabel", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ZEvesLabel jaxbObject = objectFactory_.createZEvesLabel();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = LabelAbility
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getLabelAbility() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setLabelAbility(net.sourceforge.czt.zeves.jaxb.gen.LabelAbility.fromValue(zedObject.getLabelAbility().toString()));
      }
// prop.Name   = LabelUsage
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getLabelUsage() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setLabelUsage(net.sourceforge.czt.zeves.jaxb.gen.LabelUsage.fromValue(zedObject.getLabelUsage().toString()));
      }
      getLogger().exiting(getClassName(), "visitZEvesLabel", jaxbObject);
      return objectFactory_.createZEvesLabel(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZEvesLabel to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitApplyCommand(net.sourceforge.czt.zeves.ast.ApplyCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitApplyCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ApplyCommand jaxbObject = objectFactory_.createApplyCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = ProofCommand
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommand() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommand();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand>)term.accept(this);
        jaxbObject.setProofCommand(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitApplyCommand", jaxbObject);
      return objectFactory_.createApplyCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ApplyCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitQuantifiersCommand(net.sourceforge.czt.zeves.ast.QuantifiersCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitQuantifiersCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.QuantifiersCommand jaxbObject = objectFactory_.createQuantifiersCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = InstantiationList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getInstantiationList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getInstantiationList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.InstantiationList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.InstantiationList>)term.accept(this);
        jaxbObject.setInstantiationList(newValue);
      }
      getLogger().exiting(getClassName(), "visitQuantifiersCommand", jaxbObject);
      return objectFactory_.createQuantifiersCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a QuantifiersCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofCommandInfo(net.sourceforge.czt.zeves.ast.ProofCommandInfo zedObject)
  {
    getLogger().entering(getClassName(), "visitProofCommandInfo", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo jaxbObject = objectFactory_.createProofCommandInfo();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStepRank
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStepRank() != null) {
        jaxbObject.setProofStepRank(zedObject.getProofStepRank());
      }
// prop.Name   = ProofStepKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getProofStepKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setProofStepKind(net.sourceforge.czt.zeves.jaxb.gen.ProofStepKind.fromValue(zedObject.getProofStepKind().toString()));
      }
// prop.Name   = ProofStepScope
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getProofStepScope() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setProofStepScope(net.sourceforge.czt.zeves.jaxb.gen.ProofStepScope.fromValue(zedObject.getProofStepScope().toString()));
      }
      getLogger().exiting(getClassName(), "visitProofCommandInfo", jaxbObject);
      return objectFactory_.createProofCommandInfo(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofCommandInfo to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofScript(net.sourceforge.czt.zeves.ast.ProofScript zedObject)
  {
    getLogger().entering(getClassName(), "visitProofScript", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ProofScript jaxbObject = objectFactory_.createProofScript();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = ProofCommandList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommandList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommandList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandList>)term.accept(this);
        jaxbObject.setProofCommandList(newValue);
      }
      getLogger().exiting(getClassName(), "visitProofScript", jaxbObject);
      return objectFactory_.createProofScript(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofScript to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitUseCommand(net.sourceforge.czt.zeves.ast.UseCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitUseCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.UseCommand jaxbObject = objectFactory_.createUseCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = InstantiationList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getInstantiationList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getInstantiationList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.InstantiationList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.InstantiationList>)term.accept(this);
        jaxbObject.setInstantiationList(newValue);
      }
// prop.Name   = TheoremRef
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getTheoremRef() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getTheoremRef();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RefExpr>)term.accept(this);
        jaxbObject.setTheoremRef(newValue);
      }
      getLogger().exiting(getClassName(), "visitUseCommand", jaxbObject);
      return objectFactory_.createUseCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a UseCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofCommandInfoList(net.sourceforge.czt.zeves.ast.ProofCommandInfoList zedObject)
  {
    getLogger().entering(getClassName(), "visitProofCommandInfoList", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfoList jaxbObject = objectFactory_.createProofCommandInfoList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofCommandInfo
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zeves.ast.ProofCommandInfo o : zedObject.getProofCommandInfo()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo>)r;
				  jaxbObject.getProofCommandInfo().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfo";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProofCommandInfoList", jaxbObject);
      return objectFactory_.createProofCommandInfoList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofCommandInfoList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSorryCommand(net.sourceforge.czt.zeves.ast.SorryCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSorryCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.SorryCommand jaxbObject = objectFactory_.createSorryCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = KeepGoal
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getKeepGoal() != null) {
        jaxbObject.setKeepGoal(zedObject.getKeepGoal());
      }
      getLogger().exiting(getClassName(), "visitSorryCommand", jaxbObject);
      return objectFactory_.createSorryCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SorryCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofType(net.sourceforge.czt.zeves.ast.ProofType zedObject)
  {
    getLogger().entering(getClassName(), "visitProofType", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ProofType jaxbObject = objectFactory_.createProofType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofCommandInfoList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommandInfoList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommandInfoList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfoList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommandInfoList>)term.accept(this);
        jaxbObject.setProofCommandInfoList(newValue);
      }
      getLogger().exiting(getClassName(), "visitProofType", jaxbObject);
      return objectFactory_.createProofType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitWithCommand(net.sourceforge.czt.zeves.ast.WithCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitWithCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.WithCommand jaxbObject = objectFactory_.createWithCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = ProofCommand
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommand() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommand();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand>)term.accept(this);
        jaxbObject.setProofCommand(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = Enabled
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getEnabled() != null) {
        jaxbObject.setEnabled(zedObject.getEnabled());
      }
      getLogger().exiting(getClassName(), "visitWithCommand", jaxbObject);
      return objectFactory_.createWithCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a WithCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSubstitutionCommand(net.sourceforge.czt.zeves.ast.SubstitutionCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitSubstitutionCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.SubstitutionCommand jaxbObject = objectFactory_.createSubstitutionCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = ProofCommand
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommand() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommand();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand>)term.accept(this);
        jaxbObject.setProofCommand(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = SubstitutionKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getSubstitutionKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setSubstitutionKind(net.sourceforge.czt.zeves.jaxb.gen.SubstitutionKind.fromValue(zedObject.getSubstitutionKind().toString()));
      }
      getLogger().exiting(getClassName(), "visitSubstitutionCommand", jaxbObject);
      return objectFactory_.createSubstitutionCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SubstitutionCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitZEvesNote(net.sourceforge.czt.zeves.ast.ZEvesNote zedObject)
  {
    getLogger().entering(getClassName(), "visitZEvesNote", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ZEvesNote jaxbObject = objectFactory_.createZEvesNote();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Note
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNote() != null) {
        jaxbObject.setNote(zedObject.getNote());
      }
      getLogger().exiting(getClassName(), "visitZEvesNote", jaxbObject);
      return objectFactory_.createZEvesNote(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ZEvesNote to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNormalizationCommand(net.sourceforge.czt.zeves.ast.NormalizationCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitNormalizationCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.NormalizationCommand jaxbObject = objectFactory_.createNormalizationCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = ProofCommand
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofCommand() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getProofCommand();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand>)term.accept(this);
        jaxbObject.setProofCommand(newValue);
      }
// prop.Name   = NormalizationKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getNormalizationKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setNormalizationKind(net.sourceforge.czt.zeves.jaxb.gen.NormalizationKind.fromValue(zedObject.getNormalizationKind().toString()));
      }
      getLogger().exiting(getClassName(), "visitNormalizationCommand", jaxbObject);
      return objectFactory_.createNormalizationCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NormalizationCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitProofCommandList(net.sourceforge.czt.zeves.ast.ProofCommandList zedObject)
  {
    getLogger().entering(getClassName(), "visitProofCommandList", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.ProofCommandList jaxbObject = objectFactory_.createProofCommandList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofCommand
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zeves.ast.ProofCommand o : zedObject.getProofCommand()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zeves.jaxb.gen.ProofCommand>)r;
				  jaxbObject.getProofCommand().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zeves.jaxb.gen.ProofCommand";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitProofCommandList", jaxbObject);
      return objectFactory_.createProofCommandList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ProofCommandList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInstantiation(net.sourceforge.czt.zeves.ast.Instantiation zedObject)
  {
    getLogger().entering(getClassName(), "visitInstantiation", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.Instantiation jaxbObject = objectFactory_.createInstantiation();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = InstantiationKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getInstantiationKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setInstantiationKind(net.sourceforge.czt.zeves.jaxb.gen.InstantiationKind.fromValue(zedObject.getInstantiationKind().toString()));
      }
      getLogger().exiting(getClassName(), "visitInstantiation", jaxbObject);
      return objectFactory_.createInstantiation(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Instantiation to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCaseAnalysisCommand(net.sourceforge.czt.zeves.ast.CaseAnalysisCommand zedObject)
  {
    getLogger().entering(getClassName(), "visitCaseAnalysisCommand", zedObject);
    try {
      net.sourceforge.czt.zeves.jaxb.gen.CaseAnalysisCommand jaxbObject = objectFactory_.createCaseAnalysisCommand();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ProofStep
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getProofStep() != null) {
        jaxbObject.setProofStep(zedObject.getProofStep());
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = CaseAnalysisKind
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getCaseAnalysisKind() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setCaseAnalysisKind(net.sourceforge.czt.zeves.jaxb.gen.CaseAnalysisKind.fromValue(zedObject.getCaseAnalysisKind().toString()));
      }
      getLogger().exiting(getClassName(), "visitCaseAnalysisCommand", jaxbObject);
      return objectFactory_.createCaseAnalysisCommand(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CaseAnalysisCommand to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
