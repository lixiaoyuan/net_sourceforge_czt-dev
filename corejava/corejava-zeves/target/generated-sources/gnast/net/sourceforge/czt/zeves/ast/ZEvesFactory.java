
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zeves.ast;


/**
 * <p>The object factory for the AST.
 * This interface contains factory methods
 * for each concrete Z term.</p>
 *
 * <p>This object factory allows the programmer to programatically
 * construct new instances of concrete Z terms.
 * There is a factory method that does not require arguments
 * (called default factory method)
 * and a factory method where all the children (except annotations)
 * of that particular Z term can be provided.</p>
 *
 * @author GnAST version 1.6-cdh
 */
public interface ZEvesFactory
  extends net.sourceforge.czt.z.ast.ZFactory
{
  /**
   * Creates an instance of {@link SimplificationCommand}.
   *
   * @return the new instance of SimplificationCommand.
   */
  net.sourceforge.czt.zeves.ast.SimplificationCommand createSimplificationCommand();

  /**
   * Creates an instance of {@link SimplificationCommand} with the given children.
   *
   * @return the new instance of SimplificationCommand.
   */
  net.sourceforge.czt.zeves.ast.SimplificationCommand createSimplificationCommand( java.math.BigInteger  proofStep,net.sourceforge.czt.zeves.ast.RewriteKind
 rewriteKind,net.sourceforge.czt.zeves.ast.RewritePower
 rewritePower);

  /**
   * Creates an instance of {@link InstantiationList}.
   *
   * @return the new instance of InstantiationList.
   */
  net.sourceforge.czt.zeves.ast.InstantiationList createInstantiationList();

  /**
   * Creates an instance of {@link InstantiationList} with the given children.
   *
   * @return the new instance of InstantiationList.
   */
  net.sourceforge.czt.zeves.ast.InstantiationList createInstantiationList(java.util.List<? extends net.sourceforge.czt.zeves.ast.Instantiation>
 instantiation);

  /**
   * Creates an instance of {@link ZEvesLabel}.
   *
   * @return the new instance of ZEvesLabel.
   */
  net.sourceforge.czt.zeves.ast.ZEvesLabel createZEvesLabel();

  /**
   * Creates an instance of {@link ZEvesLabel} with the given children.
   *
   * @return the new instance of ZEvesLabel.
   */
  net.sourceforge.czt.zeves.ast.ZEvesLabel createZEvesLabel( net.sourceforge.czt.z.ast.Name  name,net.sourceforge.czt.zeves.ast.LabelAbility
 labelAbility,net.sourceforge.czt.zeves.ast.LabelUsage
 labelUsage);

  /**
   * Creates an instance of {@link ApplyCommand}.
   *
   * @return the new instance of ApplyCommand.
   */
  net.sourceforge.czt.zeves.ast.ApplyCommand createApplyCommand();

  /**
   * Creates an instance of {@link ApplyCommand} with the given children.
   *
   * @return the new instance of ApplyCommand.
   */
  net.sourceforge.czt.zeves.ast.ApplyCommand createApplyCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred);

  /**
   * Creates an instance of {@link QuantifiersCommand}.
   *
   * @return the new instance of QuantifiersCommand.
   */
  net.sourceforge.czt.zeves.ast.QuantifiersCommand createQuantifiersCommand();

  /**
   * Creates an instance of {@link QuantifiersCommand} with the given children.
   *
   * @return the new instance of QuantifiersCommand.
   */
  net.sourceforge.czt.zeves.ast.QuantifiersCommand createQuantifiersCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.InstantiationList  instantiationList);

  /**
   * Creates an instance of {@link ProofCommandInfo}.
   *
   * @return the new instance of ProofCommandInfo.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandInfo createProofCommandInfo();

  /**
   * Creates an instance of {@link ProofCommandInfo} with the given children.
   *
   * @return the new instance of ProofCommandInfo.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandInfo createProofCommandInfo( java.math.BigInteger  proofStepRank,net.sourceforge.czt.zeves.ast.ProofStepKind
 proofStepKind,net.sourceforge.czt.zeves.ast.ProofStepScope
 proofStepScope);

  /**
   * Creates an instance of {@link ProofScript}.
   *
   * @return the new instance of ProofScript.
   */
  net.sourceforge.czt.zeves.ast.ProofScript createProofScript();

  /**
   * Creates an instance of {@link ProofScript} with the given children.
   *
   * @return the new instance of ProofScript.
   */
  net.sourceforge.czt.zeves.ast.ProofScript createProofScript( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.zeves.ast.ProofCommandList  proofCommandList);

  /**
   * Creates an instance of {@link UseCommand}.
   *
   * @return the new instance of UseCommand.
   */
  net.sourceforge.czt.zeves.ast.UseCommand createUseCommand();

  /**
   * Creates an instance of {@link UseCommand} with the given children.
   *
   * @return the new instance of UseCommand.
   */
  net.sourceforge.czt.zeves.ast.UseCommand createUseCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.InstantiationList  instantiationList, net.sourceforge.czt.z.ast.RefExpr  theoremRef);

  /**
   * Creates an instance of {@link ProofCommandInfoList}.
   *
   * @return the new instance of ProofCommandInfoList.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandInfoList createProofCommandInfoList();

  /**
   * Creates an instance of {@link ProofCommandInfoList} with the given children.
   *
   * @return the new instance of ProofCommandInfoList.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandInfoList createProofCommandInfoList(java.util.List<? extends net.sourceforge.czt.zeves.ast.ProofCommandInfo>
 proofCommandInfo);

  /**
   * Creates an instance of {@link SorryCommand}.
   *
   * @return the new instance of SorryCommand.
   */
  net.sourceforge.czt.zeves.ast.SorryCommand createSorryCommand();

  /**
   * Creates an instance of {@link SorryCommand} with the given children.
   *
   * @return the new instance of SorryCommand.
   */
  net.sourceforge.czt.zeves.ast.SorryCommand createSorryCommand( java.math.BigInteger  proofStep, Boolean  keepGoal);

  /**
   * Creates an instance of {@link ProofType}.
   *
   * @return the new instance of ProofType.
   */
  net.sourceforge.czt.zeves.ast.ProofType createProofType();

  /**
   * Creates an instance of {@link ProofType} with the given children.
   *
   * @return the new instance of ProofType.
   */
  net.sourceforge.czt.zeves.ast.ProofType createProofType( net.sourceforge.czt.zeves.ast.ProofCommandInfoList  proofCommandInfoList);

  /**
   * Creates an instance of {@link WithCommand}.
   *
   * @return the new instance of WithCommand.
   */
  net.sourceforge.czt.zeves.ast.WithCommand createWithCommand();

  /**
   * Creates an instance of {@link WithCommand} with the given children.
   *
   * @return the new instance of WithCommand.
   */
  net.sourceforge.czt.zeves.ast.WithCommand createWithCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred, Boolean  enabled);

  /**
   * Creates an instance of {@link SubstitutionCommand}.
   *
   * @return the new instance of SubstitutionCommand.
   */
  net.sourceforge.czt.zeves.ast.SubstitutionCommand createSubstitutionCommand();

  /**
   * Creates an instance of {@link SubstitutionCommand} with the given children.
   *
   * @return the new instance of SubstitutionCommand.
   */
  net.sourceforge.czt.zeves.ast.SubstitutionCommand createSubstitutionCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand, net.sourceforge.czt.z.ast.NameList  nameList, net.sourceforge.czt.z.ast.Expr  expr, net.sourceforge.czt.z.ast.Pred  pred,net.sourceforge.czt.zeves.ast.SubstitutionKind
 substitutionKind);

  /**
   * Creates an instance of {@link ZEvesNote}.
   *
   * @return the new instance of ZEvesNote.
   */
  net.sourceforge.czt.zeves.ast.ZEvesNote createZEvesNote();

  /**
   * Creates an instance of {@link ZEvesNote} with the given children.
   *
   * @return the new instance of ZEvesNote.
   */
  net.sourceforge.czt.zeves.ast.ZEvesNote createZEvesNote( String  note);

  /**
   * Creates an instance of {@link NormalizationCommand}.
   *
   * @return the new instance of NormalizationCommand.
   */
  net.sourceforge.czt.zeves.ast.NormalizationCommand createNormalizationCommand();

  /**
   * Creates an instance of {@link NormalizationCommand} with the given children.
   *
   * @return the new instance of NormalizationCommand.
   */
  net.sourceforge.czt.zeves.ast.NormalizationCommand createNormalizationCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.zeves.ast.ProofCommand  proofCommand,net.sourceforge.czt.zeves.ast.NormalizationKind
 normalizationKind);

  /**
   * Creates an instance of {@link ProofCommandList}.
   *
   * @return the new instance of ProofCommandList.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandList createProofCommandList();

  /**
   * Creates an instance of {@link ProofCommandList} with the given children.
   *
   * @return the new instance of ProofCommandList.
   */
  net.sourceforge.czt.zeves.ast.ProofCommandList createProofCommandList(java.util.List<? extends net.sourceforge.czt.zeves.ast.ProofCommand>
 proofCommand);

  /**
   * Creates an instance of {@link Instantiation}.
   *
   * @return the new instance of Instantiation.
   */
  net.sourceforge.czt.zeves.ast.Instantiation createInstantiation();

  /**
   * Creates an instance of {@link Instantiation} with the given children.
   *
   * @return the new instance of Instantiation.
   */
  net.sourceforge.czt.zeves.ast.Instantiation createInstantiation( net.sourceforge.czt.z.ast.Name  name, net.sourceforge.czt.z.ast.Expr  expr,net.sourceforge.czt.zeves.ast.InstantiationKind
 instantiationKind);

  /**
   * Creates an instance of {@link CaseAnalysisCommand}.
   *
   * @return the new instance of CaseAnalysisCommand.
   */
  net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createCaseAnalysisCommand();

  /**
   * Creates an instance of {@link CaseAnalysisCommand} with the given children.
   *
   * @return the new instance of CaseAnalysisCommand.
   */
  net.sourceforge.czt.zeves.ast.CaseAnalysisCommand createCaseAnalysisCommand( java.math.BigInteger  proofStep, net.sourceforge.czt.z.ast.Pred  pred,net.sourceforge.czt.zeves.ast.CaseAnalysisKind
 caseAnalysisKind);

void resetProofSteps();
long currentProofStep();

ApplyCommand createGlobalApplyCommand(net.sourceforge.czt.z.ast.Name name);
ApplyCommand createApplyToExprCommand(net.sourceforge.czt.z.ast.Name name, net.sourceforge.czt.z.ast.Expr expr);
ApplyCommand createApplyToPredCommand(net.sourceforge.czt.z.ast.Name name, net.sourceforge.czt.z.ast.Pred pred);

SimplificationCommand createSimplifyCommand();
SimplificationCommand createRewriteCommand();
SimplificationCommand createReduceCommand();
SimplificationCommand createProveBySimplifyCommand();
SimplificationCommand createProveByRewriteCommand();
SimplificationCommand createProveByReduceCommand();
SimplificationCommand createTrivialSimplifyCommand();
SimplificationCommand createTrivialRewriteCommand();
SimplificationCommand createTrivialReduceCommand();

NormalizationCommand createConjunctiveCommand();
NormalizationCommand createDisjunctiveCommand();
NormalizationCommand createRearrangeCommand();
NormalizationCommand createWithNormalizationCommand(ProofCommand cmd);

CaseAnalysisCommand createCasesCommand();
CaseAnalysisCommand createNextCommand();
CaseAnalysisCommand createSplitCommand(net.sourceforge.czt.z.ast.Pred toSplitOver);

WithCommand createWithEnabledCommand(net.sourceforge.czt.z.ast.NameList nl, ProofCommand cmd);
WithCommand createWithDisabledCommand(net.sourceforge.czt.z.ast.NameList nl, ProofCommand cmd);
WithCommand createWithPredicateCommand(net.sourceforge.czt.z.ast.Pred pred, ProofCommand cmd);
WithCommand createWithExpressionCommand(net.sourceforge.czt.z.ast.Expr expr, ProofCommand cmd);

SubstitutionCommand createGlobalEqualitySubstituteCommand();
SubstitutionCommand createGlobalInvokeCommand();
SubstitutionCommand createEqualitySubstituteCommand(net.sourceforge.czt.z.ast.Expr expr);
SubstitutionCommand createInvokeCommand(net.sourceforge.czt.z.ast.Name name);
SubstitutionCommand createInvokePredicateCommand(net.sourceforge.czt.z.ast.Pred pred);

QuantifiersCommand createPrenexCommand();
QuantifiersCommand createInstantiateCommand(InstantiationList inst);

UseCommand createUseCommand(net.sourceforge.czt.z.ast.RefExpr thmRef);
UseCommand createUseCommand(net.sourceforge.czt.z.ast.RefExpr thmRef, InstantiationList inst);

SorryCommand createSorryCommand(boolean keepGoal);

}
