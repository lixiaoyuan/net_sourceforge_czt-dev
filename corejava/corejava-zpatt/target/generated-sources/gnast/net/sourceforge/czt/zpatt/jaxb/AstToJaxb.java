
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.z.jaxb.AstToJaxb
  implements net.sourceforge.czt.zpatt.visitor.ZpattVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.zpatt.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.zpatt.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerNameList(net.sourceforge.czt.zpatt.ast.JokerNameList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerNameList jaxbObject = objectFactory_.createJokerNameList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerNameList", jaxbObject);
      return objectFactory_.createJokerNameList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerDeclList(net.sourceforge.czt.zpatt.ast.JokerDeclList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerDeclList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList jaxbObject = objectFactory_.createJokerDeclList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerDeclList", jaxbObject);
      return objectFactory_.createJokerDeclList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerDeclList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerNameListBinding(net.sourceforge.czt.zpatt.ast.JokerNameListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameListBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerNameListBinding jaxbObject = objectFactory_.createJokerNameListBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerNameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerNameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerNameList>)term.accept(this);
        jaxbObject.setJokerNameList(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerNameListBinding", jaxbObject);
      return objectFactory_.createJokerNameListBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameListBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerExprListBinding(net.sourceforge.czt.zpatt.ast.JokerExprListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprListBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerExprListBinding jaxbObject = objectFactory_.createJokerExprListBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerExprList>)term.accept(this);
        jaxbObject.setJokerExprList(newValue);
      }
// prop.Name   = ExprList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExprList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExprList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setExprList(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerExprListBinding", jaxbObject);
      return objectFactory_.createJokerExprListBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprListBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerExpr(net.sourceforge.czt.zpatt.ast.JokerExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExpr", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr jaxbObject = objectFactory_.createJokerExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerExpr", jaxbObject);
      return objectFactory_.createJokerExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerStroke(net.sourceforge.czt.zpatt.ast.JokerStroke zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerStroke", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerStroke jaxbObject = objectFactory_.createJokerStroke();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerStroke", jaxbObject);
      return objectFactory_.createJokerStroke(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerStroke to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOracleAppl(net.sourceforge.czt.zpatt.ast.OracleAppl zedObject)
  {
    getLogger().entering(getClassName(), "visitOracleAppl", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.OracleAppl jaxbObject = objectFactory_.createOracleAppl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Binding
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zpatt.ast.Binding o : zedObject.getBinding()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding>)r;
				  jaxbObject.getBinding().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zpatt.jaxb.gen.Binding";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = OracleAnswer
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOracleAnswer() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOracleAnswer();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.OracleAnswer> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.OracleAnswer>)term.accept(this);
        jaxbObject.setOracleAnswer(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
      getLogger().exiting(getClassName(), "visitOracleAppl", jaxbObject);
      return objectFactory_.createOracleAppl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OracleAppl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerRenameListBinding(net.sourceforge.czt.zpatt.ast.JokerRenameListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerRenameListBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerRenameListBinding jaxbObject = objectFactory_.createJokerRenameListBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerRenameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerRenameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerRenameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerRenameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerRenameList>)term.accept(this);
        jaxbObject.setJokerRenameList(newValue);
      }
// prop.Name   = RenameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRenameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRenameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList>)term.accept(this);
        jaxbObject.setRenameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerRenameListBinding", jaxbObject);
      return objectFactory_.createJokerRenameListBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerRenameListBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokers(net.sourceforge.czt.zpatt.ast.Jokers zedObject)
  {
    getLogger().entering(getClassName(), "visitJokers", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.Jokers jaxbObject = objectFactory_.createJokers();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (String o : zedObject.getName()) 
        {
																	jaxbObject.getName().add(o);
		        }
      }
// prop.Name   = JokerType
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getJokerType() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setJokerType(net.sourceforge.czt.zpatt.jaxb.gen.JokerType.fromValue(zedObject.getJokerType().toString()));
      }
      getLogger().exiting(getClassName(), "visitJokers", jaxbObject);
      return objectFactory_.createJokers(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Jokers to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerName(net.sourceforge.czt.zpatt.ast.JokerName zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerName", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerName jaxbObject = objectFactory_.createJokerName();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerName", jaxbObject);
      return objectFactory_.createJokerName(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerName to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSequentList(net.sourceforge.czt.zpatt.ast.SequentList zedObject)
  {
    getLogger().entering(getClassName(), "visitSequentList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.SequentList jaxbObject = objectFactory_.createSequentList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Sequent
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zpatt.ast.Sequent o : zedObject.getSequent()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent>)r;
				  jaxbObject.getSequent().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zpatt.jaxb.gen.Sequent";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSequentList", jaxbObject);
      return objectFactory_.createSequentList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SequentList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOracle(net.sourceforge.czt.zpatt.ast.Oracle zedObject)
  {
    getLogger().entering(getClassName(), "visitOracle", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.Oracle jaxbObject = objectFactory_.createOracle();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Sequent
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSequent() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSequent();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent>)term.accept(this);
        jaxbObject.setSequent(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
      getLogger().exiting(getClassName(), "visitOracle", jaxbObject);
      return objectFactory_.createOracle(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Oracle to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitHeadDeclList(net.sourceforge.czt.zpatt.ast.HeadDeclList zedObject)
  {
    getLogger().entering(getClassName(), "visitHeadDeclList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.HeadDeclList jaxbObject = objectFactory_.createHeadDeclList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ZDeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getZDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getZDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZDeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZDeclList>)term.accept(this);
        jaxbObject.setZDeclList(newValue);
      }
// prop.Name   = JokerDeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList>)term.accept(this);
        jaxbObject.setJokerDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitHeadDeclList", jaxbObject);
      return objectFactory_.createHeadDeclList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HeadDeclList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerStrokeBinding(net.sourceforge.czt.zpatt.ast.JokerStrokeBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerStrokeBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerStrokeBinding jaxbObject = objectFactory_.createJokerStrokeBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerStroke
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerStroke() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerStroke();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerStroke> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerStroke>)term.accept(this);
        jaxbObject.setJokerStroke(newValue);
      }
// prop.Name   = Stroke
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getStroke() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getStroke();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Stroke>)term.accept(this);
        jaxbObject.setStroke(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerStrokeBinding", jaxbObject);
      return objectFactory_.createJokerStrokeBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerStrokeBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerPredBinding(net.sourceforge.czt.zpatt.ast.JokerPredBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerPredBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerPredBinding jaxbObject = objectFactory_.createJokerPredBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerPred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerPred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerPred>)term.accept(this);
        jaxbObject.setJokerPred(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerPredBinding", jaxbObject);
      return objectFactory_.createJokerPredBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerPredBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerExprBinding(net.sourceforge.czt.zpatt.ast.JokerExprBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerExprBinding jaxbObject = objectFactory_.createJokerExprBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerExpr>)term.accept(this);
        jaxbObject.setJokerExpr(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerExprBinding", jaxbObject);
      return objectFactory_.createJokerExprBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerNameBinding(net.sourceforge.czt.zpatt.ast.JokerNameBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerNameBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerNameBinding jaxbObject = objectFactory_.createJokerNameBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerName
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerName> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerName>)term.accept(this);
        jaxbObject.setJokerName(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerNameBinding", jaxbObject);
      return objectFactory_.createJokerNameBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerNameBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitCheckPassed(net.sourceforge.czt.zpatt.ast.CheckPassed zedObject)
  {
    getLogger().entering(getClassName(), "visitCheckPassed", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.CheckPassed jaxbObject = objectFactory_.createCheckPassed();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Binding
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zpatt.ast.Binding o : zedObject.getBinding()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding>)r;
				  jaxbObject.getBinding().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zpatt.jaxb.gen.Binding";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitCheckPassed", jaxbObject);
      return objectFactory_.createCheckPassed(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a CheckPassed to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerRenameList(net.sourceforge.czt.zpatt.ast.JokerRenameList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerRenameList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerRenameList jaxbObject = objectFactory_.createJokerRenameList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerRenameList", jaxbObject);
      return objectFactory_.createJokerRenameList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerRenameList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerExprList(net.sourceforge.czt.zpatt.ast.JokerExprList zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerExprList", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerExprList jaxbObject = objectFactory_.createJokerExprList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerExprList", jaxbObject);
      return objectFactory_.createJokerExprList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerExprList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRuleAppl(net.sourceforge.czt.zpatt.ast.RuleAppl zedObject)
  {
    getLogger().entering(getClassName(), "visitRuleAppl", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.RuleAppl jaxbObject = objectFactory_.createRuleAppl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Binding
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.zpatt.ast.Binding o : zedObject.getBinding()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Binding>)r;
				  jaxbObject.getBinding().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.zpatt.jaxb.gen.Binding";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = SequentList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSequentList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSequentList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentList>)term.accept(this);
        jaxbObject.setSequentList(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
      getLogger().exiting(getClassName(), "visitRuleAppl", jaxbObject);
      return objectFactory_.createRuleAppl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RuleAppl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSequent(net.sourceforge.czt.zpatt.ast.Sequent zedObject)
  {
    getLogger().entering(getClassName(), "visitSequent", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.Sequent jaxbObject = objectFactory_.createSequent();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SequentContext
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSequentContext() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSequentContext();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentContext> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentContext>)term.accept(this);
        jaxbObject.setSequentContext(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitSequent", jaxbObject);
      return objectFactory_.createSequent(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Sequent to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSequentContext(net.sourceforge.czt.zpatt.ast.SequentContext zedObject)
  {
    getLogger().entering(getClassName(), "visitSequentContext", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.SequentContext jaxbObject = objectFactory_.createSequentContext();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
      getLogger().exiting(getClassName(), "visitSequentContext", jaxbObject);
      return objectFactory_.createSequentContext(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SequentContext to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRule(net.sourceforge.czt.zpatt.ast.Rule zedObject)
  {
    getLogger().entering(getClassName(), "visitRule", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.Rule jaxbObject = objectFactory_.createRule();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Sequent
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSequent() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSequent();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.Sequent>)term.accept(this);
        jaxbObject.setSequent(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Premisses
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPremisses() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPremisses();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.SequentList>)term.accept(this);
        jaxbObject.setPremisses(newValue);
      }
      getLogger().exiting(getClassName(), "visitRule", jaxbObject);
      return objectFactory_.createRule(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Rule to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerDeclListBinding(net.sourceforge.czt.zpatt.ast.JokerDeclListBinding zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerDeclListBinding", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclListBinding jaxbObject = objectFactory_.createJokerDeclListBinding();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = JokerDeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getJokerDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getJokerDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.zpatt.jaxb.gen.JokerDeclList>)term.accept(this);
        jaxbObject.setJokerDeclList(newValue);
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitJokerDeclListBinding", jaxbObject);
      return objectFactory_.createJokerDeclListBinding(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerDeclListBinding to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitJokerPred(net.sourceforge.czt.zpatt.ast.JokerPred zedObject)
  {
    getLogger().entering(getClassName(), "visitJokerPred", zedObject);
    try {
      net.sourceforge.czt.zpatt.jaxb.gen.JokerPred jaxbObject = objectFactory_.createJokerPred();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        jaxbObject.setName(zedObject.getName());
      }
// prop.Name   = Id
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getId() != null) {
        jaxbObject.setId(zedObject.getId());
      }
      getLogger().exiting(getClassName(), "visitJokerPred", jaxbObject);
      return objectFactory_.createJokerPred(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a JokerPred to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
