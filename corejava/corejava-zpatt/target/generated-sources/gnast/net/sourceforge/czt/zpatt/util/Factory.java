
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE CoreFactory.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.zpatt.util;

/**
 * <p>An object factory for the AST.
 *
 * <p>This object factory allows the programmer
 * to programatically construct new instances of concrete Z terms.
 * </p>
 *
 * @author GnAST version 1.6-cdh
 */
public class Factory
  extends net.sourceforge.czt.z.util.Factory
{
  private net.sourceforge.czt.zpatt.ast.ZpattFactory factory_ =
    new net.sourceforge.czt.zpatt.impl.ZpattFactoryImpl();

  /**
   * Creates a new convenience factory that uses the standard factory
   * implementation for creating AST terms.
   */
  public Factory()
  {
    super();
  }

  /**
   * Creates a new convenience factory that uses the given base factory
   * for creating AST terms.
   */
  public Factory(net.sourceforge.czt.zpatt.ast.ZpattFactory factory)
  {
    super(factory);
    factory_ = factory;
  }

  /**
   * Gives access to the inner extension-factory within this factory bridge.
   * This is useful so that methods from BasicFactory can be accessed through
   * this topmost level factory object
   */
  public net.sourceforge.czt.zpatt.ast.ZpattFactory getZpattFactory()
  {
    return factory_;
  }

  /**
   * Creates an instance of {@link JokerNameList}.
   *
   * @return the new instance of JokerNameList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameList createJokerNameList()
  {
    return factory_.createJokerNameList();
  }

  /**
   * Creates an instance of {@link JokerNameList} with the given children.
   *
   * @return the new instance of JokerNameList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameList createJokerNameList( String  name, String  id)
  {
    return factory_.createJokerNameList(name, id);
  }

  /**
   * Creates an instance of {@link JokerDeclList}.
   *
   * @return the new instance of JokerDeclList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerDeclList createJokerDeclList()
  {
    return factory_.createJokerDeclList();
  }

  /**
   * Creates an instance of {@link JokerDeclList} with the given children.
   *
   * @return the new instance of JokerDeclList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerDeclList createJokerDeclList( String  name, String  id)
  {
    return factory_.createJokerDeclList(name, id);
  }

  /**
   * Creates an instance of {@link JokerNameListBinding}.
   *
   * @return the new instance of JokerNameListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameListBinding createJokerNameListBinding()
  {
    return factory_.createJokerNameListBinding();
  }

  /**
   * Creates an instance of {@link JokerNameListBinding} with the given children.
   *
   * @return the new instance of JokerNameListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameListBinding createJokerNameListBinding( net.sourceforge.czt.zpatt.ast.JokerNameList  jokerNameList, net.sourceforge.czt.z.ast.NameList  nameList)
  {
    return factory_.createJokerNameListBinding(jokerNameList, nameList);
  }

  /**
   * Creates an instance of {@link JokerExprListBinding}.
   *
   * @return the new instance of JokerExprListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprListBinding createJokerExprListBinding()
  {
    return factory_.createJokerExprListBinding();
  }

  /**
   * Creates an instance of {@link JokerExprListBinding} with the given children.
   *
   * @return the new instance of JokerExprListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprListBinding createJokerExprListBinding( net.sourceforge.czt.zpatt.ast.JokerExprList  jokerExprList, net.sourceforge.czt.z.ast.ExprList  exprList)
  {
    return factory_.createJokerExprListBinding(jokerExprList, exprList);
  }

  /**
   * Creates an instance of {@link JokerExpr}.
   *
   * @return the new instance of JokerExpr.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExpr createJokerExpr()
  {
    return factory_.createJokerExpr();
  }

  /**
   * Creates an instance of {@link JokerExpr} with the given children.
   *
   * @return the new instance of JokerExpr.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExpr createJokerExpr( String  name, String  id)
  {
    return factory_.createJokerExpr(name, id);
  }

  /**
   * Creates an instance of {@link JokerStroke}.
   *
   * @return the new instance of JokerStroke.
   */
  public net.sourceforge.czt.zpatt.ast.JokerStroke createJokerStroke()
  {
    return factory_.createJokerStroke();
  }

  /**
   * Creates an instance of {@link JokerStroke} with the given children.
   *
   * @return the new instance of JokerStroke.
   */
  public net.sourceforge.czt.zpatt.ast.JokerStroke createJokerStroke( String  name, String  id)
  {
    return factory_.createJokerStroke(name, id);
  }

  /**
   * Creates an instance of {@link OracleAppl}.
   *
   * @return the new instance of OracleAppl.
   */
  public net.sourceforge.czt.zpatt.ast.OracleAppl createOracleAppl()
  {
    return factory_.createOracleAppl();
  }

  /**
   * Creates an instance of {@link OracleAppl} with the given children.
   *
   * @return the new instance of OracleAppl.
   */
  public net.sourceforge.czt.zpatt.ast.OracleAppl createOracleAppl(java.util.List<? extends net.sourceforge.czt.zpatt.ast.Binding>
 binding, net.sourceforge.czt.zpatt.ast.OracleAnswer  oracleAnswer, String  name)
  {
    return factory_.createOracleAppl(binding, oracleAnswer, name);
  }

  /**
   * Creates an instance of {@link JokerRenameListBinding}.
   *
   * @return the new instance of JokerRenameListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerRenameListBinding createJokerRenameListBinding()
  {
    return factory_.createJokerRenameListBinding();
  }

  /**
   * Creates an instance of {@link JokerRenameListBinding} with the given children.
   *
   * @return the new instance of JokerRenameListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerRenameListBinding createJokerRenameListBinding( net.sourceforge.czt.zpatt.ast.JokerRenameList  jokerRenameList, net.sourceforge.czt.z.ast.RenameList  renameList)
  {
    return factory_.createJokerRenameListBinding(jokerRenameList, renameList);
  }

  /**
   * Creates an instance of {@link Jokers}.
   *
   * @return the new instance of Jokers.
   */
  public net.sourceforge.czt.zpatt.ast.Jokers createJokers()
  {
    return factory_.createJokers();
  }

  /**
   * Creates an instance of {@link Jokers} with the given children.
   *
   * @return the new instance of Jokers.
   */
  public net.sourceforge.czt.zpatt.ast.Jokers createJokers(java.util.List<? extends String>
 name,net.sourceforge.czt.zpatt.ast.JokerType
 jokerType)
  {
    return factory_.createJokers(name, jokerType);
  }

  /**
   * Creates an instance of {@link JokerName}.
   *
   * @return the new instance of JokerName.
   */
  public net.sourceforge.czt.zpatt.ast.JokerName createJokerName()
  {
    return factory_.createJokerName();
  }

  /**
   * Creates an instance of {@link JokerName} with the given children.
   *
   * @return the new instance of JokerName.
   */
  public net.sourceforge.czt.zpatt.ast.JokerName createJokerName( String  name, String  id)
  {
    return factory_.createJokerName(name, id);
  }

  /**
   * Creates an instance of {@link SequentList}.
   *
   * @return the new instance of SequentList.
   */
  public net.sourceforge.czt.zpatt.ast.SequentList createSequentList()
  {
    return factory_.createSequentList();
  }

  /**
   * Creates an instance of {@link SequentList} with the given children.
   *
   * @return the new instance of SequentList.
   */
  public net.sourceforge.czt.zpatt.ast.SequentList createSequentList(java.util.List<? extends net.sourceforge.czt.zpatt.ast.Sequent>
 sequent)
  {
    return factory_.createSequentList(sequent);
  }

  /**
   * Creates an instance of {@link Oracle}.
   *
   * @return the new instance of Oracle.
   */
  public net.sourceforge.czt.zpatt.ast.Oracle createOracle()
  {
    return factory_.createOracle();
  }

  /**
   * Creates an instance of {@link Oracle} with the given children.
   *
   * @return the new instance of Oracle.
   */
  public net.sourceforge.czt.zpatt.ast.Oracle createOracle( net.sourceforge.czt.zpatt.ast.Sequent  sequent, String  name)
  {
    return factory_.createOracle(sequent, name);
  }

  /**
   * Creates an instance of {@link HeadDeclList}.
   *
   * @return the new instance of HeadDeclList.
   */
  public net.sourceforge.czt.zpatt.ast.HeadDeclList createHeadDeclList()
  {
    return factory_.createHeadDeclList();
  }

  /**
   * Creates an instance of {@link HeadDeclList} with the given children.
   *
   * @return the new instance of HeadDeclList.
   */
  public net.sourceforge.czt.zpatt.ast.HeadDeclList createHeadDeclList( net.sourceforge.czt.z.ast.ZDeclList  zDeclList, net.sourceforge.czt.zpatt.ast.JokerDeclList  jokerDeclList)
  {
    return factory_.createHeadDeclList(zDeclList, jokerDeclList);
  }

  /**
   * Creates an instance of {@link JokerStrokeBinding}.
   *
   * @return the new instance of JokerStrokeBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerStrokeBinding createJokerStrokeBinding()
  {
    return factory_.createJokerStrokeBinding();
  }

  /**
   * Creates an instance of {@link JokerStrokeBinding} with the given children.
   *
   * @return the new instance of JokerStrokeBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerStrokeBinding createJokerStrokeBinding( net.sourceforge.czt.zpatt.ast.JokerStroke  jokerStroke, net.sourceforge.czt.z.ast.Stroke  stroke)
  {
    return factory_.createJokerStrokeBinding(jokerStroke, stroke);
  }

  /**
   * Creates an instance of {@link JokerPredBinding}.
   *
   * @return the new instance of JokerPredBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerPredBinding createJokerPredBinding()
  {
    return factory_.createJokerPredBinding();
  }

  /**
   * Creates an instance of {@link JokerPredBinding} with the given children.
   *
   * @return the new instance of JokerPredBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerPredBinding createJokerPredBinding( net.sourceforge.czt.zpatt.ast.JokerPred  jokerPred, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createJokerPredBinding(jokerPred, pred);
  }

  /**
   * Creates an instance of {@link JokerExprBinding}.
   *
   * @return the new instance of JokerExprBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprBinding createJokerExprBinding()
  {
    return factory_.createJokerExprBinding();
  }

  /**
   * Creates an instance of {@link JokerExprBinding} with the given children.
   *
   * @return the new instance of JokerExprBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprBinding createJokerExprBinding( net.sourceforge.czt.zpatt.ast.JokerExpr  jokerExpr, net.sourceforge.czt.z.ast.Expr  expr)
  {
    return factory_.createJokerExprBinding(jokerExpr, expr);
  }

  /**
   * Creates an instance of {@link JokerNameBinding}.
   *
   * @return the new instance of JokerNameBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameBinding createJokerNameBinding()
  {
    return factory_.createJokerNameBinding();
  }

  /**
   * Creates an instance of {@link JokerNameBinding} with the given children.
   *
   * @return the new instance of JokerNameBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerNameBinding createJokerNameBinding( net.sourceforge.czt.zpatt.ast.JokerName  jokerName, net.sourceforge.czt.z.ast.Name  name)
  {
    return factory_.createJokerNameBinding(jokerName, name);
  }

  /**
   * Creates an instance of {@link CheckPassed}.
   *
   * @return the new instance of CheckPassed.
   */
  public net.sourceforge.czt.zpatt.ast.CheckPassed createCheckPassed()
  {
    return factory_.createCheckPassed();
  }

  /**
   * Creates an instance of {@link CheckPassed} with the given children.
   *
   * @return the new instance of CheckPassed.
   */
  public net.sourceforge.czt.zpatt.ast.CheckPassed createCheckPassed(java.util.List<? extends net.sourceforge.czt.zpatt.ast.Binding>
 binding)
  {
    return factory_.createCheckPassed(binding);
  }

  /**
   * Creates an instance of {@link JokerRenameList}.
   *
   * @return the new instance of JokerRenameList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerRenameList createJokerRenameList()
  {
    return factory_.createJokerRenameList();
  }

  /**
   * Creates an instance of {@link JokerRenameList} with the given children.
   *
   * @return the new instance of JokerRenameList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerRenameList createJokerRenameList( String  name, String  id)
  {
    return factory_.createJokerRenameList(name, id);
  }

  /**
   * Creates an instance of {@link JokerExprList}.
   *
   * @return the new instance of JokerExprList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprList createJokerExprList()
  {
    return factory_.createJokerExprList();
  }

  /**
   * Creates an instance of {@link JokerExprList} with the given children.
   *
   * @return the new instance of JokerExprList.
   */
  public net.sourceforge.czt.zpatt.ast.JokerExprList createJokerExprList( String  name, String  id)
  {
    return factory_.createJokerExprList(name, id);
  }

  /**
   * Creates an instance of {@link RuleAppl}.
   *
   * @return the new instance of RuleAppl.
   */
  public net.sourceforge.czt.zpatt.ast.RuleAppl createRuleAppl()
  {
    return factory_.createRuleAppl();
  }

  /**
   * Creates an instance of {@link RuleAppl} with the given children.
   *
   * @return the new instance of RuleAppl.
   */
  public net.sourceforge.czt.zpatt.ast.RuleAppl createRuleAppl(java.util.List<? extends net.sourceforge.czt.zpatt.ast.Binding>
 binding, net.sourceforge.czt.zpatt.ast.SequentList  sequentList, String  name)
  {
    return factory_.createRuleAppl(binding, sequentList, name);
  }

  /**
   * Creates an instance of {@link Sequent}.
   *
   * @return the new instance of Sequent.
   */
  public net.sourceforge.czt.zpatt.ast.Sequent createSequent()
  {
    return factory_.createSequent();
  }

  /**
   * Creates an instance of {@link Sequent} with the given children.
   *
   * @return the new instance of Sequent.
   */
  public net.sourceforge.czt.zpatt.ast.Sequent createSequent( net.sourceforge.czt.zpatt.ast.SequentContext  sequentContext, net.sourceforge.czt.z.ast.Pred  pred)
  {
    return factory_.createSequent(sequentContext, pred);
  }

  /**
   * Creates an instance of {@link SequentContext}.
   *
   * @return the new instance of SequentContext.
   */
  public net.sourceforge.czt.zpatt.ast.SequentContext createSequentContext()
  {
    return factory_.createSequentContext();
  }

  /**
   * Creates an instance of {@link Rule}.
   *
   * @return the new instance of Rule.
   */
  public net.sourceforge.czt.zpatt.ast.Rule createRule()
  {
    return factory_.createRule();
  }

  /**
   * Creates an instance of {@link Rule} with the given children.
   *
   * @return the new instance of Rule.
   */
  public net.sourceforge.czt.zpatt.ast.Rule createRule( net.sourceforge.czt.zpatt.ast.Sequent  sequent, String  name, net.sourceforge.czt.zpatt.ast.SequentList  premisses)
  {
    return factory_.createRule(sequent, name, premisses);
  }

  /**
   * Creates an instance of {@link JokerDeclListBinding}.
   *
   * @return the new instance of JokerDeclListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerDeclListBinding createJokerDeclListBinding()
  {
    return factory_.createJokerDeclListBinding();
  }

  /**
   * Creates an instance of {@link JokerDeclListBinding} with the given children.
   *
   * @return the new instance of JokerDeclListBinding.
   */
  public net.sourceforge.czt.zpatt.ast.JokerDeclListBinding createJokerDeclListBinding( net.sourceforge.czt.zpatt.ast.JokerDeclList  jokerDeclList, net.sourceforge.czt.z.ast.DeclList  declList)
  {
    return factory_.createJokerDeclListBinding(jokerDeclList, declList);
  }

  /**
   * Creates an instance of {@link JokerPred}.
   *
   * @return the new instance of JokerPred.
   */
  public net.sourceforge.czt.zpatt.ast.JokerPred createJokerPred()
  {
    return factory_.createJokerPred();
  }

  /**
   * Creates an instance of {@link JokerPred} with the given children.
   *
   * @return the new instance of JokerPred.
   */
  public net.sourceforge.czt.zpatt.ast.JokerPred createJokerPred( String  name, String  id)
  {
    return factory_.createJokerPred(name, id);
  }

  /**
   * Creates an empty list of the given element type.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list()
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    return result;
  }
  

  /**
   * Creates a list with the given elements.
   * This is a convenience method.
   */
  public <E> java.util.List<E> list(@SuppressWarnings("unchecked") E... elems)
  {
    java.util.List<E> result = new java.util.ArrayList<E>();
    result.addAll(java.util.Arrays.asList(elems));
    return result;
  }

  /**
   * Creates an application (Expr followed by Expr in the syntax),
   * that is an ApplExpr with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createApplication(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.FALSE);
  }

  /**
   * Creates a ZName with the given word and strokes and
   * id set to <code>null</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String word, net.sourceforge.czt.z.ast.StrokeList strokes)
  {
    return createZName(word, strokes, null);
  }

  /**
   * Creates a ZName from a decorword, that is a string that
   * may contain strokes at the end.
   * The strokes are extracted from the end and the resulting
   * name is returned.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(String decorword)
  {
    net.sourceforge.czt.z.ast.ZStrokeList strokes = createZStrokeList();
    final String word = getWordAndStrokes(decorword, strokes);
    return createZName(word, strokes, null);
  }

  public String getWordAndStrokes(String decorword,
                                  net.sourceforge.czt.z.ast.ZStrokeList strokes)
  {
    net.sourceforge.czt.z.util.ZChar[] zchars =
      net.sourceforge.czt.z.util.ZChar.toZChars(decorword);
    int i;
    for (i = zchars.length - 1; i >= 0; i--) {
      net.sourceforge.czt.z.util.ZChar zchar = zchars[i];
      if (net.sourceforge.czt.z.util.ZChar.INSTROKE.equals(zchar)) {
        strokes.add(0, createInStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.OUTSTROKE.equals(zchar)) {
        strokes.add(0, createOutStroke());
      }
      else if (net.sourceforge.czt.z.util.ZChar.PRIME.equals(zchar)) {
        strokes.add(0, createNextStroke());
      }
      else if (i >= 2 &&
          net.sourceforge.czt.z.util.ZChar.NW.equals(zchar) &&
          net.sourceforge.czt.z.util.ZChar.isDigit(zchars[i - 1]) &&
          net.sourceforge.czt.z.util.ZChar.SE.equals(zchars[i - 2])) {
        net.sourceforge.czt.base.ast.Digit digit =
          net.sourceforge.czt.base.util.CztDatatypeConverter.parseDigit(zchars[i - 1].toString());
        strokes.add(0, createNumStroke(digit));
        i = i - 2;
      }
      else {
        break;
      }
    }
    StringBuffer result = new StringBuffer();
    for (int j = 0; j <= i; j++) {
      result.append(zchars[j].toString());
    }
    return result.toString();
  }

  /**
   * Creates a member predicate that represents equality
   * between the two given expressions.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createEquality(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    zExprList.add(right);
    return createMemPred(left, createSetExpr(zExprList), Boolean.TRUE);
  }

  /**
   * Creates a function operator application, that is an ApplExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ApplExpr createFunOpAppl(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createApplExpr(createRefExpr(refName), expr, Boolean.TRUE);
  }

  /**
   * Creates a generic instantiation expression, that is a RefExpr
   * with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenInst(net.sourceforge.czt.z.ast.Name refName,
                               java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.FALSE);
  }

  /**
   * Creates a generic operator application, that is a RefExpr
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createGenOpApp(net.sourceforge.czt.z.ast.Name refName,
                                java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprs)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList(exprs);
    return createRefExpr(refName, zExprList, Boolean.TRUE);
  }

  /**
   * Creates a horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createHorizontalDef(declName, null, expr);
  }

  /**
   * Creates a generic horizontal definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * expression and with Box set to OmitBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param formals a list of Name, the formal parameters.
   * @param expr an expression.
   */
  public net.sourceforge.czt.z.ast.AxPara createHorizontalDef(net.sourceforge.czt.z.ast.Name declName,
                                    java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                                    net.sourceforge.czt.z.ast.Expr expr)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, expr);
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.OmitBox);
  }

  /**
   * Creates a member predicate for a given referencing name and
   * an expression, that is a MemPred with mixfix set to <code>false</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Name refName, net.sourceforge.czt.z.ast.Expr expr)
  {
    return createMemPred(createRefExpr(refName), expr, Boolean.FALSE);
  }
  
  public net.sourceforge.czt.z.ast.Pred createSetMembership(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createMemPred(left, right, Boolean.FALSE);
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(int value)
  {
    return factory_.createNumExpr(createZNumeral(value));
  }

  /**
   * Creates a number expression with the given value.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.NumExpr createNumExpr(java.math.BigInteger bigInt)
  {
    return createNumExpr(factory_.createZNumeral(bigInt));
  }

  public net.sourceforge.czt.z.ast.ZNumeral createZNumeral(int value)
  {
    return factory_.createZNumeral(java.math.BigInteger.valueOf(value));
  }

  /**
   * Creates a binary product expression.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ProdExpr createProdExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createProdExpr(createZExprList(list(left, right)));
  }

  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName,
                               net.sourceforge.czt.z.ast.ZExprList zExprList,
                               Boolean mixfix)
  {
    return factory_.createRefExpr(refName, zExprList, mixfix, false);
  }

  /**
   * Creates a reference (expression) to the given name.
   * The mixfix child of the returned reference expression
   * is <code>false</code> and the list of expressions is empty.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.RefExpr createRefExpr(net.sourceforge.czt.z.ast.Name refName)
  {
    return createRefExpr(refName, createZExprList(), Boolean.FALSE);
  }

  /**
   * Creates a referencing name that refers to the given
   * declaring name, i.e., just copies the given ZName.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.ZName createZName(net.sourceforge.czt.z.ast.ZName declName)
  {
    return createZName(declName.getWord(),
                       declName.getStrokeList(),
                       declName.getId());
  }

  /**
   * Creates a relation operator application, that is a MemPred
   * with mixfix set to <code>true</code>.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.MemPred createRelOpAppl(net.sourceforge.czt.z.ast.Expr expr, net.sourceforge.czt.z.ast.Name refName)
  {
    return createMemPred(expr, createRefExpr(refName), Boolean.TRUE);
  }

  /**
   * Creates a schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName, net.sourceforge.czt.z.ast.SchText schemaText)
  {
    return createSchema(declName, null, schemaText);
  }

  /**
   * Creates a generic schema definition, that is an axiomatic definition
   * containing a constant declaration of the name to the given
   * schema text and with Box set to SchBox.
   * This is a convenience method.
   *
   * @param formals a list of Name, the formal parameters.
   * @param declName name of the schema.
   * @param schemaText the schema text.
   */
  public net.sourceforge.czt.z.ast.AxPara createSchema(net.sourceforge.czt.z.ast.Name declName,
                             java.util.List<? extends net.sourceforge.czt.z.ast.Name> formals,
                             net.sourceforge.czt.z.ast.SchText schemaText)
  {
    net.sourceforge.czt.z.ast.ZNameList zdnl = createZNameList();
    if (formals != null) {
      zdnl.addAll(formals);
    }
    net.sourceforge.czt.z.ast.Decl decl = createConstDecl(declName, createSchExpr(schemaText));
    net.sourceforge.czt.z.ast.SchText schText = createZSchText(createZDeclList(list(decl)), null);
    return createAxPara(zdnl, schText, net.sourceforge.czt.z.ast.Box.SchBox);
  }

  /**
   * <p>Creates a sequence, that is a set of pairs of position
   * (starting from 1) and corresponding component expression.
   * This applies rule 12.2.12 of the Z standard to a list of
   * expressions.</p>
   *
   * <p>More formally, a list
   * <code>e_1, ..., e_n</code> of expressions is transformed into
   * the set <code>\{ (1, e_1), ... , (n, e_n) \}</code>.
   * </p>
   *
   * <p>This is a convenience method.</p>
   *
   * @param exprList a list of expressions (Expr).
   */
  public net.sourceforge.czt.z.ast.SetExpr createSequence(java.util.List<? extends net.sourceforge.czt.z.ast.Expr> exprList)
  {
    net.sourceforge.czt.z.ast.ZExprList zExprList = createZExprList();
    int count = 1;
    for (java.util.Iterator<? extends net.sourceforge.czt.z.ast.Expr> i = exprList.iterator();
         i.hasNext(); count++) {
      zExprList.add(createTupleExpr(createNumExpr(count), i.next()));
    }
    return createSetExpr(zExprList);
  }

  /**
   * Creates a pair, that is a tuple expression with two elements.
   * This is a convenience method.
   */
  public net.sourceforge.czt.z.ast.TupleExpr createTupleExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    return createTupleExpr(createZExprList(list(left, right)));
  }

  public java.math.BigInteger toBig(Integer i)
  {
    if (i != null) {
      return java.math.BigInteger.valueOf(i.intValue());
    }
    return null;
  }

  public net.sourceforge.czt.z.ast.NumStroke createNumStroke(int value)
  {
    net.sourceforge.czt.base.ast.Digit digit =
      net.sourceforge.czt.base.ast.Digit.fromValue(value);
    return createNumStroke(digit);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source, Integer line, Integer col)
  {
    return createLocAnn(source, line, col, null, null);
  }

  public net.sourceforge.czt.z.ast.LocAnn createLocAnn(String source,
                             Integer line, Integer col,
                             Integer start, Integer length)
  {
    return createLocAnn(source,
                        toBig(line), toBig(col),
                        toBig(start), toBig(length));
  }

  public net.sourceforge.czt.z.ast.AndExpr createAndExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.AndExpr result = createAndExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.AndPred createAndPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right, net.sourceforge.czt.z.ast.And and)
  {
    net.sourceforge.czt.z.ast.AndPred result = createAndPred();
    result.getPred().add(left);
    result.getPred().add(right);
    result.setAnd(and);
    return result;
  }

  public net.sourceforge.czt.z.ast.ApplExpr createApplExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean  mixfix)
  {
    net.sourceforge.czt.z.ast.ApplExpr result = createApplExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.CompExpr createCompExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CompExpr result = createCompExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.CondExpr createCondExpr(net.sourceforge.czt.z.ast.Pred pred, net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.CondExpr result = createCondExpr();
    result.setPred(pred);
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffExpr createIffExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.IffExpr result = createIffExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.IffPred createIffPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.IffPred result = createIffPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesExpr createImpliesExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ImpliesExpr result = createImpliesExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ImpliesPred createImpliesPred(net.sourceforge.czt.z.ast.Pred left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.ImpliesPred result = createImpliesPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.MemPred createMemPred(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right, Boolean mixfix)
  {
    net.sourceforge.czt.z.ast.MemPred result = createMemPred();
    result.getExpr().add(left);
    result.getExpr().add(right);
    result.setMixfix(mixfix);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrExpr createOrExpr(net.sourceforge.czt.z.ast.Expr  left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.OrExpr result = createOrExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.OrPred createOrPred(net.sourceforge.czt.z.ast.Pred  left, net.sourceforge.czt.z.ast.Pred right)
  {
    net.sourceforge.czt.z.ast.OrPred result = createOrPred();
    result.getPred().add(left);
    result.getPred().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.PipeExpr createPipeExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.PipeExpr result = createPipeExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.ProjExpr createProjExpr(net.sourceforge.czt.z.ast.Expr left, net.sourceforge.czt.z.ast.Expr right)
  {
    net.sourceforge.czt.z.ast.ProjExpr result = createProjExpr();
    result.getExpr().add(left);
    result.getExpr().add(right);
    return result;
  }

  public net.sourceforge.czt.z.ast.NewOldPair createNewOldPair(net.sourceforge.czt.z.ast.Name newName, net.sourceforge.czt.z.ast.Name oldName)
  {
    net.sourceforge.czt.z.ast.NewOldPair result = createNewOldPair();
    result.getName().add(newName);
    result.getName().add(oldName);
    return result;
  }}
