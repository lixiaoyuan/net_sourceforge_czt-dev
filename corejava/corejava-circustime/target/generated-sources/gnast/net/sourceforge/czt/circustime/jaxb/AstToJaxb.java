
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circustime.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.circuspatt.jaxb.AstToJaxb
  implements net.sourceforge.czt.circustime.visitor.CircusTimeVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.circustime.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.circustime.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.circustime.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeEndByProcess(net.sourceforge.czt.circustime.ast.TimeEndByProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeEndByProcess", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeEndByProcess jaxbObject = objectFactory_.createTimeEndByProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeEndByProcess", jaxbObject);
      return objectFactory_.createTimeEndByProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeEndByProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeoutProcess(net.sourceforge.czt.circustime.ast.TimeoutProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeoutProcess", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeoutProcess jaxbObject = objectFactory_.createTimeoutProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeoutProcess", jaxbObject);
      return objectFactory_.createTimeoutProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeoutProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitWaitExprAction(net.sourceforge.czt.circustime.ast.WaitExprAction zedObject)
  {
    getLogger().entering(getClassName(), "visitWaitExprAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.WaitExprAction jaxbObject = objectFactory_.createWaitExprAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitWaitExprAction", jaxbObject);
      return objectFactory_.createWaitExprAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a WaitExprAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeEndByAction(net.sourceforge.czt.circustime.ast.TimeEndByAction zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeEndByAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeEndByAction jaxbObject = objectFactory_.createTimeEndByAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeEndByAction", jaxbObject);
      return objectFactory_.createTimeEndByAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeEndByAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeStartByProcess(net.sourceforge.czt.circustime.ast.TimeStartByProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeStartByProcess", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeStartByProcess jaxbObject = objectFactory_.createTimeStartByProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusProcess() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusProcess();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)term.accept(this);
        jaxbObject.setCircusProcess(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeStartByProcess", jaxbObject);
      return objectFactory_.createTimeStartByProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeStartByProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeoutAction(net.sourceforge.czt.circustime.ast.TimeoutAction zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeoutAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeoutAction jaxbObject = objectFactory_.createTimeoutAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeoutAction", jaxbObject);
      return objectFactory_.createTimeoutAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeoutAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimeStartByAction(net.sourceforge.czt.circustime.ast.TimeStartByAction zedObject)
  {
    getLogger().entering(getClassName(), "visitTimeStartByAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimeStartByAction jaxbObject = objectFactory_.createTimeStartByAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimeStartByAction", jaxbObject);
      return objectFactory_.createTimeStartByAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimeStartByAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPrefixingTimeAction(net.sourceforge.czt.circustime.ast.PrefixingTimeAction zedObject)
  {
    getLogger().entering(getClassName(), "visitPrefixingTimeAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.PrefixingTimeAction jaxbObject = objectFactory_.createPrefixingTimeAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCircusAction() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCircusAction();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)term.accept(this);
        jaxbObject.setCircusAction(newValue);
      }
// prop.Name   = Communication
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getCommunication() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getCommunication();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.Communication>)term.accept(this);
        jaxbObject.setCommunication(newValue);
      }
// prop.Name   = ChannelElapsedTime
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getChannelElapsedTime() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getChannelElapsedTime();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setChannelElapsedTime(newValue);
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitPrefixingTimeAction", jaxbObject);
      return objectFactory_.createPrefixingTimeAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrefixingTimeAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitWaitAction(net.sourceforge.czt.circustime.ast.WaitAction zedObject)
  {
    getLogger().entering(getClassName(), "visitWaitAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.WaitAction jaxbObject = objectFactory_.createWaitAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitWaitAction", jaxbObject);
      return objectFactory_.createWaitAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a WaitAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimedinterruptAction(net.sourceforge.czt.circustime.ast.TimedinterruptAction zedObject)
  {
    getLogger().entering(getClassName(), "visitTimedinterruptAction", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimedinterruptAction jaxbObject = objectFactory_.createTimedinterruptAction();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusAction
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusAction o : zedObject.getCircusAction()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusAction>)r;
				  jaxbObject.getCircusAction().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusAction";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimedinterruptAction", jaxbObject);
      return objectFactory_.createTimedinterruptAction(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimedinterruptAction to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTimedinterruptProcess(net.sourceforge.czt.circustime.ast.TimedinterruptProcess zedObject)
  {
    getLogger().entering(getClassName(), "visitTimedinterruptProcess", zedObject);
    try {
      net.sourceforge.czt.circustime.jaxb.gen.TimedinterruptProcess jaxbObject = objectFactory_.createTimedinterruptProcess();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = CircusProcess
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.circus.ast.CircusProcess o : zedObject.getCircusProcess()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.circus.jaxb.gen.CircusProcess>)r;
				  jaxbObject.getCircusProcess().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.circus.jaxb.gen.CircusProcess";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitTimedinterruptProcess", jaxbObject);
      return objectFactory_.createTimedinterruptProcess(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a TimedinterruptProcess to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
