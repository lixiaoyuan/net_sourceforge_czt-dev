
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.circustime.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.circuspatt.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.circustime.ast.CircusTimeFactory mCircusTimeFactory_;

  public JaxbToAst()
  {
    mCircusTimeFactory_ =
      new net.sourceforge.czt.circustime.impl.CircusTimeFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zpatt.ast.ZpattFactory vZpattFactory, net.sourceforge.czt.circus.ast.CircusFactory vCircusFactory, net.sourceforge.czt.circuspatt.ast.CircusPatternFactory vCircusPatternFactory, net.sourceforge.czt.circustime.ast.CircusTimeFactory vCircusTimeFactory)
  {
    super(vZFactory, vZpattFactory, vCircusFactory, vCircusPatternFactory);
    mCircusTimeFactory_ = vCircusTimeFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.circustime.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitTimeEndByProcess(net.sourceforge.czt.circustime.jaxb.gen.TimeEndByProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeEndByProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeEndByProcess erg = mCircusTimeFactory_.createTimeEndByProcess(circusProcess, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeEndByProcess", erg);
    return erg;
  }

  public Object visitTimeoutProcess(net.sourceforge.czt.circustime.jaxb.gen.TimeoutProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeoutProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeoutProcess erg = mCircusTimeFactory_.createTimeoutProcess(circusProcess, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeoutProcess", erg);
    return erg;
  }

  public Object visitWaitExprAction(net.sourceforge.czt.circustime.jaxb.gen.WaitExprAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitWaitExprAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.circustime.ast.WaitExprAction erg = mCircusTimeFactory_.createWaitExprAction(circusAction, expr, name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitWaitExprAction", erg);
    return erg;
  }

  public Object visitTimeEndByAction(net.sourceforge.czt.circustime.jaxb.gen.TimeEndByAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeEndByAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeEndByAction erg = mCircusTimeFactory_.createTimeEndByAction(circusAction, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeEndByAction", erg);
    return erg;
  }

  public Object visitTimeStartByProcess(net.sourceforge.czt.circustime.jaxb.gen.TimeStartByProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeStartByProcess", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusProcess circusProcess =
      (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(jaxbObject.getCircusProcess());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeStartByProcess erg = mCircusTimeFactory_.createTimeStartByProcess(circusProcess, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeStartByProcess", erg);
    return erg;
  }

  public Object visitTimeoutAction(net.sourceforge.czt.circustime.jaxb.gen.TimeoutAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeoutAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeoutAction erg = mCircusTimeFactory_.createTimeoutAction(circusAction, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeoutAction", erg);
    return erg;
  }

  public Object visitTimeStartByAction(net.sourceforge.czt.circustime.jaxb.gen.TimeStartByAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimeStartByAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimeStartByAction erg = mCircusTimeFactory_.createTimeStartByAction(circusAction, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimeStartByAction", erg);
    return erg;
  }

  public Object visitPrefixingTimeAction(net.sourceforge.czt.circustime.jaxb.gen.PrefixingTimeAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrefixingTimeAction", jaxbObject);
    net.sourceforge.czt.circus.ast.CircusAction circusAction =
      (net.sourceforge.czt.circus.ast.CircusAction) dispatch(jaxbObject.getCircusAction());
    net.sourceforge.czt.circus.ast.Communication communication =
      (net.sourceforge.czt.circus.ast.Communication) dispatch(jaxbObject.getCommunication());
    net.sourceforge.czt.z.ast.Name channelElapsedTime =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getChannelElapsedTime());
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.PrefixingTimeAction erg = mCircusTimeFactory_.createPrefixingTimeAction(circusAction, communication, channelElapsedTime, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPrefixingTimeAction", erg);
    return erg;
  }

  public Object visitWaitAction(net.sourceforge.czt.circustime.jaxb.gen.WaitAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitWaitAction", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.WaitAction erg = mCircusTimeFactory_.createWaitAction(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitWaitAction", erg);
    return erg;
  }

  public Object visitTimedinterruptAction(net.sourceforge.czt.circustime.jaxb.gen.TimedinterruptAction jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimedinterruptAction", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusAction> circusAction = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusAction>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusAction> 
					
		obj : jaxbObject.getCircusAction()) {
	  net.sourceforge.czt.circus.ast.CircusAction o = (net.sourceforge.czt.circus.ast.CircusAction) dispatch(obj);
	  circusAction.add(o);
	}
    
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimedinterruptAction erg = mCircusTimeFactory_.createTimedinterruptAction(circusAction, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimedinterruptAction", erg);
    return erg;
  }

  public Object visitTimedinterruptProcess(net.sourceforge.czt.circustime.jaxb.gen.TimedinterruptProcess jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitTimedinterruptProcess", jaxbObject);
            
    java.util.List<net.sourceforge.czt.circus.ast.CircusProcess> circusProcess = new java.util.Vector<net.sourceforge.czt.circus.ast.CircusProcess>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.circus.jaxb.gen.CircusProcess> 
					
		obj : jaxbObject.getCircusProcess()) {
	  net.sourceforge.czt.circus.ast.CircusProcess o = (net.sourceforge.czt.circus.ast.CircusProcess) dispatch(obj);
	  circusProcess.add(o);
	}
    
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.circustime.ast.TimedinterruptProcess erg = mCircusTimeFactory_.createTimedinterruptProcess(circusProcess, expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitTimedinterruptProcess", erg);
    return erg;
  }
}
