
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE JaxbToAst.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.jaxb;


																																																				

/**
 * The unmarshaller responsible for deserializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class JaxbToAst extends net.sourceforge.czt.zpatt.jaxb.JaxbToAst
{
  protected net.sourceforge.czt.oz.ast.OzFactory mOzFactory_;

  public JaxbToAst()
  {
    mOzFactory_ =
      new net.sourceforge.czt.oz.impl.OzFactoryImpl();
  }

  public JaxbToAst(net.sourceforge.czt.z.ast.ZFactory vZFactory, net.sourceforge.czt.zpatt.ast.ZpattFactory vZpattFactory, net.sourceforge.czt.oz.ast.OzFactory vOzFactory)
  {
    super(vZFactory, vZpattFactory);
    mOzFactory_ = vOzFactory;
  }

  private static java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger("net.sourceforge.czt.oz.jaxb.JaxbToAst");
  }

  public Object visitObject(Object object)
  {
    getLogger().fine("Visit " + object.getClass().toString());
    if (object instanceof String
        || object instanceof Boolean
        || object instanceof java.util.List
        || object instanceof Integer
        || object instanceof java.math.BigInteger
        || object instanceof net.sourceforge.czt.base.ast.Digit) {
      return object;
    }
    throw new UnsupportedOperationException("Unexpected element "
                                            + object.getClass().getName());
  }

  public Object visitJAXBElement(javax.xml.bind.JAXBElement<?> jaxbElement)
  {
    return dispatch(jaxbElement.getValue());
  }

  // TODO: why this restricted class is needed?
  public Object visitElementNSImpl(@SuppressWarnings("restriction") com.sun.org.apache.xerces.internal.dom.ElementNSImpl obj)
  {
    return obj;
  }


  public Object visitPrimaryDecl(net.sourceforge.czt.oz.jaxb.gen.PrimaryDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPrimaryDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.oz.ast.PrimaryDecl erg = mOzFactory_.createPrimaryDecl(declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPrimaryDecl", erg);
    return erg;
  }

  public Object visitOpPromotionExpr(net.sourceforge.czt.oz.jaxb.gen.OpPromotionExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOpPromotionExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.oz.ast.OpPromotionExpr erg = mOzFactory_.createOpPromotionExpr(expr, name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOpPromotionExpr", erg);
    return erg;
  }

  public Object visitClassPara(net.sourceforge.czt.oz.jaxb.gen.ClassPara jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassPara", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.oz.ast.VisibilityList visibilityList =
      (net.sourceforge.czt.oz.ast.VisibilityList) dispatch(jaxbObject.getVisibilityList());
    net.sourceforge.czt.z.ast.ExprList inheritedClass =
      (net.sourceforge.czt.z.ast.ExprList) dispatch(jaxbObject.getInheritedClass());
            
    java.util.List<net.sourceforge.czt.z.ast.Para> localDef = new java.util.Vector<net.sourceforge.czt.z.ast.Para>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Para> 
					
		obj : jaxbObject.getLocalDef()) {
	  net.sourceforge.czt.z.ast.Para o = (net.sourceforge.czt.z.ast.Para) dispatch(obj);
	  localDef.add(o);
	}
    
    net.sourceforge.czt.oz.ast.State state =
      (net.sourceforge.czt.oz.ast.State) dispatch(jaxbObject.getState());
    net.sourceforge.czt.oz.ast.InitialState initialState =
      (net.sourceforge.czt.oz.ast.InitialState) dispatch(jaxbObject.getInitialState());
            
    java.util.List<net.sourceforge.czt.oz.ast.Operation> operation = new java.util.Vector<net.sourceforge.czt.oz.ast.Operation>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.Operation> 
					
		obj : jaxbObject.getOperation()) {
	  net.sourceforge.czt.oz.ast.Operation o = (net.sourceforge.czt.oz.ast.Operation) dispatch(obj);
	  operation.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassPara erg = mOzFactory_.createClassPara(name, nameList, visibilityList, inheritedClass, localDef, state, initialState, operation);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassPara", erg);
    return erg;
  }

  public Object visitClassRef(net.sourceforge.czt.oz.jaxb.gen.ClassRef jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassRef", jaxbObject);
    net.sourceforge.czt.z.ast.ZName name =
      (net.sourceforge.czt.z.ast.ZName) dispatch(jaxbObject.getName());
            
    java.util.List<net.sourceforge.czt.z.ast.Type2> type = new java.util.Vector<net.sourceforge.czt.z.ast.Type2>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Type2> 
					
		obj : jaxbObject.getType()) {
	  net.sourceforge.czt.z.ast.Type2 o = (net.sourceforge.czt.z.ast.Type2) dispatch(obj);
	  type.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.z.ast.NewOldPair> newOldPair = new java.util.Vector<net.sourceforge.czt.z.ast.NewOldPair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NewOldPair> 
					
		obj : jaxbObject.getNewOldPair()) {
	  net.sourceforge.czt.z.ast.NewOldPair o = (net.sourceforge.czt.z.ast.NewOldPair) dispatch(obj);
	  newOldPair.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassRef erg = mOzFactory_.createClassRef(name, type, newOldPair);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassRef", erg);
    return erg;
  }

  public Object visitDeltaList(net.sourceforge.czt.oz.jaxb.gen.DeltaList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDeltaList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Name> name = new java.util.Vector<net.sourceforge.czt.z.ast.Name>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Name> 
					
		obj : jaxbObject.getName()) {
	  net.sourceforge.czt.z.ast.Name o = (net.sourceforge.czt.z.ast.Name) dispatch(obj);
	  name.add(o);
	}
    
    net.sourceforge.czt.oz.ast.DeltaList erg = mOzFactory_.createDeltaList(name);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDeltaList", erg);
    return erg;
  }

  public Object visitVisibilityList(net.sourceforge.czt.oz.jaxb.gen.VisibilityList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitVisibilityList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.ZName> zName = new java.util.Vector<net.sourceforge.czt.z.ast.ZName>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.ZName> 
					
		obj : jaxbObject.getZName()) {
	  net.sourceforge.czt.z.ast.ZName o = (net.sourceforge.czt.z.ast.ZName) dispatch(obj);
	  zName.add(o);
	}
    
    net.sourceforge.czt.oz.ast.VisibilityList erg = mOzFactory_.createVisibilityList(zName);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitVisibilityList", erg);
    return erg;
  }

  public Object visitPolyExpr(net.sourceforge.czt.oz.jaxb.gen.PolyExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPolyExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.oz.ast.PolyExpr erg = mOzFactory_.createPolyExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPolyExpr", erg);
    return erg;
  }

  public Object visitConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.ConjOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitConjOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ConjOpExpr erg = mOzFactory_.createConjOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitConjOpExpr", erg);
    return erg;
  }

  public Object visitOperation(net.sourceforge.czt.oz.jaxb.gen.Operation jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOperation", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Box box = null;
    if (jaxbObject.getBox() != null) {
      String boxJaxb = jaxbObject.getBox().value();
            
      box = net.sourceforge.czt.z.ast.Box.valueOf(boxJaxb);
    }
    net.sourceforge.czt.oz.ast.Operation erg = mOzFactory_.createOperation(name, opExpr, box);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOperation", erg);
    return erg;
  }

  public Object visitNameSignaturePair(net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitNameSignaturePair", jaxbObject);
    net.sourceforge.czt.z.ast.Name name =
      (net.sourceforge.czt.z.ast.Name) dispatch(jaxbObject.getName());
    net.sourceforge.czt.z.ast.Signature signature =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getSignature());
    net.sourceforge.czt.oz.ast.NameSignaturePair erg = mOzFactory_.createNameSignaturePair(name, signature);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitNameSignaturePair", erg);
    return erg;
  }

  public Object visitAssoParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.AssoParallelOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAssoParallelOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.AssoParallelOpExpr erg = mOzFactory_.createAssoParallelOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAssoParallelOpExpr", erg);
    return erg;
  }

  public Object visitDistConjOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistConjOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistConjOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.oz.ast.DistConjOpExpr erg = mOzFactory_.createDistConjOpExpr(schText, opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDistConjOpExpr", erg);
    return erg;
  }

  public Object visitDistChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistChoiceOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistChoiceOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.oz.ast.DistChoiceOpExpr erg = mOzFactory_.createDistChoiceOpExpr(schText, opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDistChoiceOpExpr", erg);
    return erg;
  }

  public Object visitSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.SeqOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSeqOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.SeqOpExpr erg = mOzFactory_.createSeqOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSeqOpExpr", erg);
    return erg;
  }

  public Object visitScopeEnrichOpExpr(net.sourceforge.czt.oz.jaxb.gen.ScopeEnrichOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitScopeEnrichOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ScopeEnrichOpExpr erg = mOzFactory_.createScopeEnrichOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitScopeEnrichOpExpr", erg);
    return erg;
  }

  public Object visitClassUnionType(net.sourceforge.czt.oz.jaxb.gen.ClassUnionType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassUnionType", jaxbObject);
    net.sourceforge.czt.oz.ast.ClassRefList classes =
      (net.sourceforge.czt.oz.ast.ClassRefList) dispatch(jaxbObject.getClasses());
    net.sourceforge.czt.z.ast.Signature state =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getState());
            
    java.util.List<net.sourceforge.czt.z.ast.NameTypePair> attribute = new java.util.Vector<net.sourceforge.czt.z.ast.NameTypePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameTypePair> 
					
		obj : jaxbObject.getAttribute()) {
	  net.sourceforge.czt.z.ast.NameTypePair o = (net.sourceforge.czt.z.ast.NameTypePair) dispatch(obj);
	  attribute.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.oz.ast.NameSignaturePair> operation = new java.util.Vector<net.sourceforge.czt.oz.ast.NameSignaturePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> 
					
		obj : jaxbObject.getOperation()) {
	  net.sourceforge.czt.oz.ast.NameSignaturePair o = (net.sourceforge.czt.oz.ast.NameSignaturePair) dispatch(obj);
	  operation.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassUnionType erg = mOzFactory_.createClassUnionType(classes, state, attribute, operation);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassUnionType", erg);
    return erg;
  }

  public Object visitClassRefList(net.sourceforge.czt.oz.jaxb.gen.ClassRefList jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassRefList", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.ClassRef> classRef = new java.util.Vector<net.sourceforge.czt.oz.ast.ClassRef>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.ClassRef> 
					
		obj : jaxbObject.getClassRef()) {
	  net.sourceforge.czt.oz.ast.ClassRef o = (net.sourceforge.czt.oz.ast.ClassRef) dispatch(obj);
	  classRef.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassRefList erg = mOzFactory_.createClassRefList(classRef);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassRefList", erg);
    return erg;
  }

  public Object visitSecondaryDecl(net.sourceforge.czt.oz.jaxb.gen.SecondaryDecl jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitSecondaryDecl", jaxbObject);
    net.sourceforge.czt.z.ast.DeclList declList =
      (net.sourceforge.czt.z.ast.DeclList) dispatch(jaxbObject.getDeclList());
    net.sourceforge.czt.oz.ast.SecondaryDecl erg = mOzFactory_.createSecondaryDecl(declList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitSecondaryDecl", erg);
    return erg;
  }

  public Object visitRenameOpExpr(net.sourceforge.czt.oz.jaxb.gen.RenameOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitRenameOpExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.z.ast.RenameList renameList =
      (net.sourceforge.czt.z.ast.RenameList) dispatch(jaxbObject.getRenameList());
    net.sourceforge.czt.oz.ast.RenameOpExpr erg = mOzFactory_.createRenameOpExpr(opExpr, renameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitRenameOpExpr", erg);
    return erg;
  }

  public Object visitParallelOpExpr(net.sourceforge.czt.oz.jaxb.gen.ParallelOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitParallelOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ParallelOpExpr erg = mOzFactory_.createParallelOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitParallelOpExpr", erg);
    return erg;
  }

  public Object visitDistSeqOpExpr(net.sourceforge.czt.oz.jaxb.gen.DistSeqOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitDistSeqOpExpr", jaxbObject);
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.oz.ast.DistSeqOpExpr erg = mOzFactory_.createDistSeqOpExpr(schText, opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitDistSeqOpExpr", erg);
    return erg;
  }

  public Object visitClassRefType(net.sourceforge.czt.oz.jaxb.gen.ClassRefType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassRefType", jaxbObject);
    net.sourceforge.czt.oz.ast.ClassRefList classes =
      (net.sourceforge.czt.oz.ast.ClassRefList) dispatch(jaxbObject.getClasses());
    net.sourceforge.czt.z.ast.Signature state =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getState());
            
    java.util.List<net.sourceforge.czt.z.ast.NameTypePair> attribute = new java.util.Vector<net.sourceforge.czt.z.ast.NameTypePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameTypePair> 
					
		obj : jaxbObject.getAttribute()) {
	  net.sourceforge.czt.z.ast.NameTypePair o = (net.sourceforge.czt.z.ast.NameTypePair) dispatch(obj);
	  attribute.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.oz.ast.NameSignaturePair> operation = new java.util.Vector<net.sourceforge.czt.oz.ast.NameSignaturePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> 
					
		obj : jaxbObject.getOperation()) {
	  net.sourceforge.czt.oz.ast.NameSignaturePair o = (net.sourceforge.czt.oz.ast.NameSignaturePair) dispatch(obj);
	  operation.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassRef thisClass =
      (net.sourceforge.czt.oz.ast.ClassRef) dispatch(jaxbObject.getThisClass());
    net.sourceforge.czt.oz.ast.ClassRefList superClass =
      (net.sourceforge.czt.oz.ast.ClassRefList) dispatch(jaxbObject.getSuperClass());
    net.sourceforge.czt.oz.ast.VisibilityList visibilityList =
      (net.sourceforge.czt.oz.ast.VisibilityList) dispatch(jaxbObject.getVisibilityList());
            
    java.util.List<net.sourceforge.czt.z.ast.Name> primary = new java.util.Vector<net.sourceforge.czt.z.ast.Name>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Name> 
					
		obj : jaxbObject.getPrimary()) {
	  net.sourceforge.czt.z.ast.Name o = (net.sourceforge.czt.z.ast.Name) dispatch(obj);
	  primary.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassRefType erg = mOzFactory_.createClassRefType(classes, state, attribute, operation, thisClass, superClass, visibilityList, primary);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassRefType", erg);
    return erg;
  }

  public Object visitHideOpExpr(net.sourceforge.czt.oz.jaxb.gen.HideOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitHideOpExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpExpr opExpr =
      (net.sourceforge.czt.oz.ast.OpExpr) dispatch(jaxbObject.getOpExpr());
    net.sourceforge.czt.z.ast.NameList nameList =
      (net.sourceforge.czt.z.ast.NameList) dispatch(jaxbObject.getNameList());
    net.sourceforge.czt.oz.ast.HideOpExpr erg = mOzFactory_.createHideOpExpr(opExpr, nameList);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitHideOpExpr", erg);
    return erg;
  }

  public Object visitContainmentExpr(net.sourceforge.czt.oz.jaxb.gen.ContainmentExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitContainmentExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Expr expr =
      (net.sourceforge.czt.z.ast.Expr) dispatch(jaxbObject.getExpr());
    net.sourceforge.czt.oz.ast.ContainmentExpr erg = mOzFactory_.createContainmentExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitContainmentExpr", erg);
    return erg;
  }

  public Object visitExChoiceOpExpr(net.sourceforge.czt.oz.jaxb.gen.ExChoiceOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitExChoiceOpExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.oz.ast.OpExpr> opExpr = new java.util.Vector<net.sourceforge.czt.oz.ast.OpExpr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.OpExpr> 
					
		obj : jaxbObject.getOpExpr()) {
	  net.sourceforge.czt.oz.ast.OpExpr o = (net.sourceforge.czt.oz.ast.OpExpr) dispatch(obj);
	  opExpr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ExChoiceOpExpr erg = mOzFactory_.createExChoiceOpExpr(opExpr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitExChoiceOpExpr", erg);
    return erg;
  }

  public Object visitOpText(net.sourceforge.czt.oz.jaxb.gen.OpText jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitOpText", jaxbObject);
    net.sourceforge.czt.oz.ast.DeltaList deltaList =
      (net.sourceforge.czt.oz.ast.DeltaList) dispatch(jaxbObject.getDeltaList());
    net.sourceforge.czt.z.ast.SchText schText =
      (net.sourceforge.czt.z.ast.SchText) dispatch(jaxbObject.getSchText());
    net.sourceforge.czt.oz.ast.OpText erg = mOzFactory_.createOpText(deltaList, schText);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitOpText", erg);
    return erg;
  }

  public Object visitClassPolyType(net.sourceforge.czt.oz.jaxb.gen.ClassPolyType jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassPolyType", jaxbObject);
    net.sourceforge.czt.oz.ast.ClassRefList classes =
      (net.sourceforge.czt.oz.ast.ClassRefList) dispatch(jaxbObject.getClasses());
    net.sourceforge.czt.z.ast.Signature state =
      (net.sourceforge.czt.z.ast.Signature) dispatch(jaxbObject.getState());
            
    java.util.List<net.sourceforge.czt.z.ast.NameTypePair> attribute = new java.util.Vector<net.sourceforge.czt.z.ast.NameTypePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.NameTypePair> 
					
		obj : jaxbObject.getAttribute()) {
	  net.sourceforge.czt.z.ast.NameTypePair o = (net.sourceforge.czt.z.ast.NameTypePair) dispatch(obj);
	  attribute.add(o);
	}
    
            
    java.util.List<net.sourceforge.czt.oz.ast.NameSignaturePair> operation = new java.util.Vector<net.sourceforge.czt.oz.ast.NameSignaturePair>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> 
					
		obj : jaxbObject.getOperation()) {
	  net.sourceforge.czt.oz.ast.NameSignaturePair o = (net.sourceforge.czt.oz.ast.NameSignaturePair) dispatch(obj);
	  operation.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassRef rootClass =
      (net.sourceforge.czt.oz.ast.ClassRef) dispatch(jaxbObject.getRootClass());
    net.sourceforge.czt.oz.ast.ClassPolyType erg = mOzFactory_.createClassPolyType(classes, state, attribute, operation, rootClass);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassPolyType", erg);
    return erg;
  }

  public Object visitClassUnionExpr(net.sourceforge.czt.oz.jaxb.gen.ClassUnionExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitClassUnionExpr", jaxbObject);
            
    java.util.List<net.sourceforge.czt.z.ast.Expr> expr = new java.util.Vector<net.sourceforge.czt.z.ast.Expr>();
    
    for (
    				javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Expr> 
					
		obj : jaxbObject.getExpr()) {
	  net.sourceforge.czt.z.ast.Expr o = (net.sourceforge.czt.z.ast.Expr) dispatch(obj);
	  expr.add(o);
	}
    
    net.sourceforge.czt.oz.ast.ClassUnionExpr erg = mOzFactory_.createClassUnionExpr(expr);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitClassUnionExpr", erg);
    return erg;
  }

  public Object visitInitialState(net.sourceforge.czt.oz.jaxb.gen.InitialState jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitInitialState", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Box box = null;
    if (jaxbObject.getBox() != null) {
      String boxJaxb = jaxbObject.getBox().value();
            
      box = net.sourceforge.czt.z.ast.Box.valueOf(boxJaxb);
    }
    net.sourceforge.czt.oz.ast.InitialState erg = mOzFactory_.createInitialState(pred, box);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitInitialState", erg);
    return erg;
  }

  public Object visitAnonOpExpr(net.sourceforge.czt.oz.jaxb.gen.AnonOpExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitAnonOpExpr", jaxbObject);
    net.sourceforge.czt.oz.ast.OpText opText =
      (net.sourceforge.czt.oz.ast.OpText) dispatch(jaxbObject.getOpText());
    net.sourceforge.czt.oz.ast.AnonOpExpr erg = mOzFactory_.createAnonOpExpr(opText);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitAnonOpExpr", erg);
    return erg;
  }

  public Object visitPredExpr(net.sourceforge.czt.oz.jaxb.gen.PredExpr jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitPredExpr", jaxbObject);
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
    net.sourceforge.czt.oz.ast.PredExpr erg = mOzFactory_.createPredExpr(pred);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitPredExpr", erg);
    return erg;
  }

  public Object visitState(net.sourceforge.czt.oz.jaxb.gen.State jaxbObject)
  {
    getLogger().entering("JaxbToAst", "visitState", jaxbObject);
    net.sourceforge.czt.oz.ast.PrimaryDecl primaryDecl =
      (net.sourceforge.czt.oz.ast.PrimaryDecl) dispatch(jaxbObject.getPrimaryDecl());
    net.sourceforge.czt.oz.ast.SecondaryDecl secondaryDecl =
      (net.sourceforge.czt.oz.ast.SecondaryDecl) dispatch(jaxbObject.getSecondaryDecl());
    net.sourceforge.czt.z.ast.Pred pred =
      (net.sourceforge.czt.z.ast.Pred) dispatch(jaxbObject.getPred());
																									    	    	    	    	    	    	                                    		
		
                    
    net.sourceforge.czt.z.ast.Box box = null;
    if (jaxbObject.getBox() != null) {
      String boxJaxb = jaxbObject.getBox().value();
            
      box = net.sourceforge.czt.z.ast.Box.valueOf(boxJaxb);
    }
    net.sourceforge.czt.oz.ast.State erg = mOzFactory_.createState(primaryDecl, secondaryDecl, pred, box);

    if (jaxbObject.getAnns() != null
    	// FindBugs points out this is unnecessary
        /*&& jaxbObject.getAnns().getAny() != null*/) {
      assert jaxbObject.getAnns().getAny() != null;
      java.util.List<Object> annsList = erg.getAnns();
      java.util.List<Object> anyList = jaxbObject.getAnns().getAny();
      for (Object obj : anyList) {
        Object o = dispatch(obj);
        annsList.add(o);
      }
    }

    getLogger().exiting("JaxbToAst", "visitState", erg);
    return erg;
  }
}
