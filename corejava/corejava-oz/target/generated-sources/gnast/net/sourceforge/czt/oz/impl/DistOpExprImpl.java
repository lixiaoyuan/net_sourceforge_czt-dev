
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstClass.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.impl;

																																																				

/**
 * An implementation of the interface
 * {@link net.sourceforge.czt.oz.ast.DistOpExpr}.
 *
 * @author GnAST version 1.6-cdh
 */
public abstract class DistOpExprImpl
extends 		 		net.sourceforge.czt.oz.impl.OpExprImpl
 	  implements net.sourceforge.czt.oz.ast.DistOpExpr
{






  /**
   * The default constructor.
   *
   * Do not use it explicitly, unless you are extending this class.
   * If you want to create an instance of this class, please use the
   * {@link net.sourceforge.czt.oz.ast.OzFactory object factory}.
   */
  protected DistOpExprImpl()
  {
    this(null);
  }

  protected DistOpExprImpl(net.sourceforge.czt.base.impl.BaseFactory factory)
  {
    super(factory);
  }
  
  
  /**
   * Compares the specified object with this DistOpExprImpl
   * for equality.  Returns true if and only if the specified object is
   * also a(n) DistOpExprImpl and all the getter methods except getAnns
   * return equal objects.
   */
  @Override
  public boolean equals(Object obj)
  {
    if (obj != null) {
      if (this.getClass().equals(obj.getClass()) && super.equals(obj)) {
      	// if foreach on meta-model (.vm) file is empty, this won't be used.
      	//@SuppressWarnings("unused")
        //DistOpExprImpl object = ((DistOpExprImpl) obj);
        if (schText_ != null) {
          if (!schText_.equals(((DistOpExprImpl) obj).schText_)) {
            return false;
          }
        }
        else {
          if (((DistOpExprImpl) obj).schText_ != null) {
            return false;
          }
        }
        if (opExpr_ != null) {
          if (!opExpr_.equals(((DistOpExprImpl) obj).opExpr_)) {
            return false;
          }
        }
        else {
          if (((DistOpExprImpl) obj).opExpr_ != null) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }

  /**
   * Returns the hash code value for this DistOpExprImpl.
   */
  @Override
  public int hashCode()
  {
    //final int constant = 31;

    int hashCode = super.hashCode();
    hashCode += "DistOpExprImpl".hashCode();
    if (schText_ != null) {
      hashCode += 31 * schText_.hashCode();
    }
    if (opExpr_ != null) {
      hashCode += 31 * opExpr_.hashCode();
    }
    return hashCode;
  }

  /**
   * Accepts a visitor.
   */
  @Override
  public <R> R accept(net.sourceforge.czt.util.Visitor<R> v)
  {
    if (v instanceof net.sourceforge.czt.oz.visitor.DistOpExprVisitor) {
      net.sourceforge.czt.oz.visitor.DistOpExprVisitor<R> visitor = 
      	  (net.sourceforge.czt.oz.visitor.DistOpExprVisitor<R>) v;
      return visitor.visitDistOpExpr(this);
    }
    return super.accept(v);
  }



  private
            		net.sourceforge.czt.z.ast.SchText
  schText_;

  public 
		net.sourceforge.czt.z.ast.SchText
  getSchText()
  {
    return schText_;
  }

  public void setSchText(
		net.sourceforge.czt.z.ast.SchText
	schText)
  {
                          schText_ = schText;
    }


  private
            		net.sourceforge.czt.oz.ast.OpExpr
  opExpr_;

  public 
		net.sourceforge.czt.oz.ast.OpExpr
  getOpExpr()
  {
    return opExpr_;
  }

  public void setOpExpr(
		net.sourceforge.czt.oz.ast.OpExpr
	opExpr)
  {
                          opExpr_ = opExpr;
    }
}
