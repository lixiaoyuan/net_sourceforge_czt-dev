
/******************************************************************************
DO NOT EDIT THIS FILE!  THIS FILE WAS GENERATED BY GNAST
FROM THE TEMPLATE FILE AstToJaxb.vm.
ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON REGENERATION.

-------------------------------------------------------------------------------

Copyright 2003, 2004, 2005, 2006, 2007 Mark Utting
This file is part of the czt project.

The czt project contains free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

The czt project is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with czt; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
******************************************************************************/

package net.sourceforge.czt.oz.jaxb;

																																																				


/**
 * The marshaller responsible for serializing XML data.
 *
 * @author GnAST version 1.6-cdh
 */
public class AstToJaxb
  extends net.sourceforge.czt.zpatt.jaxb.AstToJaxb
  implements net.sourceforge.czt.oz.visitor.OzVisitor<javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term>>
  
																																																				
  
{
  /**
   * The ObjectFactory instances for generating Jaxb objects.
   */
  private net.sourceforge.czt.oz.jaxb.gen.ObjectFactory
    objectFactory_ = new net.sourceforge.czt.oz.jaxb.gen.ObjectFactory();
  private net.sourceforge.czt.z.jaxb.gen.ObjectFactory
    annsObjectFactory_ = new net.sourceforge.czt.z.jaxb.gen.ObjectFactory();

  private String getClassName()
  {
    return "net.sourceforge.czt.oz.jaxb.AstToJaxb";
  }

  private java.util.logging.Logger getLogger()
  {
    return java.util.logging.Logger.getLogger(getClassName());
  }

  private net.sourceforge.czt.z.jaxb.gen.Term.Anns visitAnnotations(java.util.List<Object> list)
    throws javax.xml.bind.JAXBException
  {
      net.sourceforge.czt.z.jaxb.gen.Term.Anns anns =
        annsObjectFactory_.createTermAnns();
    java.util.List<Object> newlist = anns.getAny();
    for (Object obj : list) {
      if (obj instanceof net.sourceforge.czt.base.ast.Term) {
        net.sourceforge.czt.base.ast.Term term = (net.sourceforge.czt.base.ast.Term) obj;
        try {
          Object visitedTerm = term.accept(this);
          newlist.add(visitedTerm);
        }
        catch (Exception e) {
          String message = "Annotation " + term + " cannot be handled; " +
            "drop it.";
          getLogger().warning(message);
          throw new net.sourceforge.czt.util.CztException(message, e);
        }
      }
    }
    return anns;
  }


  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitTerm(net.sourceforge.czt.base.ast.Term zedObject)
  {
    String message = "Unexpected element " + zedObject.getClass().getName();
    throw(new UnsupportedOperationException(message));
  }

  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPrimaryDecl(net.sourceforge.czt.oz.ast.PrimaryDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitPrimaryDecl", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.PrimaryDecl jaxbObject = objectFactory_.createPrimaryDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitPrimaryDecl", jaxbObject);
      return objectFactory_.createPrimaryDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PrimaryDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOpPromotionExpr(net.sourceforge.czt.oz.ast.OpPromotionExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitOpPromotionExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.OpPromotionExpr jaxbObject = objectFactory_.createOpPromotionExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
      getLogger().exiting(getClassName(), "visitOpPromotionExpr", jaxbObject);
      return objectFactory_.createOpPromotionExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OpPromotionExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassPara(net.sourceforge.czt.oz.ast.ClassPara zedObject)
  {
    getLogger().entering(getClassName(), "visitClassPara", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassPara jaxbObject = objectFactory_.createClassPara();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
// prop.Name   = VisibilityList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getVisibilityList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getVisibilityList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.VisibilityList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.VisibilityList>)term.accept(this);
        jaxbObject.setVisibilityList(newValue);
      }
// prop.Name   = InheritedClass
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getInheritedClass() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getInheritedClass();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ExprList>)term.accept(this);
        jaxbObject.setInheritedClass(newValue);
      }
// prop.Name   = LocalDef
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Para o : zedObject.getLocalDef()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Para>)r;
				  jaxbObject.getLocalDef().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Para";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = State
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getState() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getState();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.State> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.State>)term.accept(this);
        jaxbObject.setState(newValue);
      }
// prop.Name   = InitialState
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getInitialState() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getInitialState();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.InitialState> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.InitialState>)term.accept(this);
        jaxbObject.setInitialState(newValue);
      }
// prop.Name   = Operation
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.Operation o : zedObject.getOperation()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.Operation> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.Operation>)r;
				  jaxbObject.getOperation().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.Operation";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassPara", jaxbObject);
      return objectFactory_.createClassPara(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassPara to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassRef(net.sourceforge.czt.oz.ast.ClassRef zedObject)
  {
    getLogger().entering(getClassName(), "visitClassRef", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassRef jaxbObject = objectFactory_.createClassRef();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZName> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZName>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Type
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Type2 o : zedObject.getType()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Type2>)r;
				  jaxbObject.getType().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Type2";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = NewOldPair
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NewOldPair o : zedObject.getNewOldPair()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NewOldPair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NewOldPair>)r;
				  jaxbObject.getNewOldPair().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NewOldPair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassRef", jaxbObject);
      return objectFactory_.createClassRef(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassRef to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDeltaList(net.sourceforge.czt.oz.ast.DeltaList zedObject)
  {
    getLogger().entering(getClassName(), "visitDeltaList", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.DeltaList jaxbObject = objectFactory_.createDeltaList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Name o : zedObject.getName()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)r;
				  jaxbObject.getName().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Name";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitDeltaList", jaxbObject);
      return objectFactory_.createDeltaList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DeltaList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitVisibilityList(net.sourceforge.czt.oz.ast.VisibilityList zedObject)
  {
    getLogger().entering(getClassName(), "visitVisibilityList", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.VisibilityList jaxbObject = objectFactory_.createVisibilityList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ZName
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.ZName o : zedObject.getZName()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZName> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.ZName>)r;
				  jaxbObject.getZName().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.ZName";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitVisibilityList", jaxbObject);
      return objectFactory_.createVisibilityList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a VisibilityList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPolyExpr(net.sourceforge.czt.oz.ast.PolyExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPolyExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.PolyExpr jaxbObject = objectFactory_.createPolyExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitPolyExpr", jaxbObject);
      return objectFactory_.createPolyExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PolyExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitConjOpExpr(net.sourceforge.czt.oz.ast.ConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitConjOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ConjOpExpr jaxbObject = objectFactory_.createConjOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitConjOpExpr", jaxbObject);
      return objectFactory_.createConjOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOperation(net.sourceforge.czt.oz.ast.Operation zedObject)
  {
    getLogger().entering(getClassName(), "visitOperation", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.Operation jaxbObject = objectFactory_.createOperation();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
// prop.Name   = Box
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getBox() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setBox(net.sourceforge.czt.z.jaxb.gen.Box.fromValue(zedObject.getBox().toString()));
      }
      getLogger().exiting(getClassName(), "visitOperation", jaxbObject);
      return objectFactory_.createOperation(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a Operation to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitNameSignaturePair(net.sourceforge.czt.oz.ast.NameSignaturePair zedObject)
  {
    getLogger().entering(getClassName(), "visitNameSignaturePair", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair jaxbObject = objectFactory_.createNameSignaturePair();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Name
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getName() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getName();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)term.accept(this);
        jaxbObject.setName(newValue);
      }
// prop.Name   = Signature
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSignature() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSignature();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setSignature(newValue);
      }
      getLogger().exiting(getClassName(), "visitNameSignaturePair", jaxbObject);
      return objectFactory_.createNameSignaturePair(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a NameSignaturePair to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAssoParallelOpExpr(net.sourceforge.czt.oz.ast.AssoParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAssoParallelOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.AssoParallelOpExpr jaxbObject = objectFactory_.createAssoParallelOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitAssoParallelOpExpr", jaxbObject);
      return objectFactory_.createAssoParallelOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AssoParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDistConjOpExpr(net.sourceforge.czt.oz.ast.DistConjOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistConjOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.DistConjOpExpr jaxbObject = objectFactory_.createDistConjOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitDistConjOpExpr", jaxbObject);
      return objectFactory_.createDistConjOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistConjOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDistChoiceOpExpr(net.sourceforge.czt.oz.ast.DistChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistChoiceOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.DistChoiceOpExpr jaxbObject = objectFactory_.createDistChoiceOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitDistChoiceOpExpr", jaxbObject);
      return objectFactory_.createDistChoiceOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSeqOpExpr(net.sourceforge.czt.oz.ast.SeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitSeqOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.SeqOpExpr jaxbObject = objectFactory_.createSeqOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitSeqOpExpr", jaxbObject);
      return objectFactory_.createSeqOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitScopeEnrichOpExpr(net.sourceforge.czt.oz.ast.ScopeEnrichOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitScopeEnrichOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ScopeEnrichOpExpr jaxbObject = objectFactory_.createScopeEnrichOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitScopeEnrichOpExpr", jaxbObject);
      return objectFactory_.createScopeEnrichOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ScopeEnrichOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassUnionType(net.sourceforge.czt.oz.ast.ClassUnionType zedObject)
  {
    getLogger().entering(getClassName(), "visitClassUnionType", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassUnionType jaxbObject = objectFactory_.createClassUnionType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Classes
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getClasses() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getClasses();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList>)term.accept(this);
        jaxbObject.setClasses(newValue);
      }
// prop.Name   = State
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getState() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getState();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setState(newValue);
      }
// prop.Name   = Attribute
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameTypePair o : zedObject.getAttribute()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair>)r;
				  jaxbObject.getAttribute().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameTypePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Operation
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.NameSignaturePair o : zedObject.getOperation()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair>)r;
				  jaxbObject.getOperation().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassUnionType", jaxbObject);
      return objectFactory_.createClassUnionType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassUnionType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassRefList(net.sourceforge.czt.oz.ast.ClassRefList zedObject)
  {
    getLogger().entering(getClassName(), "visitClassRefList", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassRefList jaxbObject = objectFactory_.createClassRefList();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = ClassRef
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.ClassRef o : zedObject.getClassRef()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef>)r;
				  jaxbObject.getClassRef().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.ClassRef";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassRefList", jaxbObject);
      return objectFactory_.createClassRefList(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassRefList to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitSecondaryDecl(net.sourceforge.czt.oz.ast.SecondaryDecl zedObject)
  {
    getLogger().entering(getClassName(), "visitSecondaryDecl", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.SecondaryDecl jaxbObject = objectFactory_.createSecondaryDecl();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeclList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeclList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeclList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.DeclList>)term.accept(this);
        jaxbObject.setDeclList(newValue);
      }
      getLogger().exiting(getClassName(), "visitSecondaryDecl", jaxbObject);
      return objectFactory_.createSecondaryDecl(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a SecondaryDecl to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitRenameOpExpr(net.sourceforge.czt.oz.ast.RenameOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitRenameOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.RenameOpExpr jaxbObject = objectFactory_.createRenameOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
// prop.Name   = RenameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRenameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRenameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.RenameList>)term.accept(this);
        jaxbObject.setRenameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitRenameOpExpr", jaxbObject);
      return objectFactory_.createRenameOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a RenameOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitParallelOpExpr(net.sourceforge.czt.oz.ast.ParallelOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitParallelOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ParallelOpExpr jaxbObject = objectFactory_.createParallelOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitParallelOpExpr", jaxbObject);
      return objectFactory_.createParallelOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ParallelOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitDistSeqOpExpr(net.sourceforge.czt.oz.ast.DistSeqOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitDistSeqOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.DistSeqOpExpr jaxbObject = objectFactory_.createDistSeqOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitDistSeqOpExpr", jaxbObject);
      return objectFactory_.createDistSeqOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a DistSeqOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassRefType(net.sourceforge.czt.oz.ast.ClassRefType zedObject)
  {
    getLogger().entering(getClassName(), "visitClassRefType", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassRefType jaxbObject = objectFactory_.createClassRefType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Classes
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getClasses() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getClasses();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList>)term.accept(this);
        jaxbObject.setClasses(newValue);
      }
// prop.Name   = State
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getState() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getState();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setState(newValue);
      }
// prop.Name   = Attribute
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameTypePair o : zedObject.getAttribute()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair>)r;
				  jaxbObject.getAttribute().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameTypePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Operation
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.NameSignaturePair o : zedObject.getOperation()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair>)r;
				  jaxbObject.getOperation().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = ThisClass
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getThisClass() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getThisClass();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef>)term.accept(this);
        jaxbObject.setThisClass(newValue);
      }
// prop.Name   = SuperClass
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSuperClass() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSuperClass();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList>)term.accept(this);
        jaxbObject.setSuperClass(newValue);
      }
// prop.Name   = VisibilityList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getVisibilityList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getVisibilityList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.VisibilityList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.VisibilityList>)term.accept(this);
        jaxbObject.setVisibilityList(newValue);
      }
// prop.Name   = Primary
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Name o : zedObject.getPrimary()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Name>)r;
				  jaxbObject.getPrimary().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Name";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassRefType", jaxbObject);
      return objectFactory_.createClassRefType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassRefType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitHideOpExpr(net.sourceforge.czt.oz.ast.HideOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitHideOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.HideOpExpr jaxbObject = objectFactory_.createHideOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)term.accept(this);
        jaxbObject.setOpExpr(newValue);
      }
// prop.Name   = NameList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getNameList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getNameList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameList>)term.accept(this);
        jaxbObject.setNameList(newValue);
      }
      getLogger().exiting(getClassName(), "visitHideOpExpr", jaxbObject);
      return objectFactory_.createHideOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a HideOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitContainmentExpr(net.sourceforge.czt.oz.ast.ContainmentExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitContainmentExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ContainmentExpr jaxbObject = objectFactory_.createContainmentExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getExpr() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getExpr();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)term.accept(this);
        jaxbObject.setExpr(newValue);
      }
      getLogger().exiting(getClassName(), "visitContainmentExpr", jaxbObject);
      return objectFactory_.createContainmentExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ContainmentExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitExChoiceOpExpr(net.sourceforge.czt.oz.ast.ExChoiceOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitExChoiceOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ExChoiceOpExpr jaxbObject = objectFactory_.createExChoiceOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpExpr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.OpExpr o : zedObject.getOpExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpExpr>)r;
				  jaxbObject.getOpExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.OpExpr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitExChoiceOpExpr", jaxbObject);
      return objectFactory_.createExChoiceOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ExChoiceOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitOpText(net.sourceforge.czt.oz.ast.OpText zedObject)
  {
    getLogger().entering(getClassName(), "visitOpText", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.OpText jaxbObject = objectFactory_.createOpText();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = DeltaList
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getDeltaList() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getDeltaList();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.DeltaList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.DeltaList>)term.accept(this);
        jaxbObject.setDeltaList(newValue);
      }
// prop.Name   = SchText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSchText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSchText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.SchText>)term.accept(this);
        jaxbObject.setSchText(newValue);
      }
      getLogger().exiting(getClassName(), "visitOpText", jaxbObject);
      return objectFactory_.createOpText(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a OpText to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassPolyType(net.sourceforge.czt.oz.ast.ClassPolyType zedObject)
  {
    getLogger().entering(getClassName(), "visitClassPolyType", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassPolyType jaxbObject = objectFactory_.createClassPolyType();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Classes
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getClasses() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getClasses();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRefList>)term.accept(this);
        jaxbObject.setClasses(newValue);
      }
// prop.Name   = State
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getState() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getState();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Signature>)term.accept(this);
        jaxbObject.setState(newValue);
      }
// prop.Name   = Attribute
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.NameTypePair o : zedObject.getAttribute()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.NameTypePair>)r;
				  jaxbObject.getAttribute().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.NameTypePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = Operation
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.oz.ast.NameSignaturePair o : zedObject.getOperation()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair>)r;
				  jaxbObject.getOperation().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.oz.jaxb.gen.NameSignaturePair";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
// prop.Name   = RootClass
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getRootClass() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getRootClass();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.ClassRef>)term.accept(this);
        jaxbObject.setRootClass(newValue);
      }
      getLogger().exiting(getClassName(), "visitClassPolyType", jaxbObject);
      return objectFactory_.createClassPolyType(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassPolyType to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitClassUnionExpr(net.sourceforge.czt.oz.ast.ClassUnionExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitClassUnionExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.ClassUnionExpr jaxbObject = objectFactory_.createClassUnionExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Expr
// prop.isList = true
// prop.isEnum = false 
      {
    	                                                                                
        for (net.sourceforge.czt.z.ast.Expr o : zedObject.getExpr()) 
        {
			 	    javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> r = o.accept(this);
			  try 
			  {
				  				  				  				  				  				  
				  @SuppressWarnings("unchecked")
				  javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr> t = 
					(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Expr>)r;
				  jaxbObject.getExpr().add(t);
			  } 
			  catch (ClassCastException e)
			  {
				final String s = "net.sourceforge.czt.z.jaxb.gen.Expr";
				throw new net.sourceforge.czt.base.util.UnsupportedAstClassException("Could not cast JAXB result from JAXB.Term " + s);
			  }
		        }
      }
      getLogger().exiting(getClassName(), "visitClassUnionExpr", jaxbObject);
      return objectFactory_.createClassUnionExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a ClassUnionExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitInitialState(net.sourceforge.czt.oz.ast.InitialState zedObject)
  {
    getLogger().entering(getClassName(), "visitInitialState", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.InitialState jaxbObject = objectFactory_.createInitialState();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = Box
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getBox() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setBox(net.sourceforge.czt.z.jaxb.gen.Box.fromValue(zedObject.getBox().toString()));
      }
      getLogger().exiting(getClassName(), "visitInitialState", jaxbObject);
      return objectFactory_.createInitialState(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a InitialState to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitAnonOpExpr(net.sourceforge.czt.oz.ast.AnonOpExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitAnonOpExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.AnonOpExpr jaxbObject = objectFactory_.createAnonOpExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = OpText
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getOpText() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getOpText();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpText> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.OpText>)term.accept(this);
        jaxbObject.setOpText(newValue);
      }
      getLogger().exiting(getClassName(), "visitAnonOpExpr", jaxbObject);
      return objectFactory_.createAnonOpExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a AnonOpExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitPredExpr(net.sourceforge.czt.oz.ast.PredExpr zedObject)
  {
    getLogger().entering(getClassName(), "visitPredExpr", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.PredExpr jaxbObject = objectFactory_.createPredExpr();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
      getLogger().exiting(getClassName(), "visitPredExpr", jaxbObject);
      return objectFactory_.createPredExpr(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a PredExpr to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
  public javax.xml.bind.JAXBElement<? extends net.sourceforge.czt.z.jaxb.gen.Term> visitState(net.sourceforge.czt.oz.ast.State zedObject)
  {
    getLogger().entering(getClassName(), "visitState", zedObject);
    try {
      net.sourceforge.czt.oz.jaxb.gen.State jaxbObject = objectFactory_.createState();
      if (zedObject.hasAnn()) {
        java.util.List<Object> list = zedObject.getAnns();
        if (list.size() > 0) {
          jaxbObject.setAnns(visitAnnotations(list));
        }
      }
// prop.Name   = PrimaryDecl
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPrimaryDecl() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPrimaryDecl();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.PrimaryDecl> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.PrimaryDecl>)term.accept(this);
        jaxbObject.setPrimaryDecl(newValue);
      }
// prop.Name   = SecondaryDecl
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getSecondaryDecl() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getSecondaryDecl();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.SecondaryDecl> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.oz.jaxb.gen.SecondaryDecl>)term.accept(this);
        jaxbObject.setSecondaryDecl(newValue);
      }
// prop.Name   = Pred
// prop.isList = false
// prop.isEnum = false 
      if (zedObject.getPred() != null) {
        net.sourceforge.czt.base.ast.Term term = zedObject.getPred();
        
        @SuppressWarnings("unchecked")
        javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred> newValue = 
        	(javax.xml.bind.JAXBElement<net.sourceforge.czt.z.jaxb.gen.Pred>)term.accept(this);
        jaxbObject.setPred(newValue);
      }
// prop.Name   = Box
// prop.isList = false
// prop.isEnum = true 
      if (zedObject.getBox() != null) {
																											    	    	    	    	    	    	    	    	    	    
	    	    
        jaxbObject.setBox(net.sourceforge.czt.z.jaxb.gen.Box.fromValue(zedObject.getBox().toString()));
      }
      getLogger().exiting(getClassName(), "visitState", jaxbObject);
      return objectFactory_.createState(jaxbObject);
    }
    catch (javax.xml.bind.JAXBException exception) {
      String message =
        "class AstToJaxb: "
        + "Cannot transform a State to the corresponding "
        + "Jaxb class";
      throw new net.sourceforge.czt.util.CztException(message, exception);
    }
  }
}
