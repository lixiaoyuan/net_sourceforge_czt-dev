/* The following code was generated by JFlex 1.4.3 on 10/18/20 8:39 AM */


/* --------------------------Usercode Section------------------------ */
package net.sourceforge.czt.parser.circusconf;



import java.io.IOException;
import java.util.Properties;
import java.util.Stack;

import java_cup.runtime.Symbol;
import net.sourceforge.czt.parser.util.ErrorType;
import net.sourceforge.czt.parser.util.LatexCommand;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.LatexSym;
import net.sourceforge.czt.parser.util.LocInfo;
import net.sourceforge.czt.parser.util.LocInfoImpl;
import net.sourceforge.czt.parser.util.LocToken;
import net.sourceforge.czt.parser.util.LocTokenImpl;
import net.sourceforge.czt.parser.util.MarkupDirective;
import net.sourceforge.czt.parser.util.ParsePropertiesKeys;
import net.sourceforge.czt.parser.util.ScanException;
import net.sourceforge.czt.session.CommandException;
import net.sourceforge.czt.session.Dialect;
import net.sourceforge.czt.session.Key;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.Source;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.util.ZString;
//import java.util.logging.Level;

import net.sourceforge.czt.parser.z.ZParseError;
import net.sourceforge.czt.parser.z.ZParseMessage;


import net.sourceforge.czt.circus.util.CircusString;

import net.sourceforge.czt.parser.circus.CircusParseMessage;
import net.sourceforge.czt.parser.circus.CircusParseError;

import net.sourceforge.czt.circusconf.util.CircusConfString;



/**
 * <p>
*   The low-level latex to unicode scanner for Z Circus .
 *   See {@link LatexToUnicode} for a high level latex to unicode converter.
 * </p>
 * <p>
 *   This is a JFlex generated scanner for translating
 *   Z
 *   specifications written in the latex mark-up language into unicode.
 *   It provides tokens (instances of class {@link Symbol}) whose values
 *   are unicode strings and which contain line and column number
 *   information from the original latex file or stream.
 *   See {@link LatexSym} for a list of possible token kinds.
 * </p>
 * <p>
 *   In order to work properly, a map containing the latex mark-up function
 *   of the current section to be scanned is needed.  This map must be
 *   updated when a new section header is recognised.
 *   The {@link LatexMarkupParser} is
 *   responsible for this task, and should process the output of an instance
 *   of this class before it can be processed further.
 * </p>
 * <p>
 * Limitations:
 * </p>
 * <ul>
 *   <li>
 *     The name of a generic schema definition should not contain
 *     nested braces.
 *   </li>
 *   <li>
 *     Latex markup directives are recognised only outside of a
 *     formal paragraph and only after they have been defined.
 *   </li>
 * </ul>
 */
@SuppressWarnings("unused") 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/18/20 8:39 AM from the specification file
 * <tt>/root/czt-code/parser/parser-circusconf/target/generated-sources/parsergen-jflex/net/sourceforge/czt/parser/circusconf/Latex2Unicode.jflex</tt>
 */
public class Latex2Unicode implements ParsePropertiesKeys, LatexMarkupParser.LatexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MARKUP = 4;
  public static final int ERROR = 8;
  public static final int COMMENT_STATE = 6;
  public static final int YYINITIAL = 0;
  public static final int ZED = 2;
  public static final int CIRCUSTOOLSOFF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\3\1\44\1\1\2\0\1\2\22\0\1\10\2\0\1\46"+
    "\1\0\1\31\1\0\1\57\2\0\1\35\1\35\1\6\1\60\2\0"+
    "\1\45\1\12\1\12\1\12\1\12\1\12\1\12\1\12\1\12\1\12"+
    "\1\7\1\6\1\36\1\36\1\36\1\0\1\47\2\32\1\63\1\32"+
    "\1\62\3\32\1\65\2\32\1\56\1\32\1\67\1\66\3\32\1\61"+
    "\1\64\5\32\1\37\1\53\1\5\1\0\1\33\1\34\1\0\1\30"+
    "\1\16\1\13\1\25\1\22\1\43\1\23\1\40\1\14\1\32\1\21"+
    "\1\17\1\26\1\24\1\20\1\27\1\32\1\15\1\41\1\11\1\55"+
    "\1\32\1\42\1\52\1\32\1\54\1\50\1\35\1\51\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\3\0\1\3\2\0\2\1\2\4\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\2\2\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\1\23\1\24\2\25\1\26\4\3\5\0\1\11\1\27"+
    "\6\11\1\30\4\11\1\0\1\7\1\31\1\0\1\31"+
    "\1\32\1\33\1\31\1\34\2\23\7\0\11\11\2\32"+
    "\16\0\11\11\16\0\1\11\3\0\1\11\1\27\5\11"+
    "\16\0\3\11\6\0\1\11\1\35\4\11\10\0\1\36"+
    "\5\0\1\37\1\0\3\11\7\0\2\11\1\0\1\11"+
    "\14\0\2\36\4\0\2\40\3\11\7\0\1\41\1\11"+
    "\1\42\1\43\14\0\1\44\2\45\2\0\3\11\5\0"+
    "\1\46\15\0\1\47\1\0\2\11\12\0\1\24\5\0"+
    "\1\50\1\0\1\51\3\11\3\0\1\52\14\0\3\11"+
    "\2\0\1\53\1\54\1\55\3\0\1\56\3\0\1\57"+
    "\2\0\1\11\1\10\1\60\6\0\1\61\1\62\1\63"+
    "\1\0\1\11\1\0\1\64\2\0\1\65\2\0\1\66"+
    "\2\0\1\67\6\0\1\70\4\0\1\71\5\0\1\72"+
    "\2\0\1\71\2\0\1\71\1\73\1\0\1\71\1\0"+
    "\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u0268\0\u0268\0\u02d8"+
    "\0\u0268\0\u0268\0\u0310\0\u0268\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0428\0\u0460\0\u0268\0\u0268\0\u0498\0\u0268\0\u0268\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0268"+
    "\0\u0268\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u0268"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u03b8\0\u08c0\0\u0268\0\u03f0"+
    "\0\u03f0\0\u08f8\0\u0268\0\u0930\0\u0268\0\u0268\0\u0968\0\u09a0"+
    "\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0268"+
    "\0\u0d20\0\u0930\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u0700\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38"+
    "\0\u1c70\0\u0700\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u0268\0\u2098\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648"+
    "\0\u0268\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u0268\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u0700\0\u2a00\0\u2370\0\u0700\0\u2a38\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u0268\0\u0268\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u0268"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u0268\0\u3218\0\u3250"+
    "\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410"+
    "\0\u3448\0\u3480\0\u34b8\0\u3058\0\u34f0\0\u3528\0\u3560\0\u3598"+
    "\0\u35d0\0\u0268\0\u3608\0\u0268\0\u3640\0\u3678\0\u36b0\0\u36e8"+
    "\0\u3720\0\u3758\0\u0268\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870"+
    "\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30"+
    "\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u0268\0\u0268\0\u0268\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u0268\0\u3bf0\0\u3c28\0\u3c60\0\u0268\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u0700\0\u0268\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\u3e20\0\u3e58\0\u0268\0\u0268\0\u3e90\0\u3ec8\0\u3f00\0\u3f38"+
    "\0\u0268\0\u3f70\0\u3fa8\0\u0268\0\u3fe0\0\u4018\0\u4050\0\u4088"+
    "\0\u40c0\0\u0268\0\u40f8\0\u0268\0\u4130\0\u4050\0\u4168\0\u41a0"+
    "\0\u0268\0\u41d8\0\u4210\0\u4248\0\u4280\0\u4050\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u0268\0\u43d0\0\u4408\0\u4248\0\u4440"+
    "\0\u4478\0\u4280\0\u0268\0\u44b0\0\u4168\0\u44e8\0\u4408\0\u0268";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\12\1\13\23\12\1\14\43\12\1\13\23\12\1\15"+
    "\36\12\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\21\20\26\1\27\1\26\2\30\1\31\1\25"+
    "\5\26\1\21\1\26\1\16\1\32\1\33\1\34\1\26"+
    "\1\16\3\26\1\35\1\36\7\26\1\37\1\40\1\41"+
    "\1\40\1\37\1\42\2\37\1\40\33\37\1\40\23\37"+
    "\1\43\1\44\1\45\65\43\1\46\1\0\66\46\2\47"+
    "\1\50\2\47\1\51\3\47\20\52\1\47\1\52\4\47"+
    "\5\52\1\47\1\52\4\47\1\52\1\47\3\52\2\47"+
    "\7\52\5\0\1\53\135\0\1\54\14\0\5\12\1\0"+
    "\23\12\1\0\36\12\13\0\1\55\2\0\1\56\172\0"+
    "\1\57\37\0\1\17\66\0\1\60\1\0\3\60\1\61"+
    "\3\22\1\62\1\60\1\63\6\64\1\65\4\64\1\66"+
    "\1\67\1\60\1\64\1\60\1\70\2\60\3\64\1\71"+
    "\1\64\4\60\2\70\1\64\1\60\1\72\1\64\1\73"+
    "\2\60\1\74\6\64\1\0\3\25\3\0\2\25\25\0"+
    "\1\25\5\0\1\25\34\0\20\26\1\0\1\26\4\0"+
    "\5\26\1\0\1\26\4\0\1\26\1\0\3\26\2\0"+
    "\7\26\1\75\1\21\1\76\65\75\1\77\1\100\2\101"+
    "\1\77\1\102\2\103\1\101\20\103\1\104\1\103\2\77"+
    "\7\103\1\101\1\103\2\77\1\105\1\77\1\103\1\77"+
    "\3\103\2\77\7\103\1\0\1\40\66\0\1\106\1\0"+
    "\7\106\1\107\1\106\16\107\1\106\1\107\4\106\5\107"+
    "\6\106\1\107\1\106\3\107\2\106\7\107\1\0\1\44"+
    "\67\0\1\47\101\0\1\110\65\0\20\52\1\0\1\52"+
    "\4\0\5\52\1\0\1\52\4\0\1\52\1\0\3\52"+
    "\2\0\7\52\16\0\1\111\52\0\2\112\1\54\4\0"+
    "\1\54\33\0\1\54\4\0\1\113\32\0\1\114\75\0"+
    "\1\115\104\0\1\116\41\0\1\64\1\22\16\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\7\64\11\0\1\64\1\0\1\64\1\117\14\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\7\64\11\0\1\64\1\0\16\64\1\0\1\64\4\0"+
    "\5\64\6\0\1\64\1\0\3\64\2\0\7\64\11\0"+
    "\1\64\1\0\11\64\1\120\4\64\1\0\1\64\4\0"+
    "\5\64\6\0\1\64\1\0\3\64\2\0\7\64\11\0"+
    "\1\64\1\0\15\64\1\121\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\4\64\1\122\11\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\16\64\1\0\1\64\4\0\1\64\1\123\3\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\3\64\1\124\5\64\1\125\4\64\1\0\1\64"+
    "\4\0\5\64\6\0\1\64\1\0\3\64\2\0\7\64"+
    "\11\0\1\64\1\0\15\64\1\126\1\0\1\64\4\0"+
    "\5\64\6\0\1\64\1\0\3\64\2\0\7\64\11\0"+
    "\1\64\1\0\16\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\1\64\1\127\5\64\1\0"+
    "\1\21\66\0\1\130\1\0\7\130\1\131\1\130\16\131"+
    "\1\130\1\131\4\130\5\131\6\130\1\131\1\130\3\131"+
    "\2\130\7\131\1\132\2\100\65\132\11\0\1\107\1\0"+
    "\16\107\1\0\1\107\4\0\5\107\6\0\1\107\1\0"+
    "\3\107\2\0\7\107\14\0\1\133\75\0\1\134\45\0"+
    "\1\135\3\112\4\135\1\112\20\135\1\112\12\135\1\112"+
    "\4\135\1\136\16\135\50\113\1\0\1\137\16\113\15\0"+
    "\1\140\75\0\1\141\57\0\1\142\1\143\2\0\1\144"+
    "\7\0\1\145\12\0\1\146\1\147\35\0\1\64\1\0"+
    "\2\64\1\150\13\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\12\64\1\151\3\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\2\64\1\152\13\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\16\64\1\0\1\64\4\0\2\64\1\153\2\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\154\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\2\64\1\155\13\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\156\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\3\64\1\157\12\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\16\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\2\64\1\160\4\64\11\0\1\131\1\0"+
    "\16\131\1\0\1\131\4\0\5\131\6\0\1\131\1\0"+
    "\3\131\2\0\7\131\15\0\1\161\75\0\1\162\44\0"+
    "\1\135\2\0\26\135\1\112\36\135\1\136\2\113\26\136"+
    "\1\163\16\136\1\135\1\164\16\136\50\137\1\165\17\137"+
    "\13\0\1\166\70\0\1\167\113\0\1\170\53\0\1\171"+
    "\63\0\1\172\64\0\1\173\2\0\1\174\67\0\1\175"+
    "\63\0\1\176\64\0\1\64\1\0\1\177\15\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\7\64\1\0\3\200\4\0\1\200\1\64\1\0\16\64"+
    "\1\201\1\64\4\0\5\64\1\200\3\0\1\202\1\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\203\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\5\64\1\204\10\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\2\64\1\205\13\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\206\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\16\64\1\0\1\64\4\0\3\64\1\207\1\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\210\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\16\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\3\64\1\211\3\64\13\0\1\212\70\0"+
    "\1\213\53\0\1\136\3\163\4\136\1\163\20\136\1\163"+
    "\12\136\1\163\3\136\1\135\1\164\16\136\1\164\2\137"+
    "\26\164\1\214\16\164\1\215\17\164\50\165\1\0\17\165"+
    "\11\0\1\216\12\0\1\217\67\0\1\220\73\0\1\221"+
    "\52\0\1\142\26\0\1\222\40\0\1\223\76\0\1\224"+
    "\106\0\1\225\43\0\1\226\71\0\1\227\61\0\1\64"+
    "\1\0\3\64\1\230\5\64\1\231\1\64\1\232\2\64"+
    "\1\0\1\64\4\0\5\64\6\0\1\64\1\0\3\64"+
    "\2\0\7\64\1\0\3\200\4\0\1\200\20\0\1\201"+
    "\12\0\1\200\3\0\1\202\17\0\1\201\2\200\65\201"+
    "\11\0\1\233\1\0\1\234\7\0\1\235\4\0\1\236"+
    "\10\0\1\237\12\0\1\240\24\0\1\64\1\0\11\64"+
    "\1\241\4\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\11\0\1\64\1\0\7\64"+
    "\1\242\6\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\11\0\1\64\1\0\15\64"+
    "\1\243\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\14\64\1\244"+
    "\1\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\4\64\1\245"+
    "\11\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\16\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\4\64\1\246\2\64\11\0\1\247\43\0\1\250\36\0"+
    "\1\251\43\0\1\164\3\214\4\164\1\214\20\164\1\214"+
    "\12\164\1\214\3\164\1\215\17\164\1\215\2\165\26\215"+
    "\1\252\16\215\1\135\17\215\20\0\1\253\67\0\1\254"+
    "\50\0\3\220\4\0\1\220\20\0\1\255\12\0\1\220"+
    "\3\0\1\256\34\0\1\257\72\0\1\260\57\0\1\223"+
    "\1\0\1\261\31\0\1\223\1\261\1\262\34\0\1\142"+
    "\26\0\1\263\36\0\1\264\103\0\1\265\64\0\1\266"+
    "\56\0\1\64\1\0\4\64\1\267\11\64\1\0\1\64"+
    "\4\0\5\64\6\0\1\64\1\0\3\64\2\0\7\64"+
    "\11\0\1\64\1\0\5\64\1\270\10\64\1\0\1\64"+
    "\4\0\5\64\6\0\1\64\1\0\3\64\2\0\7\64"+
    "\11\0\1\64\1\0\1\64\1\271\14\64\1\0\1\64"+
    "\4\0\5\64\6\0\1\64\1\0\3\64\2\0\7\64"+
    "\40\0\1\272\43\0\1\273\75\0\1\274\117\0\1\275"+
    "\30\0\1\276\76\0\1\277\16\0\1\300\37\0\1\301"+
    "\1\0\16\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\11\0\1\64\1\0\6\64"+
    "\1\204\7\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\11\0\1\64\1\0\15\64"+
    "\1\302\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\16\64\1\0"+
    "\1\64\4\0\5\64\4\0\1\303\1\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\16\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\5\64\1\304\1\64\20\0\1\305\110\0\1\306\27\0"+
    "\3\251\4\0\1\251\20\0\1\307\12\0\1\251\3\0"+
    "\1\310\17\0\1\215\3\252\4\215\1\252\20\215\1\252"+
    "\12\215\1\252\3\215\1\135\1\136\16\215\20\0\1\311"+
    "\60\0\1\312\56\0\1\255\2\220\65\255\11\0\1\313"+
    "\1\0\1\314\7\0\1\315\4\0\1\316\10\0\1\317"+
    "\12\0\1\320\13\0\1\257\1\321\1\322\65\257\15\0"+
    "\1\323\64\0\1\261\32\0\1\261\1\262\33\0\1\262"+
    "\32\0\1\262\1\0\1\324\40\0\1\325\62\0\1\142"+
    "\26\0\1\326\25\0\1\266\1\327\1\330\65\266\11\0"+
    "\1\64\1\0\5\64\1\331\10\64\1\0\1\64\4\0"+
    "\5\64\6\0\1\64\1\0\3\64\2\0\7\64\11\0"+
    "\1\332\1\0\16\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\11\64\1\333\4\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\22\0\1\334\62\0"+
    "\1\335\76\0\1\336\70\0\1\337\102\0\1\340\54\0"+
    "\1\341\64\0\1\342\56\0\1\64\1\0\16\64\1\0"+
    "\1\64\4\0\2\64\1\343\2\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\11\0\1\64\1\0\10\64\1\344"+
    "\5\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\5\303\1\0\23\303\1\0\17\303"+
    "\1\345\16\303\11\0\1\64\1\0\16\64\1\0\1\64"+
    "\4\0\5\64\6\0\1\64\1\0\3\64\2\0\6\64"+
    "\1\346\20\0\1\347\60\0\1\350\56\0\1\307\2\251"+
    "\65\307\41\0\1\351\45\0\1\352\72\0\1\353\105\0"+
    "\1\354\43\0\1\355\75\0\1\356\117\0\1\357\30\0"+
    "\1\360\76\0\1\361\16\0\1\362\27\0\1\321\113\0"+
    "\1\363\43\0\1\364\1\365\7\0\1\324\32\0\1\324"+
    "\37\0\1\366\72\0\1\367\50\0\1\327\77\0\1\64"+
    "\1\0\1\370\15\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\7\64\1\371\6\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\11\0\1\64\1\0"+
    "\1\64\1\372\14\64\1\0\1\64\4\0\5\64\6\0"+
    "\1\64\1\0\3\64\2\0\7\64\20\0\1\373\62\0"+
    "\1\374\101\0\1\375\64\0\1\376\67\0\1\377\116\0"+
    "\1\u0100\31\0\1\u0101\65\0\1\64\1\0\7\64\1\204"+
    "\6\64\1\0\1\64\4\0\5\64\6\0\1\64\1\0"+
    "\3\64\2\0\7\64\17\0\1\u0102\70\0\1\u0103\62\0"+
    "\1\u0104\115\0\1\u0105\76\0\1\u0106\41\0\1\u0107\62\0"+
    "\1\u0108\76\0\1\u0109\70\0\1\u010a\102\0\1\u010b\54\0"+
    "\1\u010c\64\0\1\u010d\46\0\1\364\113\0\1\u010e\57\0"+
    "\1\u010f\63\0\1\64\1\0\6\64\1\u0110\7\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\7\64\11\0\1\64\1\0\16\64\1\0\1\64\4\0"+
    "\5\64\4\0\1\u0106\1\0\1\64\1\0\3\64\2\0"+
    "\7\64\11\0\1\64\1\0\14\64\1\u0111\1\64\1\0"+
    "\1\64\4\0\5\64\6\0\1\64\1\0\3\64\2\0"+
    "\7\64\15\0\1\u0112\127\0\1\u0113\34\0\1\u0114\110\0"+
    "\1\u0115\52\0\1\u0116\52\0\1\u0117\117\0\1\u0118\46\0"+
    "\1\u0119\107\0\1\u011a\47\0\1\u011b\47\0\5\u0106\1\0"+
    "\23\u0106\1\0\17\u0106\1\u011c\16\u0106\20\0\1\u011d\62\0"+
    "\1\u011e\101\0\1\u011f\64\0\1\u0120\67\0\1\u0121\116\0"+
    "\1\u0122\31\0\1\u0123\101\0\1\u0124\53\0\1\64\1\0"+
    "\3\64\1\u0125\3\64\1\u0126\6\64\1\0\1\64\4\0"+
    "\5\64\6\0\1\64\1\0\3\64\2\0\7\64\11\0"+
    "\1\64\1\0\15\64\1\u0127\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\22\0\1\u0128"+
    "\106\0\1\u0129\71\0\1\u012a\75\0\1\u012b\46\0\1\u012c"+
    "\53\0\1\u012d\73\0\1\u012e\66\0\1\u012f\72\0\1\u0130"+
    "\110\0\1\u0131\41\0\1\u0132\127\0\1\u0133\34\0\1\u0134"+
    "\110\0\1\u0135\52\0\1\u0136\52\0\1\u0137\67\0\1\64"+
    "\1\0\7\64\1\u0138\6\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\11\64\1\u0139\4\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\10\64\1\u013a\5\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\26\0\1\u013b"+
    "\71\0\1\u013c\20\0\1\u013d\67\0\1\u013e\67\0\1\u013f"+
    "\36\0\1\u0140\73\0\1\44\104\0\1\u0141\54\0\1\u0142"+
    "\104\0\1\u0143\46\0\1\u0144\106\0\1\u0145\71\0\1\u0146"+
    "\75\0\1\u0147\46\0\1\u0148\53\0\1\u0149\64\0\1\64"+
    "\1\0\10\64\1\u014a\5\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\12\64\1\u014b\3\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\11\0\1\64"+
    "\1\0\7\64\1\u0110\6\64\1\0\1\64\4\0\5\64"+
    "\6\0\1\64\1\0\3\64\2\0\7\64\51\0\1\u014c"+
    "\31\0\1\u014d\100\0\1\u014e\63\0\1\u014f\77\0\1\u0150"+
    "\65\0\1\u0151\71\0\1\u0152\20\0\1\u0153\67\0\1\u0154"+
    "\67\0\1\u0155\36\0\1\u0156\60\0\1\64\1\0\1\64"+
    "\1\u0157\14\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\11\0\1\u0158\127\0\1\u0159"+
    "\61\0\1\u015a\75\0\1\u015b\67\0\1\u015c\31\0\1\u015d"+
    "\55\0\3\u0155\4\0\1\u0155\20\0\1\u015e\12\0\1\u0155"+
    "\3\0\1\u015f\43\0\1\u0160\54\0\1\64\1\0\11\64"+
    "\1\u014b\4\64\1\0\1\64\4\0\5\64\6\0\1\64"+
    "\1\0\3\64\2\0\7\64\14\0\1\u0161\116\0\1\u0162"+
    "\25\0\3\u015b\4\0\1\u015b\20\0\1\u0163\12\0\1\u015b"+
    "\3\0\1\u0164\30\0\1\u0165\56\0\1\u015e\2\u0155\65\u015e"+
    "\50\u0166\1\u0167\1\u0168\16\u0166\51\0\1\u0169\36\0\1\u016a"+
    "\47\0\1\u0163\2\u015b\65\u0163\14\0\1\u016b\53\0\50\u0167"+
    "\1\0\1\u016c\16\u0167\1\u0166\3\u0168\4\u0166\1\u0168\20\u0166"+
    "\1\u016d\12\u0166\1\u0168\3\u0166\1\u0167\1\u0168\1\u0166\1\u016e"+
    "\14\u0166\24\0\1\u016f\63\0\1\u0170\47\0\50\u016c\1\0"+
    "\1\u0171\16\u016c\1\u016d\2\u0168\45\u016d\1\u0172\1\u0173\16\u016d"+
    "\51\0\1\u0174\42\0\1\u0175\43\0\1\u016c\3\u0171\4\u016c"+
    "\1\u0171\20\u016c\1\u0176\12\u016c\1\u0171\3\u016c\1\0\1\u0171"+
    "\1\u016c\1\u0177\14\u016c\1\u0172\2\u0178\45\u0172\1\u0179\1\u0176"+
    "\16\u0172\1\u016d\2\u0168\1\u0173\4\u016d\1\u0173\33\u016d\1\u0173"+
    "\3\u016d\1\u0172\1\u0173\1\u016d\1\u017a\14\u016d\51\0\1\u017b"+
    "\16\0\1\u0176\2\u0171\45\u0176\1\u0179\1\u017c\16\u0176\1\u0167"+
    "\3\u0178\4\u0167\1\u0178\20\u0167\1\u0172\12\u0167\1\u0178\3\u0167"+
    "\1\0\1\u016c\1\u0167\1\u017d\14\u0167\1\u0179\2\u017e\65\u0179"+
    "\1\u0176\2\u0171\1\u017c\4\u0176\1\u017c\33\u0176\1\u017c\3\u0176"+
    "\1\u0179\1\u017c\1\u0176\1\u017f\14\u0176\1\0\3\u017e\4\0"+
    "\1\u017e\20\0\1\u0179\12\0\1\u017e\6\0\1\u0180\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\3\0\1\1\2\0\2\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\1\11\4\1\10\11\2\1\2\11"+
    "\1\1\2\11\3\1\5\0\2\11\6\1\1\11\4\1"+
    "\1\0\1\1\1\11\1\0\2\1\1\11\1\1\2\11"+
    "\1\1\3\0\1\1\3\0\11\1\1\11\1\1\4\0"+
    "\2\1\10\0\11\1\2\0\3\1\11\0\1\1\3\0"+
    "\7\1\2\0\2\1\12\0\3\1\6\0\6\1\3\0"+
    "\1\1\4\0\1\1\5\0\1\11\1\0\3\1\7\0"+
    "\2\1\1\0\1\1\14\0\1\11\1\1\4\0\1\11"+
    "\4\1\7\0\4\1\14\0\2\11\1\1\2\0\3\1"+
    "\5\0\1\11\15\0\1\11\1\0\2\1\12\0\1\1"+
    "\5\0\1\11\1\0\1\11\3\1\3\0\1\11\14\0"+
    "\3\1\2\0\3\11\3\0\1\11\3\0\1\11\2\0"+
    "\2\1\1\11\6\0\2\11\1\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\2\0\1\1\2\0\1\11\1\0"+
    "\1\11\4\0\1\11\4\0\1\1\5\0\1\11\2\0"+
    "\1\1\2\0\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[384];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  /**
   * <p>
   * The latex markup function for the current section to be scanned.
   * It must be kept up to date by another class that recognises
   * section headers.
   * </p>
   */
  private LatexMarkupFunction latexCommands_ = null;



  /**
   * A stack of BraceType.
   * Each "{"-token pushs a BraceType on the stack,
   * each "}"-token pops a BraceType from the stack.
   *
   * A "^"-token followed by "{"-token pushs
   * a <code>BraceType.SUPER</code>
   * (no space to be inserted after the scripts)
   * or <code>BraceType.SUPER_SPACE</code>
   * (space has to be inserted after
   * the scripts) on the stack.  A "_"-token followed by "{"-token pushs
   * a <code>BraceType.SUB</code>
   * (no space to be inserted after the scripts)
   * or <code>BraceType.SUB_SPACE</code>
   * (space has to be inserted after
   * the scripts) on the stack.
   * The "{"-token that encloses a schema name
   * pushes a  <code>BraceType.NAME</code>
   * (space has to be inserted after closing brace) on the stack.
   * All other "{"-token just push a
   * <code>BraceType.BRACE</code> on the stack.
   */
  private Stack<BraceType> braceStack_ = new Stack<BraceType>();

  /**
   * A boolean indicating whether a space has to inserted after all
   * following subscripts and superscripts.
   */
  private boolean addSpace_ = false;

  private boolean catchingThmName_ = false;

  /**
   * True iff we are scanning a directive.
   */
  private boolean directive_ = false;

  /**
   * True iff within a axdef or gendef definition
   * It can be used to mark labelled predicates.
   */
   
  private boolean inAxiomaticBox_ = false;

   
  private boolean inSchemaBox_ = false;

  

  /**
   * The source to be scanned.
   */
  private Source source_ = null;

  private SectionInfo sectInfo_;

  private Properties properties_;

  /**
   * A stack of open \begin{something} commands.
   * The stack just contains the string inside the braces
   * ("something" in the example above).
   * This information is only used to check whether every \begin command
   * has a corresponding \end command (making it possible to
   * provide an error message and warning if not). It is not needed
   * by the scanner itself.
   */
  private final Stack<String> openBeginCommands_ = new Stack<String>();

  /**
   * Name of file from which source text originated.
   */
  private String filename_;

  /** 
   * Line number given in most recent %%Zloc directive.
   */
  private int locLine = 1;   

  /** 
   * Column number given in most recent %%Zloc directive.
   */
  private int locColumn = 1;

  /** 
   * Character number given in most recent %%Zloc directive.
   */
  private int locChar = 0;

  /**
   * Line number in source text of line following most recent %%Zloc directive.
   */
  private int locyyline = 1;

  /**
   * Character number in source text of character following most recent %%Zloc directive.
   */
  private int locyychar = 0;

  // dialect is a final attribute determined at construction time
  // depending on the extension being used (i.e. decided at XML transformation time).
  // this is useful for fine-tuned error information. If no extension is chosen we 
  // get a compilation error (i.e. final field not assigned).
  private final Dialect dialect_ = 
  						Dialect.CIRCUSCONF
    				  // otherwise it will be unassigned, hence a compilation error
    				  ;

  /**
   * Creates a new scanner for the source.
   */
  public Latex2Unicode(Source source, SectionInfo sectInfo, Properties properties)
    throws IOException
  {
    this(source.getReader());
    if (sectInfo == null) throw new NullPointerException();
    source_ = source;
    sectInfo_ = sectInfo;
    properties_ = properties;
    filename_ = source.toString();
    assert dialect_ !=null;
    if (!dialect_.equals(sectInfo.getDialect()))
    	throw new IllegalArgumentException("Incompatible dialects in Latex2Unicode scanner. " + dialect_.toString() +
    		" expected, but section manager dialect " + sectInfo.getDialect() + " found.");
  }
  
  /**
   * Low-level LaTeX scanner gets its dialect from the context and propagate to other scanners.
   */
  @Override
  public Dialect getDialect()
  {
  	assert dialect_.equals(sectInfo_.getDialect()) : "dialect = " + 
  				dialect_ + "; sectInfo.dialect = " + sectInfo_.getDialect();
  	return sectInfo_.getDialect();
  }

  public Source getSource()
  {
    return source_;
  }

  private String getLoc()
  {
    return filename_;
  }

  private LocInfo getLocation()
  {
    final int lineNo = locLine + yyline - locyyline;
    final int columnNo = yyline == locLine? locColumn + yycolumn : yycolumn;
    final int charNo = locChar + yychar - locyychar;
    return new LocInfoImpl(getDialect(), 
    											 getLoc(),
                           lineNo, columnNo,
                           charNo, yytext().length());
  }

  private boolean getBooleanProperty(String propertyKey)
  {
    if (properties_ == null) {
      return false;
    }
    return "true".equals(properties_.getProperty(propertyKey));
  }

  private LocToken result(String spelling)
    throws IOException
  {
    return result(LatexSym.UNICODE, spelling);
  }

  private LocToken result(LatexSym sym)
    throws IOException
  {
    return result(sym, yytext());
  }
  
  protected SectionInfo getSectionInfo()
  {
  	return sectInfo_;
  }

  private boolean debug_ = false;
  private long i = 1;
  private void debug(LatexSym sym, String spelling)
  {
      System.out.println("Latex2Unicode (" + i + "; "+ getDialect() +")  : " + spelling + "\t " + sym); i++;
      System.out.flush();
  }

  private LocToken result(LatexSym sym, String spelling)
    throws IOException
  {
    if (debug_) debug(sym, spelling);
    return new LocTokenImpl(sym, spelling, getLocation());
  }

  /**
   * Writes a space to the output and sets
   * <code>addSpace_</code> to <code>false</code>
   * if <code>addSpace_</code> is <code>true</code>.
   * Does nothing if <code>addSpace_</code> is
   * <code>false</code>.
   */
  private String addSpace()
    throws IOException
  {
    if (addSpace_) {
      addSpace_ = false;
      return ZString.SPACE;
    }
    return "";
  }

  /**
   * Returns a north east arrow if <code>string</code>
   * equals "^" and a south east arrow if
   * <code>string</code> equalas "_".
   * Throws an IllegalArgumentException for all other strings.
   */
  private String beginScript(String string)
  {
    if ("^".equals(string)) return ZString.NE;
    if ("_".equals(string)) return ZString.SE;
    throw new IllegalArgumentException("Invalid start LaTeX sub/super script character " + string + 
    	" for " + dialect_.toString() + " in Latex2Unicode parser.");
  }

  /**
   * Returns a south west arrow if <code>string</code>
   * equals "^" and a north west arrow if
   * <code>string</code> equalas "_".
   * Throws an IllegalArgumentException for all other strings.
   */
  private String endScript(String string)
  {
    if ("^".equals(string)) return ZString.SW;
    if ("_".equals(string)) return ZString.NW;
    throw new IllegalArgumentException("Invalid end LaTeX sub/super script character " + string + 
    	" for " + dialect_.toString() + " in Latex2Unicode parser.");
  }

  /**
   * Returns the latex mark-up function.
   * @see #setMarkupFunction
   */
  public LatexMarkupFunction getMarkupFunction()
  {
    return latexCommands_;
  }

  /**
   * Sets the latex mark-up function.  This is a mapping
   * from string (representing a latex command)
   * to {@link LatexCommand} containing the unicode representation.
   *
   * This map must be kept up to date to ensure proper working of
   * instances of this class.
   */
  public void setMarkupFunction(LatexMarkupFunction markupFunction)
  {
    latexCommands_ = markupFunction;
  }

  /**
   * Returns an unicode string representation of the given latex
   * command.
   *
   * @param latexCommand the latex command.
   * @param spaces indicates whether spaces should be added or not.
   * @return the unicode represention of the given latex command,
   *          or null if the command cannot be found.  Spaces are
   *          added (depending on the type of the command) if spaces
   *          is true.
   */
  private String toUnicode(String latexCommand, boolean spaces)
  {
    if (latexCommands_ == null) {
    	CztLogger.getLogger(Latex2Unicode.class).severe("Null latexCommands_ map! This should never happen, returning null." +
    		"Cannot tanslate to Unicode: " 
	    	+ latexCommand + " for " + dialect_.toString() + " in Latex2Unicode scanner.");
      return null;
    }
    MarkupDirective directive = (MarkupDirective)
      latexCommands_.getCommandDirective(latexCommand);
    if (directive == null) {
      return null;
    }
    String result = directive.getUnicode();
    if (spaces) {
      if (directive.addLeftSpace()) result = ZString.SPACE + result;
      if (directive.addRightSpace()) addSpace_ = true;
    }
    return result;
  }

  private void reportError(ErrorType type, ZParseMessage msg, String arg0)
  {
    reportError(type, msg, arg0, null);
  }

  private void reportError(ErrorType type, ZParseMessage msg,
                           String arg0, String info)
  {
    // TODO: what's this? To be used somewhere?
    //final Level level =
    //  ErrorType.ERROR.equals(type) ? Level.SEVERE : Level.WARNING;
    final LocInfo locInfo = getLocation();
    final Object[] args = { arg0, locInfo };
    ZParseError.report(sectInfo_, getSource(), type, msg, args, locInfo, info);
  }
  
  
  private void reportError(ErrorType type, CircusParseMessage msg,
                           String arg0, String info)
  {
    //final Level level =
    //  ErrorType.ERROR.equals(type) ? Level.SEVERE : Level.WARNING;
    final LocInfo locInfo = getLocation();
    final Object[] args = { arg0, locInfo };
    CircusParseError.report(sectInfo_, getSource(), type, msg, args, locInfo, info);
  }

  

  private void reportUnknownLatexCommand(String command)
  {
    ErrorType errorType = ErrorType.ERROR;
    if (getBooleanProperty(PROP_IGNORE_UNKNOWN_LATEX_COMMANDS)) {
      errorType = ErrorType.WARNING;
    }
    String info = null;
    if (isFuzzCommand(command)) {
      info = "Make sure your specification is ISO Standard Z conforming "
        + "or try to add fuzz_toolkit as a parent to get access to some "
        + "commonly used non-Standard latex commands.";
    }
    reportError(errorType,
                ZParseMessage.MSG_UNKNOWN_LATEX_COMMAND,
                command,
                info);
  }

  private boolean isFuzzCommand(String command)
  {
    if (sectInfo_ == null)
    {
    	CztLogger.getLogger(Latex2Unicode.class).severe("Null section infor object for checking Fuzz command " + command
    		+ " for dialect " + dialect_.toString() + ". Returning false.");
      return false;
    }
    else
    {
	    try {
	      Key<LatexMarkupFunction> key = new Key<LatexMarkupFunction>(
	        net.sourceforge.czt.util.Section.FUZZ_TOOLKIT.getName(), LatexMarkupFunction.class);
	      LatexMarkupFunction lmf = sectInfo_.get(key);
	      if (lmf.getCommandDirective(command) != null) return true;
	    }
	    catch (CommandException e) {
	    }
	    return false;
	  }
  }

  private void begin(String name)
  {
    openBeginCommands_.push(name);
  }

  private void end(String name)
  {
    if (openBeginCommands_.empty()) {
      reportError(ErrorType.ERROR,
                  ZParseMessage.MSG_UNMATCHED_BEGIN_END,
                  name);
    }
    else {
      String openCommand = openBeginCommands_.pop();
      if (! name.equals(openCommand)) {
        reportError(ErrorType.ERROR,
                    ZParseMessage.MSG_UNMATCHED_BEGIN_END,
                    openCommand);
      }
    }
  }

/*
  // yytext() might contain {IGNORE}* tokens when starting with ZSTATE strings...
  // put the longer strings first to avoid catching the smaller ones too early (e.g., retrievein before retrieve)
  private String retrieveZState(String yyt)
  {
    if (yyt.startsWith(ZString.ZSTATE))
      return ZString.ZSTATE;
    else if (yyt.startsWith(ZString.ZSTINIT))
      return ZString.ZSTINIT;
    else if (yyt.startsWith(ZString.ZSTFIN))
      return ZString.ZSTFIN;
    else if (yyt.startsWith(ZString.ZASTATE))
      return ZString.ZASTATE;
    else if (yyt.startsWith(ZString.ZCSTATE))
      return ZString.ZCSTATE;
    else if (yyt.startsWith(ZString.ZAINITIN))
      return ZString.ZAINITIN;
    else if (yyt.startsWith(ZString.ZCINITIN))
      return ZString.ZCINITIN;
    else if (yyt.startsWith(ZString.ZASTINIT))
      return ZString.ZASTINIT;
    else if (yyt.startsWith(ZString.ZCSTINIT))
      return ZString.ZCSTINIT;
    else if (yyt.startsWith(ZString.ZASTFIN))
      return ZString.ZASTFIN;
    else if (yyt.startsWith(ZString.ZAFINOUT))
      return ZString.ZAFINOUT;
    else if (yyt.startsWith(ZString.ZCFINOUT))
      return ZString.ZCFINOUT;
    else if (yyt.startsWith(ZString.ZCSTFIN))
      return ZString.ZCSTFIN;
    else if (yyt.startsWith(ZString.ZRETRIEVEIN))
      return ZString.ZRETRIEVEIN;
    else if (yyt.startsWith(ZString.ZRETRIEVEOUT))
      return ZString.ZRETRIEVEOUT;
    else if (yyt.startsWith(ZString.ZRETRIEVE))
      return ZString.ZRETRIEVE;
    else
      throw new ScanException(dialect_, "Unknown Z state " + yyt +  	
	    	" for " + dialect_.toString() + " in Latex2Unicode parser.", getLocation());
  }
*/

  /**
   * A brace type enumeration.
   */
  private enum BraceType
  {
    /**
     * Subscript enclosed in braces.
     */
    SUB,

    /**
     * Superscript enclodes in braces.
     */
    SUPER,

    /**
     * Subscript enclosed in braces and space has to be added after
     * all superscripts and subscripts.
     */
    SUB_SPACE,

    /**
     * Superscript enclosed in braces and space has to be added after
     * all superscripts and subscripts.
     */
    SUPER_SPACE,

    /**
     * The brace that starts a name, for example a schema name.
     */
    NAME,

    /**
     * Like name, but for theorem environments. This is needed to possibly add an space to the token stream
     * in circumstances like \\begin{theorem}{Test} e \in X \iff true \end{theorem}. Without the space, we
     * get "Teste" as the name (!)
     */
    THM_NAME,

    

    /**
     * All remaining braces.
     */
    BRACE;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Latex2Unicode(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Latex2Unicode(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LocToken next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCH);
          }
        case 60: break;
        case 46: 
          { yybegin(CIRCUSTOOLSOFF);
          }
        case 61: break;
        case 40: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("zed");
          return result(ZString.ZED);
          }
        case 62: break;
        case 39: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.PREWORD_MARKUP, null);
          }
        case 63: break;
        case 37: 
          { int start = "%%Zloc".length();
          while (Character.isWhitespace(yycharat(start))) {
            start++;
          }
          int finish = start + 1;
          while (Character.isDigit(yycharat(finish))) {
            finish++;
          }
          locLine = Integer.parseInt(yytext().substring(start, finish));
          start = finish + 1;
          finish = start + 1;
          while (Character.isDigit(yycharat(finish))) {
            finish++;
          }
          locColumn = Integer.parseInt(yytext().substring(start, finish));
          locChar = Integer.parseInt(yytext().substring(finish + 1, yytext().length() - 1));
          locyyline = yyline + 1;
          locyychar = yychar;
          }
        case 64: break;
        case 51: 
          { yybegin(ERROR);
          }
        case 65: break;
        case 22: 
          { yybegin(YYINITIAL);
          reportError(ErrorType.ERROR,
                      ZParseMessage.MSG_UNEXPECTED_TOKEN_NAME_EXPECTED,
                      yytext());
          }
        case 66: break;
        case 1: 
          { return result(LatexSym.TEXT);
          }
        case 67: break;
        case 30: 
          { return result(LatexSym.CHAR_MARKUP);
          }
        case 68: break;
        case 6: 
          { if (directive_) {
            yybegin(YYINITIAL);
            directive_ = false;            
            addSpace_ = false; // TODO: what about spaces?
            return result(LatexSym.END_MARKUP);
          }
          }
        case 69: break;
        case 20: 
          { // do nothing
          }
        case 70: break;
        case 13: 
          { String result = addSpace();
          braceStack_.push(BraceType.BRACE);
          return result(result);
          }
        case 71: break;
        case 58: 
          { end("circusaction");
          yybegin(YYINITIAL);
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 72: break;
        case 7: 
          { /* ignore whitespace (except NL) and comments */
          }
        case 73: break;
        case 11: 
          { // To aid low-level debugging: {FUNCTION} | {RELATION}({RELATION}|{WS})*
          String result = addSpace();
          if (braceStack_.empty()) {
            result += ZString.SPACE;
          }
          result += yytext().replaceAll("[ ]", "");
          if (braceStack_.empty()) {
            addSpace_ = true;
          }
          return result(result);
          }
        case 74: break;
        case 45: 
          { end("schema");
          inSchemaBox_ = false;

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 75: break;
        case 10: 
          { // To aid low-level debugging: {PUNCTATION}
          String result = addSpace();
          result += yytext();
          if (braceStack_.empty()) addSpace_ = true;
          return result(result);
          }
        case 76: break;
        case 18: 
          { /* ignore whitespaces */
          }
        case 77: break;
        case 16: 
          { String result = addSpace();
          result += result + ZString.SPACE + ZString.MINUS;
          if (braceStack_.empty()) {
            result += ZString.SPACE;
          }
          return result(result);
          }
        case 78: break;
        case 21: 
          { yybegin(YYINITIAL);
          }
        case 79: break;
        case 53: 
          // lookahead expression with fixed lookahead length
          yypushback(8);
          { // CZT extension: pass theorem name into Unicode output.
          yybegin(ZED);
          assert ! addSpace_;
          begin("theorem");
          braceStack_.push(BraceType.THM_NAME);
          //System.out.println("BEGIN-THM = " + yytext());
          return result(ZString.ZED);
          // leave the "theorem" to be treated as a name.
          }
        case 80: break;
        case 50: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("gendef");
          inAxiomaticBox_ = true;
          return result(ZString.GENAX);
          }
        case 81: break;
        case 27: 
          { String script = yytext().substring(0, 1);
          return result(beginScript(script)
                        + yytext().substring(yytext().length() - 1)
                        + endScript(script));
          }
        case 82: break;
        case 24: 
          { String result = addSpace();
          return result(result + yytext().substring(1));
          }
        case 83: break;
        case 57: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCHCHAR + ZString.GENCHAR);
          }
        case 84: break;
        case 43: 
          { end("circus");
          yybegin(YYINITIAL);
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 85: break;
        case 3: 
          { // do nothing
         //
         //String result = addSpace();
         //result += yytext();
         //return result(result);
          }
        case 86: break;
        case 28: 
          { String script = yytext().substring(0, 1);
          if ("^".equals(script)) {
            if (addSpace_) {
              braceStack_.push(BraceType.SUPER_SPACE);
            } else {
              braceStack_.push(BraceType.SUPER);
            }
          } else if ("_".equals(script)) {
            if (addSpace_) {
              braceStack_.push(BraceType.SUB_SPACE);
            } else {
              braceStack_.push(BraceType.SUB);
            }
          }
          addSpace_ = false;
          return result(beginScript(script));
          }
        case 87: break;
        case 36: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.INWORD_MARKUP, null);
          }
        case 88: break;
        case 8: 
          { String result = addSpace();
          result += ZString.SPACE;
          return result(result);
          }
        case 89: break;
        case 48: 
          { end("theorem");

             yybegin(YYINITIAL);

          catchingThmName_ = false;
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 90: break;
        case 5: 
          { // To aid low-level debugging: .
          String result = addSpace();
          result += yytext();
          //System.out.println("CATCH-ALL = '" + result + "'");
          return result(result);
          }
        case 91: break;
        case 34: 
          { // TODO: add labellel predicates
          // do nothing for now
          assert inAxiomaticBox_ ;
          }
        case 92: break;
        case 35: 
          { String result = addSpace() + "section";
          addSpace_ = true;
          return result(LatexSym.SECTION, result);
          }
        case 93: break;
        case 26: 
          { String result = "";
          String script = yytext().substring(0, 1);
          String command = yytext().substring(yytext().indexOf("\\"));
          String zstring = toUnicode(command, false);
          result += beginScript(script);
          if (zstring != null) {
            result += zstring;
          } else {
            reportUnknownLatexCommand(command);
            result += command.substring(1);
          }
          result += endScript(script);
          return result(result);
          }
        case 94: break;
        case 23: 
          { String result = addSpace();
          return result(result + ZString.NLCHAR);
          }
        case 95: break;
        case 15: 
          { String result = addSpace();
          return result(result + ZString.PRIME);
          }
        case 96: break;
        case 33: 
          { String result = addSpace() + ZString.SPACE + "parents";
          addSpace_ = true;
          return result(LatexSym.PARENTS, result);
          }
        case 97: break;
        case 14: 
          { String result = "";
          if (braceStack_.empty()) {
            final ErrorType errorType = ErrorType.ERROR;
            reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "}");
            return result(result);
          }
          BraceType brace = (BraceType) braceStack_.pop();
          assert ! addSpace_;
          if (brace.equals(BraceType.SUPER)) {
            result += ZString.SW;
          } else if (brace.equals(BraceType.SUPER_SPACE)) {
            result += ZString.SW;
            addSpace_ = true;
          } else if (brace.equals(BraceType.SUB)) {
            result += ZString.NW;
          } else if (brace.equals(BraceType.SUB_SPACE)) {
            result += ZString.NW;
            addSpace_ = true;
          } else if (brace.equals(BraceType.NAME)) {
            result += ZString.SPACE;
          }
          // Leo: I don't like this assymetry. ThmName should be just like any other name!
          //      \vdash? theorems with just a Name are not a good idea (!)
          else if (brace.equals(BraceType.THM_NAME))
          {
            //seenThm_ = false;
            // up to here, the Theorem NAME must have been seen... !! NO. This is the \begin{theorem '}'--- brace !!! useless...
            catchingThmName_ = true;
            result += ZString.SPACE;
          }
          // this is to flag that "thmName" catching has finished.
          else if (brace.equals(BraceType.BRACE) && catchingThmName_)
          {
            catchingThmName_ = false;
            result += ZString.SPACE;
          }
          //System.out.println("CLOSING-BRACE " + brace.toString() + " catchingThmName_ = " + catchingThmName_ + " = '" + result + "'");
          return result(result);
          }
        case 98: break;
        case 55: 
          { yybegin(YYINITIAL);
         reportError(ErrorType.ERROR,
                     CircusParseMessage.MSG_UNMATCHED_CIRCUSTOOLS_OFF,
                     yytext(), null);
          }
        case 99: break;
        case 32: 
          { int position = "%%Zfile".length();
          while (Character.isWhitespace(yycharat(position))) {
            position++;
          }
          filename_ = yytext().substring(position, yytext().length() - 1);
          }
        case 100: break;
        case 49: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("circus");                    
          return result(CircusString.CIRCUS);
          }
        case 101: break;
        case 38: 
          { end("zed");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 102: break;
        case 25: 
          { String message = "Unexpected subscript or superscript " + yytext() + 
          	" for " + dialect_.toString() + " in Latex2Unicode parser.";
          throw new ScanException(dialect_, message, getLocation());
          }
        case 103: break;
        case 44: 
          { end("gendef");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          inAxiomaticBox_ = false;
          return result(LatexSym.END, result);
          }
        case 104: break;
        case 29: 
          { String result = addSpace();
          return result(result + ZString.SPACE + ZString.VL + ZString.SPACE);
          }
        case 105: break;
        case 56: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("zsection");
          return result(LatexSym.SECT, ZString.ZED);
          }
        case 106: break;
        case 47: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("axdef");
          inAxiomaticBox_ = true;
          return result(ZString.AX);
          }
        case 107: break;
        case 4: 
          { yybegin(COMMENT_STATE);
          }
        case 108: break;
        case 2: 
          { // To aid low-level debugging: ({LETTER} | [0-9])*
          String result = addSpace();
          result += yytext();
          
          //System.out.println("LEXING-DECORWORD AFTER FLAG (" + catchingThmName_ + ") = '" + result + "'");
          return result(result);
          }
        case 109: break;
        case 41: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.POSTWORD_MARKUP, null);
          }
        case 110: break;
        case 42: 
          { end("axdef");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          inAxiomaticBox_ = false;
          return result(LatexSym.END, result);
          }
        case 111: break;
        case 31: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.WORD_MARKUP, null);
          }
        case 112: break;
        case 19: 
          { yybegin(ZED);
          return result(LatexSym.NAME);
          }
        case 113: break;
        case 59: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("circusaction");                    
          return result(CircusString.CIRCUSACTION);
          }
        case 114: break;
        case 52: 
          { end("zsection");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 115: break;
        case 9: 
          { String result = addSpace();
          boolean spaces = braceStack_.empty();
          String zstring = toUnicode(yytext(), spaces);
          if (zstring != null) {
            result += zstring;
          }
          else {
            reportUnknownLatexCommand(yytext());
            if (spaces) result += ZString.SPACE;
            result += yytext().substring(1);
            if (spaces) result += ZString.SPACE;
          }
          return result(result);
          }
        case 116: break;
        case 12: 
          { String result = addSpace();
          return result(result + ZString.SPACE + ZString.SPOT + ZString.SPACE);
          }
        case 117: break;
        case 17: 
          { yybegin(YYINITIAL);
          reportError(ErrorType.ERROR,
                      ZParseMessage.MSG_UNEXPECTED_TOKEN,
                      yytext());
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
