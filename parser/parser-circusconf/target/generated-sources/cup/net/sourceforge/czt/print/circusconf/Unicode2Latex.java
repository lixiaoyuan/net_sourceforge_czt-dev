
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Sun Oct 18 08:40:56 UTC 2020
//----------------------------------------------------

package net.sourceforge.czt.print.circusconf;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java_cup.runtime.Symbol;
import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.PerformanceSettings;
import net.sourceforge.czt.parser.util.CztError;
import net.sourceforge.czt.parser.util.CztScanner;
import net.sourceforge.czt.parser.util.DebugUtils;
import net.sourceforge.czt.parser.util.Decorword;
import net.sourceforge.czt.parser.util.ErrorType;
import net.sourceforge.czt.parser.util.LatexCommand;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.LocInfo;
import net.sourceforge.czt.parser.util.LocInfoImpl;
import net.sourceforge.czt.parser.util.LocInt;
import net.sourceforge.czt.parser.util.LocString;
import net.sourceforge.czt.parser.util.MarkupDirective;
import net.sourceforge.czt.parser.util.MarkupException;
import net.sourceforge.czt.print.z.ZPrintError;
import net.sourceforge.czt.print.z.ZPrintMessage;
import net.sourceforge.czt.print.util.PrintException;
import net.sourceforge.czt.print.util.PrintPropertiesKeys;
import net.sourceforge.czt.session.CommandException;
import net.sourceforge.czt.session.Dialect;
import net.sourceforge.czt.session.Key;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.session.Source;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.ast.Directive;
import net.sourceforge.czt.z.ast.DirectiveType;
import net.sourceforge.czt.z.ast.LatexMarkupPara;
import net.sourceforge.czt.z.ast.LocAnn;
import net.sourceforge.czt.z.ast.Parent;
import net.sourceforge.czt.z.ast.ZSect;
import net.sourceforge.czt.z.util.ZChar;
import net.sourceforge.czt.z.util.ZString;
import net.sourceforge.czt.print.z.WhereWord;
import net.sourceforge.czt.circus.util.CircusString;
import net.sourceforge.czt.circusconf.util.CircusConfString;

/** CUP v0.11a czt01 beta generated parser.
  * @version Sun Oct 18 08:40:56 UTC 2020
  */
public class Unicode2Latex extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Unicode2Latex() {super();}

  /** Constructor which sets the default scanner. */
  public Unicode2Latex(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Unicode2Latex(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\006\000\002\007\004\000\002\011\003\000\002" +
    "\011\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\002\000\002\006\007\000\002\006\006\000\002\006\005" +
    "\000\002\006\007\000\002\006\005\000\002\006\010\000" +
    "\002\006\005\000\002\006\005\000\002\004\003\000\002" +
    "\004\005\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\016\005" +
    "\000\002\023\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\014\004\000\002\014\002\000" +
    "\002\021\003\000\002\021\003\000\002\022\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\042\002\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\034\ufffc\035\ufffc\057\007\060\004\064\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\001\002\000" +
    "\020\016\071\017\067\020\070\021\065\022\077\034\062" +
    "\035\100\001\002\000\004\002\156\001\002\000\036\002" +
    "\001\016\071\017\067\020\070\021\065\022\077\034\062" +
    "\035\100\064\075\065\073\066\063\067\072\070\064\071" +
    "\076\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\024" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\057\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001" +
    "\002\000\112\004\016\005\024\006\045\007\047\010\044" +
    "\011\051\012\041\013\011\014\032\015\052\024\046\030" +
    "\022\031\012\032\043\033\054\036\013\037\027\040\017" +
    "\041\036\042\055\043\030\044\015\045\021\046\023\047" +
    "\035\050\042\051\025\052\056\053\033\054\060\055\034" +
    "\057\040\062\050\063\020\072\057\073\061\001\002\000" +
    "\116\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\023\uffcc\024\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc" +
    "\056\uffcc\057\uffcc\062\uffcc\063\uffcc\072\uffcc\073\uffcc\001" +
    "\002\000\116\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\023\uffdf\024" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\062\uffdf\063\uffdf\072\uffdf\073" +
    "\uffdf\001\002\000\116\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\023" +
    "\uffc9\024\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\062\uffc9\063\uffc9\072" +
    "\uffc9\073\uffc9\001\002\000\116\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\023\uffe2\024\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\062\uffe2\063" +
    "\uffe2\072\uffe2\073\uffe2\001\002\000\116\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\023\uffbd\024\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062" +
    "\uffbd\063\uffbd\072\uffbd\073\uffbd\001\002\000\116\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\023\uffd3\024\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\062\uffd3\063\uffd3\072\uffd3\073\uffd3\001\002\000\116" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\023\uffc7\024\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\062\uffc7\063\uffc7\072\uffc7\073\uffc7\001\002" +
    "\000\116\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\023\uffdc\024\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\062\uffdc\063\uffdc\072\uffdc\073\uffdc" +
    "\001\002\000\116\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\023\uffbc" +
    "\024\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\063\uffbc\072\uffbc" +
    "\073\uffbc\001\002\000\116\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\023\uffd9\024\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\062\uffd9\063\uffd9" +
    "\072\uffd9\073\uffd9\001\002\000\116\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\023\uffc5\024\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\062\uffc5" +
    "\063\uffc5\072\uffc5\073\uffc5\001\002\000\116\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\023\uffd2\024\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2" +
    "\062\uffd2\063\uffd2\072\uffd2\073\uffd2\001\002\000\116\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\023\uffc2\024\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\062\uffc2\063\uffc2\072\uffc2\073\uffc2\001\002\000" +
    "\116\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\024\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\062\uffe3\063\uffe3\072\uffe3\073\uffe3\001" +
    "\002\000\116\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\023\uffc8\024" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\062\uffc8\063\uffc8\072\uffc8\073" +
    "\uffc8\001\002\000\116\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\023" +
    "\uffbe\024\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\072" +
    "\uffbe\073\uffbe\001\002\000\122\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\062\uffb6\063\uffb6\072\uffb6\073\uffb6\001\002\000\116" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\023\uffcb\024\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\062\uffcb\063\uffcb\072\uffcb\073\uffcb\001\002" +
    "\000\116\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\023\uffc0\024\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\062\uffc0\063\uffc0\072\uffc0\073\uffc0" +
    "\001\002\000\116\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\023\uffba" +
    "\024\uffba\030\uffba\031\uffba\032\uffba\033\uffba\036\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\062\uffba\063\uffba\072\uffba" +
    "\073\uffba\001\002\000\116\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\023\uffc4\024\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4" +
    "\072\uffc4\073\uffc4\001\002\000\116\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\023\uffc6\024\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6" +
    "\063\uffc6\072\uffc6\073\uffc6\001\002\000\116\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\023\uffe0\024\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\062\uffe0\063\uffe0\072\uffe0\073\uffe0\001\002\000\004\002" +
    "\uffff\001\002\000\116\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\023" +
    "\uffcd\024\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\057\uffcd\062\uffcd\063\uffcd\072" +
    "\uffcd\073\uffcd\001\002\000\116\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\023\uffc3\024\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\062\uffc3\063" +
    "\uffc3\072\uffc3\073\uffc3\001\002\000\116\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\023\uffde\024\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\062" +
    "\uffde\063\uffde\072\uffde\073\uffde\001\002\000\116\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\023\uffcf\024\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\062\uffcf\063\uffcf\072\uffcf\073\uffcf\001\002\000\116" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\023\uffd1\024\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\062\uffd1\063\uffd1\072\uffd1\073\uffd1\001\002" +
    "\000\122\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\062\uffb7\063\uffb7" +
    "\072\uffb7\073\uffb7\001\002\000\116\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\023\uffd0\024\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0" +
    "\063\uffd0\072\uffd0\073\uffd0\001\002\000\116\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\023\uffdb\024\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\062\uffdb\063\uffdb\072\uffdb\073\uffdb\001\002\000\116\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\023\uffce\024\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\uffce\062\uffce\063\uffce\072\uffce\073\uffce\001\002\000" +
    "\116\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\023\uffca\024\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\062\uffca\063\uffca\072\uffca\073\uffca\001" +
    "\002\000\116\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\023\uffda\024" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\062\uffda\063\uffda\072\uffda\073" +
    "\uffda\001\002\000\116\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\023" +
    "\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\062\uffdd\063\uffdd\072" +
    "\uffdd\073\uffdd\001\002\000\116\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\023\uffbf\024\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\062\uffbf\063" +
    "\uffbf\072\uffbf\073\uffbf\001\002\000\116\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\023\uffc1\024\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\062" +
    "\uffc1\063\uffc1\072\uffc1\073\uffc1\001\002\000\122\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\062\uffb5\063\uffb5\072\uffb5\073\uffb5" +
    "\001\002\000\116\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\023\uffbb" +
    "\024\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb\063\uffbb\072\uffbb" +
    "\073\uffbb\001\002\000\116\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\023\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\063\uffd4" +
    "\072\uffd4\073\uffd4\001\002\000\112\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\023\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\062\uffe1\063\uffe1\072\uffe1" +
    "\073\uffe1\001\002\000\112\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\024\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\062\uffe7\063\uffe7\072\uffe7\073\uffe7" +
    "\001\002\000\112\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\024\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\062\uffe5\063\uffe5\072\uffe5\073\uffe5\001\002" +
    "\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1\024\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001\002\000\036" +
    "\002\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\034" +
    "\ufff9\035\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\071\ufff9\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\023\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1" +
    "\001\002\000\010\024\uffb8\072\uffb8\073\uffb8\001\002\000" +
    "\114\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\024\uffb8\025\124\026" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\062\uffb8\063\uffb8\072\uffb8\073\uffb8\001\002\000" +
    "\112\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\024\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\062\uffe6\063\uffe6\072\uffe6\073\uffe6\001\002\000\036\002" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\034\uffe9" +
    "\035\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\024" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001" +
    "\002\000\036\002\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\034\ufffa\035\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\001\002\000\112\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\024\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\062\uffe4\063\uffe4\072" +
    "\uffe4\073\uffe4\001\002\000\010\024\uffb8\072\uffb8\073\uffb8" +
    "\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1" +
    "\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001\002" +
    "\000\036\002\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\034\ufffb\035\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\001\002\000\036\002\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\034\ufffd\035\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\001\002\000" +
    "\112\004\016\005\024\006\045\007\047\010\044\011\051" +
    "\012\041\013\011\014\032\015\052\023\104\024\046\030" +
    "\022\031\012\032\043\033\054\036\013\037\027\040\017" +
    "\041\036\042\055\043\030\044\015\045\021\046\023\047" +
    "\035\050\042\051\025\052\056\053\033\054\060\055\034" +
    "\062\050\063\020\072\057\073\061\001\002\000\040\002" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\034\uffea" +
    "\035\uffea\061\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\071\uffea\001\002\000\010\024\046\072\057\073\061" +
    "\001\002\000\112\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\024\uffb9" +
    "\026\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\062\uffb9\063\uffb9\072\uffb9\073\uffb9\001\002" +
    "\000\004\006\110\001\002\000\004\073\061\001\002\000" +
    "\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1\024\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001\002\000\112\004" +
    "\016\005\024\006\045\007\047\010\044\011\051\012\041" +
    "\013\011\014\032\015\052\023\113\024\046\030\022\031" +
    "\012\032\043\033\054\036\013\037\027\040\017\041\036" +
    "\042\055\043\030\044\015\045\021\046\023\047\035\050" +
    "\042\051\025\052\056\053\033\054\060\055\034\062\050" +
    "\063\020\072\057\073\061\001\002\000\040\002\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\034\uffec\035\uffec" +
    "\061\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071" +
    "\uffec\001\002\000\012\007\117\024\046\072\057\073\061" +
    "\001\002\000\012\007\uffd6\024\uffd6\072\uffd6\073\uffd6\001" +
    "\002\000\012\007\uffd8\024\uffd8\072\uffd8\073\uffd8\001\002" +
    "\000\112\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\023\uffd5\024\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\062\uffd5\063\uffd5\072\uffd5\073\uffd5\001\002\000\012" +
    "\007\uffd7\024\uffd7\072\uffd7\073\uffd7\001\002\000\112\004" +
    "\016\005\024\006\045\007\047\010\044\011\051\012\041" +
    "\013\011\014\032\015\052\024\046\030\022\031\012\032" +
    "\043\033\054\036\013\037\027\040\017\041\036\042\055" +
    "\043\030\044\015\045\021\046\023\047\035\050\042\051" +
    "\025\052\056\053\033\054\060\055\034\056\122\062\050" +
    "\063\020\072\057\073\061\001\002\000\036\002\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\034\uffe8\035\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\001" +
    "\002\000\112\004\016\005\024\006\045\007\047\010\044" +
    "\011\051\012\041\013\011\014\032\015\052\024\046\026" +
    "\132\030\022\031\012\032\043\033\054\036\013\037\027" +
    "\040\017\041\036\042\055\043\030\044\015\045\021\046" +
    "\023\047\035\050\042\051\025\052\056\053\033\054\060" +
    "\055\034\062\050\063\020\072\057\073\061\001\002\000" +
    "\004\073\061\001\002\000\112\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\023\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\062\uffe1\063\uffe1\072\uffe1\073" +
    "\uffe1\001\002\000\112\004\016\005\024\006\045\007\047" +
    "\010\044\011\051\012\041\013\011\014\032\015\052\023" +
    "\127\024\046\030\022\031\012\032\043\033\054\036\013" +
    "\037\027\040\017\041\036\042\055\043\030\044\015\045" +
    "\021\046\023\047\035\050\042\051\025\052\056\053\033" +
    "\054\060\055\034\062\050\063\020\072\057\073\061\001" +
    "\002\000\040\002\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\034\ufff1\035\ufff1\061\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\001\002\000\112\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\023\uffe1\024\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\062\uffe1\063" +
    "\uffe1\072\uffe1\073\uffe1\001\002\000\004\023\142\001\002" +
    "\000\010\024\uffb8\072\uffb8\073\uffb8\001\002\000\010\024" +
    "\046\072\057\073\134\001\002\000\014\023\ufff2\024\ufff2" +
    "\027\ufff2\072\ufff2\073\ufff2\001\002\000\014\023\ufff8\024" +
    "\046\027\141\072\057\073\140\001\002\000\014\023\ufff3" +
    "\024\ufff3\027\ufff3\072\ufff3\073\ufff3\001\002\000\014\023" +
    "\ufff4\024\ufff4\027\ufff4\072\ufff4\073\ufff4\001\002\000\014" +
    "\023\ufff5\024\ufff5\027\ufff5\072\ufff5\073\ufff5\001\002\000" +
    "\014\023\ufff6\024\ufff6\027\ufff6\072\ufff6\073\ufff6\001\002" +
    "\000\040\002\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\034\ufff0\035\ufff0\061\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\001\002\000\112\004\016\005" +
    "\024\006\045\007\047\010\044\011\051\012\041\013\011" +
    "\014\032\015\052\023\ufff7\024\046\030\022\031\012\032" +
    "\043\033\054\036\013\037\027\040\017\041\036\042\055" +
    "\043\030\044\015\045\021\046\023\047\035\050\042\051" +
    "\025\052\056\053\033\054\060\055\034\062\050\063\020" +
    "\072\057\073\061\001\002\000\010\024\046\072\057\073" +
    "\061\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023" +
    "\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\062\uffe1\063\uffe1\072\uffe1\073\uffe1\001" +
    "\002\000\112\004\016\005\024\006\045\007\047\010\044" +
    "\011\051\012\041\013\011\014\032\015\052\023\147\024" +
    "\046\030\022\031\012\032\043\033\054\036\013\037\027" +
    "\040\017\041\036\042\055\043\030\044\015\045\021\046" +
    "\023\047\035\050\042\051\025\052\056\053\033\054\060" +
    "\055\034\062\050\063\020\072\057\073\061\001\002\000" +
    "\040\002\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\034\uffee\035\uffee\061\uffee\064\uffee\065\uffee\066\uffee\067" +
    "\uffee\070\uffee\071\uffee\001\002\000\112\004\016\005\024" +
    "\006\045\007\047\010\044\011\051\012\041\013\011\014" +
    "\032\015\052\023\151\024\046\030\022\031\012\032\043" +
    "\033\054\036\013\037\027\040\017\041\036\042\055\043" +
    "\030\044\015\045\021\046\023\047\035\050\042\051\025" +
    "\052\056\053\033\054\060\055\034\062\050\063\020\072" +
    "\057\073\061\001\002\000\040\002\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\034\uffef\035\uffef\061\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\001\002" +
    "\000\112\004\016\005\024\006\045\007\047\010\044\011" +
    "\051\012\041\013\011\014\032\015\052\023\153\024\046" +
    "\030\022\031\012\032\043\033\054\036\013\037\027\040" +
    "\017\041\036\042\055\043\030\044\015\045\021\046\023" +
    "\047\035\050\042\051\025\052\056\053\033\054\060\055" +
    "\034\062\050\063\020\072\057\073\061\001\002\000\040" +
    "\002\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\034" +
    "\uffed\035\uffed\061\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\001\002\000\112\004\016\005\024\006" +
    "\045\007\047\010\044\011\051\012\041\013\011\014\032" +
    "\015\052\023\155\024\046\030\022\031\012\032\043\033" +
    "\054\036\013\037\027\040\017\041\036\042\055\043\030" +
    "\044\015\045\021\046\023\047\035\050\042\051\025\052" +
    "\056\053\033\054\060\055\034\062\050\063\020\072\057" +
    "\073\061\001\002\000\040\002\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\034\uffeb\035\uffeb\061\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\001\002\000" +
    "\004\002\000\001\002\000\004\061\160\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\002\004\003\005\001\001\000\004\006" +
    "\156\001\001\000\002\001\001\000\012\004\100\005\101" +
    "\006\065\010\073\001\001\000\004\013\007\001\001\000" +
    "\014\012\025\020\052\021\013\022\030\023\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\151" +
    "\001\001\000\002\001\001\000\004\013\147\001\001\000" +
    "\004\014\143\001\001\000\004\014\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\104\001\001" +
    "\000\004\013\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\025\020\052\021\013\022\030\023\036" +
    "\001\001\000\002\001\001\000\010\021\105\022\030\023" +
    "\106\001\001\000\002\001\001\000\004\016\110\001\001" +
    "\000\006\017\113\023\114\001\001\000\004\013\111\001" +
    "\001\000\014\012\025\020\052\021\013\022\030\023\036" +
    "\001\001\000\002\001\001\000\010\021\115\022\030\023" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\025\020\052\021" +
    "\013\022\030\023\036\001\001\000\002\001\001\000\016" +
    "\007\130\012\127\020\052\021\105\022\030\023\036\001" +
    "\001\000\004\023\124\001\001\000\004\013\125\001\001" +
    "\000\014\012\025\020\052\021\013\022\030\023\036\001" +
    "\001\000\002\001\001\000\004\013\142\001\001\000\002" +
    "\001\001\000\004\014\132\001\001\000\006\021\105\022" +
    "\030\001\001\000\004\015\134\001\001\000\010\011\136" +
    "\021\135\022\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\025\020\052\021\013\022\030\023\036\001" +
    "\001\000\010\021\105\022\030\023\144\001\001\000\004" +
    "\013\145\001\001\000\014\012\025\020\052\021\013\022" +
    "\030\023\036\001\001\000\002\001\001\000\014\012\025" +
    "\020\052\021\013\022\030\023\036\001\001\000\002\001" +
    "\001\000\014\012\025\020\052\021\013\022\030\023\036" +
    "\001\001\000\002\001\001\000\014\012\025\020\052\021" +
    "\013\022\030\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Unicode2Latex$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Unicode2Latex$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Unicode2Latex$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** User initialization code. */
  @Override
  public void user_init() throws java.lang.Exception
    {

    //share the operator table between the action code and the parser code
    action_obj.source_ = source_;
    action_obj.sectInfo_ = sectInfo_;
    action_obj.dialect_ = dialect_;

    }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return local_next_token(); 
    }


  public static final Map<Object, String> symbolMap_ = DebugUtils.getFieldMap(Sym.class);
  public static final Map<String, Object> symbolMap2_= DebugUtils.getFieldMap2(Sym.class);

  /** The source currently being parsed. */
  protected Source source_ = null;
  
 
  private Writer writer_ = new OutputStreamWriter(System.out, java.nio.charset.StandardCharsets.UTF_8);
  protected SectionInfo sectInfo_ = new SectionManager(
  	Dialect.CIRCUSCONF
  	);
  protected String sectionName_;
  protected int tabSize_ = PrintPropertiesKeys.PROP_TXT_TAB_SIZE_DEFAULT;

  // dialect is a final attribute determined at construction time
  // depending on the extension being used (i.e. decided at XML transformation time).
  // this is useful for fine-tuned error information. If no extension is chosen we 
  // get a compilation error (i.e. final field not assigned).
  private final Dialect dialect_ = 
  						Dialect.CIRCUSCONF
    				  // otherwise it will be unassigned, hence a compilation error
    				  ;

    /**
     * The list of parse errors.
     */
    protected List<CztError> errorList_;

    protected PrintException printException_;
    
    // there are more constructors created by java cup, don't put it final!
    private Set<Key<?>> explicitDeps_ = Collections.emptySet();

    Set<Key<?>> getExplicitDeps()
    {
      return Collections.unmodifiableSet(explicitDeps_);
    }
       
    public Unicode2Latex(CztScanner scanner,
                    SectionInfo sectInfo,
                    Properties properties,
                    Collection<? extends Key<?>> explicitDeps)
    {
      super(scanner);
      sectInfo_ = sectInfo;
      
      // TODO: should we have a TermSource? 
      source_ = null;
      
      assert scanner != null && sectInfo_ != null && dialect_ != null;
	    
	  checkDialectConsistency(sectInfo_.getDialect(), scanner.getDialect());
	  
      errorList_ = new ArrayList<CztError>(PerformanceSettings.INITIAL_ARRAY_CAPACITY);
      explicitDeps_ = new HashSet<Key<?>>(explicitDeps);
      printException_ = null;
      CztLogger.getLogger(Unicode2Latex.class).finer("New " + Unicode2Latex.class.getName() + 
      		" parser created for " + getDialect().toString() + ".");
    }
   
  /**
   * Used to scan the unicode provided within markup directives.
   * Whenever a latex markup directives is to printed, a new
   * markup scanner is created that scans the unicode of that
   * markup.  If it is not <code>null</code> we are just
   * printing the definition part of a latex markup directive.
   */
  protected ContextFreeScanner markupScanner_ = null;

  private void checkDialectConsistency(Dialect... vars)
  {
  	for(Dialect d : vars)
  	{
 	  // For pretty printing, some extensions don't have their own, so dialect 
	  // check could/should be less restrictive? TODO?
	  if (!d.isExtensionOf(dialect_))
	  	throw new IllegalArgumentException("Incompatible dialects in " + 
	  		Unicode2Latex.class.getName() + " scanner. " + dialect_.toString() +
	  		" expected, but section manager dialect " + d + " found."); 
  	}
  }
 
  public Dialect getDialect()
  {
  	assert sectInfo_.getDialect().isExtensionOf(dialect_) && 
  		   getCztScanner().getDialect().isExtensionOf(dialect_) :
  		   "dialect_ = " + dialect_ + "; sectInfo.dialect = " + 
  		   sectInfo_.getDialect() + "; scanner.dialect = " +
  		   getCztScanner().getDialect() + ". For Unicode2Latex we allow dialect extensions"; 
	return sectInfo_.getDialect();
  }

  public CztScanner getCztScanner()
  {
  	return (CztScanner)getScanner();
  }

	protected boolean hasErrors()
   {
     for(CztError e : errorList_)
     {
       if (e.getErrorType() == ErrorType.ERROR)
         return true;

     }
     return false;
   }

   protected void raiseErrors() throws PrintException
   {
     assert hasErrors() : "no errors to be raised";
     if (printException_ == null)
     {
       assert source_ == null;
       printException_ = new PrintException(getDialect(), errorList_);
     }
     assert printException_.getErrors().equals(errorList_) : "inconsistent error list";
     Iterator<CztError> it = errorList_.iterator();
     while (it.hasNext())
     {
       CztError e = it.next();
       if (e.getErrorType().equals(ErrorType.WARNING))
       {
         it.remove();
         // TODO: Parser should have a warning manager (!) 
         //       For now, keep warnings as just "show" at the parser level?
         CztLogger.getLogger(Unicode2Latex.class).warning(e.toString());
       }
     }
     it = null;
     // in case there are no more warnings...
     if (hasErrors())
     {
       throw printException_;
     }
   }

  public SectionInfo getSectionInfo()
  {
    return sectInfo_;
  }

  public void setSectionInfo(SectionInfo sectInfo)
  {
    sectInfo_ = sectInfo;
  }

  public void setSectionInfo(SectionInfo sectInfo, String sectionName)
  {
    sectInfo_ = sectInfo;
    sectionName_ = sectionName;
    if (sectInfo_ instanceof SectionManager)
    {
      try {
        tabSize_ = ((SectionManager)sectInfo_).getIntegerProperty(PrintPropertiesKeys.PROP_TXT_TAB_SIZE);
      }
      catch (NumberFormatException e)
      {
        tabSize_ = PrintPropertiesKeys.PROP_TXT_TAB_SIZE_DEFAULT;
      }
    }
  }

  public Writer getWriter()
  {
    return writer_;
  }

  public void setWriter(Writer writer)
  {
    writer_ = writer;
  }

  protected void write(String s)
  {
    try {
      writer_.write(s);
    }
    catch(IOException e) {
    	CztLogger.getLogger(Unicode2Latex.class).severe("Could not write because of IO exception for " 
    	  + dialect_.toString() + " in Unicode2Latex as: " + e.getMessage());
    }
  }

  private String printType(DirectiveType type)
  {
    if (DirectiveType.NONE.equals(type)) return "";
    return type.toString().toLowerCase();
  }

  /**
   * Returns the next token.
   */
  protected Symbol local_next_token()
    throws Exception
  {
    Symbol result = local_next_token_help();
    if (result.sym == Sym.DECORWORD &&
             "section".equals(result.value.toString())) {
      return new Symbol(Sym.SECTION);
    }
    else if (result.sym == Sym.TOKENSEQ ||
             result.sym == Sym.PARA_START) {
      LatexMarkupFunction table = 
        sectInfo_.get(new Key<LatexMarkupFunction>(sectionName_, LatexMarkupFunction.class));
      action_obj.setupMarkupTable(table);
    }
    String logMessage =
      "Next token is (" + symbolMap_.get(result.sym) + ", " + 
      (result.sym != Sym.TEXT ? String.valueOf(result.value) + ", " + 
       (result.value != null ? result.value.getClass().getName() : "null") :
       "...shhh...") + ").";    
    CztLogger.getLogger(Unicode2Latex.class).fine(logMessage);
    return result;
  }

  private Symbol local_next_token_help()
    throws Exception
  {
    if (markupScanner_ != null) {
      // if markupScanner_ is not null, we are just printing the definition
      // part of a latex markup directive.  Therefore, markup_ must be non
      // null (since we can only get the directive from there).
      assert action_obj.markup_ != null;
      Symbol result = markupScanner_.next_token();
      if (result == null || result.sym == Sym.EOF) {
        markupScanner_ = null;
        return new Symbol(Sym.END_MARKUP);
      }
      return result;
    }
    if (action_obj.markup_ != null && action_obj.markup_.hasNext()) {
      Directive directive = (Directive) action_obj.markup_.next();
      final String unicode = directive.getUnicode();
      final char[] charArray = unicode.toCharArray();
      if (unicode.length() == 1) {
        StringBuffer result = new StringBuffer();
        result.append("\n");
        char c = unicode.charAt(0);
        result.append("%%Z" + printType(directive.getDirectiveType())+ "char ");
        result.append(directive.getCommand() + " ");
        result.append("U+");
        String hex = Integer.toHexString(c).toUpperCase();
        for (int i = 0; i < 4 - hex.length(); i++) {
          result.append("0");
        }
        result.append(hex);
        result.append("\n");
        return new Symbol(Sym.CHAR_MARKUP, result.toString());
      }
      else if (charArray.length == 2 &&
               Character.isSurrogatePair(charArray[0], charArray[1])) {
        StringBuffer result = new StringBuffer();
        result.append("\n");
        int codePoint = Character.codePointAt(charArray, 0);
        result.append("%%Z" + printType(directive.getDirectiveType())+ "char ");
        result.append(directive.getCommand() + " ");
        result.append("U-");
        String hex = Integer.toHexString(codePoint).toUpperCase();
        for (int i = 0; i < 8 - hex.length(); i++) {
          result.append("0");
        }
        result.append(hex);
        result.append("\n");
        return new Symbol(Sym.CHAR_MARKUP, result.toString());
      }
      else {
        markupScanner_ = new ContextFreeScanner(new StringReader(unicode));
        markupScanner_.yybegin(ContextFreeScanner.Z);
        DirectiveType type = directive.getDirectiveType();
        if (DirectiveType.NONE.equals(type)) {
          return new Symbol(Sym.WORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.IN.equals(type)) {
          return new Symbol(Sym.INWORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.POST.equals(type)) {
          return new Symbol(Sym.POSTWORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.PRE.equals(type)) {
          return new Symbol(Sym.PREWORD_MARKUP, directive.getCommand());
        }
        else {
          throw new CztException("Unexpected directive type " + type + " for " + dialect_.toString() + " in Unicode2Latex parser.");
        }
      }
    }
    else {
      action_obj.markup_ = null;
      Symbol result = getScanner().next_token();
      return result;
    }
  }

  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s =
        ((java_cup.runtime.Symbol) info);
      if (s.left >= 0) {                
        m.append(" in line "+(s.left+1));   
        if (s.right >= 0) m.append(", column "+(s.right + 1));
      }
      String value = String.valueOf(s.value);
      if (s.value instanceof Term &&
          ((Term)s.value).getAnn(LocAnn.class) != null) {  
        value += " at " +
          ((LocAnn)(((Term)s.value).getAnn(LocAnn.class))).toString();
      }
      m.append(", Token(" + symbolMap_.get(s.sym) + "," + value + ")");
    }
    m.append(": " + message);
    System.err.println(m);
  }
  
  protected CztError createPrintError(Symbol token)
  {
    return new ZPrintError(getSectionInfo(), ZPrintMessage.MSG_PRINTSYNTAX_ERROR,
                           new Object[] { toObject(token) },
                           getLocation(token));
  }
  
  protected Object toObject(Symbol symbol)
  {
    if (symbol.value != null &&
        !(symbol.value instanceof LocInfo)) {
      return symbol.value;
    }
    return symbolMap_.get(symbol.sym);
  }

  protected LocInfo getLocation(Symbol symbol)
  {
    if (symbol.value instanceof LocInfo) {
      return (LocInfo) symbol.value;
    }
    if (symbol.value instanceof LocString) {
      LocString s = (LocString) symbol.value;
      return s.getLocation();
    }
    if (symbol.value instanceof LocInt) {
      LocInt i = (LocInt) symbol.value;
      return i.getLocation();
    }
    return new LocInfoImpl(getDialect(), "unknown", symbol.left, symbol.right);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception
  {
    report_error(message, info);
    done_parsing();
    throw new PrintException(dialect_, "Parse error: " +
      String.valueOf(message) + " => " + (info instanceof Symbol ? symbolMap_.get(((Symbol)info).sym) : String.valueOf(info)));
  }

  @Override
  public void unrecovered_syntax_error(Symbol token) throws Exception
  {
    report_fatal_error("Syntax error at token " + symbolMap_.get(token.sym),
                       token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("unused")
class CUP$Unicode2Latex$actions {


  private Map<String,ZSect> sections_ =
    new HashMap<String,ZSect>();
  private Map<String,Object> unicode2latexMap_ = null;
  
  SectionInfo sectInfo_;
  Dialect dialect_;
  Source source_;
    				  
  /**
   * An iterator over markup directives to be printed.
   */
  protected Iterator<Directive> markup_ = null;

  private Map<String,Object> addStandardMapping(Map<String,Object> map)
  {
    map.put(ZString.SPOT, resultTT("@", ZString.SPOT));
    map.put("+", resultTT("+", "+"));
    map.put(ZString.MINUS, resultTT("-", ZString.MINUS));
    map.put("*", resultTT("*", "*"));
    map.put("|", resultTT("|", "|"));
    map.put(";", resultFT(";", ";"));
    map.put(",", resultFT(",", ","));
    map.put(ZString.SE, resultFF("_{", ZString.SE));
    map.put(ZString.NW, resultFF("}", ZString.NW));
    map.put(ZString.NE, resultFF("^{", ZString.NE));
    map.put(ZString.SW, resultFF("}", ZString.SW));
    map.put(ZString.LL, resultFF("\\_", ZString.LL));
    map.put("parents", resultFT("\\parents", "parents"));

    /*  Add here only additional elements that have not been declared
     *  in toolkits or in other keyword/token related files.
     */

    return map;
  }

  private String begin(String string)
  {
    return begin(string, "");
  }

  private String begin(String string, String extra)
  {
    return "\\begin{" + string + "}" + extra ; // + "\n";
  }

  

  private String end(String string)
  {
    return "\n\\end{" + string + "}\n\n";
  }

  private LatexCommand concate(LatexCommand c1, LatexCommand c2)
  {
    if (c1 == null || c1.getUnicode().length() <= 0) return c2;
    if (c2 == null || c2.getUnicode().length() <= 0) return c1;
    String latex = c1.getName();
    if (! c1.addRightSpace() && ! c2.addLeftSpace()) {
      final ZChar[] unicode1 = ZChar.toZChars(c1.getUnicode());
      final ZChar[] unicode2 = ZChar.toZChars(c2.getUnicode());
      final ZChar lastChar = unicode1[unicode1.length - 1];
      final ZChar firstChar = unicode2[0];
      final boolean lastIsAlphaOrStroke =
        ZChar.isAlpha(lastChar) || ZChar.isStroke(lastChar);
      final boolean firstIsAlphaOrStrokeOrWordglue =
        ZChar.isAlpha(firstChar) || ZChar.isStroke(firstChar) ||
        ZChar.isWordGlue(firstChar);
      final boolean case1 =
        lastIsAlphaOrStroke && ! firstIsAlphaOrStrokeOrWordglue;
      final boolean lastIsAlphaOrStrokeOrWordglue =
        ZChar.isAlpha(lastChar) || ZChar.isStroke(lastChar) ||
        ZChar.isWordGlue(lastChar);
      final boolean firstIsAlphaOrStroke =
        ZChar.isAlpha(firstChar) || ZChar.isStroke(firstChar);
      final boolean case2 =
        ! lastIsAlphaOrStrokeOrWordglue && firstIsAlphaOrStroke;
      if (case1 || case2) {
        latex += " ";
      }
      else {
        latex += "~";
      }
    } else {
      latex += " ";
    }
    latex += c2.getName();
    String unicode = c1.getUnicode() + " " + c2.getUnicode();
    return
      new LatexCommand(latex, unicode, c1.addLeftSpace(), c2.addRightSpace());
  }

  private LatexCommand toLatex(String s, int line, int column)
    throws PrintException
  {
    assert unicode2latexMap_ != null;
    return uniwordToLatex(s, unicode2latexMap_, line, column);
  }

  /**
   * @czt.todo Write this method properly!
   */
  private String toLatexInSectHead(String s)
  {
    return s.replaceAll("_", "\\\\_");
  }

  private LatexCommand uniwordToLatex(String word, Map<String, Object> latexCommands,
                                      int line, int column)
    throws PrintException
  {
    LatexCommand command = null;
    if (markup_ == null) {
      Object o = latexCommands.get(word);
      if (o instanceof MarkupDirective) {
        MarkupDirective directive = (MarkupDirective) o;
        
        command = new LatexCommand(directive.getCommand(),
                                   directive.getUnicode(),
                                   directive.addLeftSpace() ,
                                   directive.addRightSpace());
      }
      else {
        command = (LatexCommand) o;
      }
      if (command != null) {
        return command;
      }
    }
    StringBuffer latex = new StringBuffer();
    boolean addLSpace = false;
    boolean addRSpace = false;
    
    ZChar[] zchars = ZChar.toZChars(word);
    int charcount = 0;
    for (int i = 0; i < zchars.length; i++) {
      ZChar zchar = zchars[i];
      Object o = latexCommands.get(zchar.toString());
      if (o instanceof MarkupDirective) {
        MarkupDirective directive = (MarkupDirective) o;
        command = new LatexCommand(directive.getCommand(),
                                   directive.getUnicode(),
                                   directive.addLeftSpace(),
                                   directive.addRightSpace());
      }
      else {
        command = (LatexCommand) o;
      }
      if (command != null) {
        if ( (command.addLeftSpace() && i > 0) ||
             (command.addRightSpace() && i + 1 < zchars.length) ) {
          latex.append("{" + command.getName() + "}");
        }
        else {
          if (command.getName().startsWith("\\")) {
            latex.append(command.getName() + " ");
          }
          else {
            latex.append(command.getName());
          }
        }
        addRSpace = command.addRightSpace();
      }
      
      else if (zchar.isAsciiChar()) { // ASCII?
        latex.append(zchar.toString());
      }
      else if (ZChar.PRIME.equals(zchar)) {
        latex.append("'");
      }
      else {
        final int hexBase = 16;
        String hex = Integer.toString(zchar.codePoint(), hexBase);
        String message = "Error while transforming " + word +
          ": Unexpected character " + zchar.toString() +
          " (\\u" + hex + ") in line " + line + " column " +
          charcount + column;
        throw new PrintException(dialect_, message);
      }
      charcount = charcount + zchar.charCount();
    }
    String latexStr = latex.toString();
    //System.out.println("uniwordToLatex(" + word + ") = " + latexStr + " instead of " 
    //		+ latexStr.replaceAll(" ", "") 
    //		
    //		+ " for " + dialect_.toString() + " in Unicode2Latex.");
    //
    return createLatexCommand(latexStr, word, addLSpace, addRSpace);
  }

  // Whilst concate(w1, w2), spaces at edges are considered. For the cases
  // where "keywords" are typeset the same in LaTeX and Unicode, it can be
  // sometimes annoying/desarible to have hard or soft spaces added. That's
  // what "concate(w1,w2)" does. Here, we can influence its behaviour by
  // appending an extra soft space in the case where no such issue arrise?
  private LatexCommand createLatexCommand(String latex, String word, boolean addLeft, boolean addRight)
  {
    boolean isKeyword = false 
                  
                  ;
    addLeft = addLeft || isKeyword;
    addRight = addRight || isKeyword;
    return new LatexCommand(latex, word, addLeft, addRight);
  }


  private void addParentMarkups(ZSect zsect, LatexMarkupFunction table)
  {
    for (Parent parent : zsect.getParent()) {
      String parentName = parent.getWord();
      LatexMarkupFunction parentMarkup = null;
      try {
        parentMarkup = 
          parser.sectInfo_.get(new Key<LatexMarkupFunction>(parentName, LatexMarkupFunction.class));
      }
      catch (CommandException exception) {
        String message = "Cannot get latex markup for parent section " +
          parentName + " caused by " + exception;
        CztLogger.getLogger(Unicode2Latex.class).warning(message);
      }
      if (parentMarkup == null) {
        ZSect parentHeader = sections_.get(parentName);
        if (parentHeader != null) addParentMarkups(parentHeader, table);
      }
      else {
        try {
          table.add(parentMarkup);
        }
        catch (MarkupException e) {
          CztLogger.getLogger(Unicode2Latex.class).warning(e.getMessage());
        }
      }
    }
  }

  protected void setupMarkupTable(ZSect zsect)
  {
    final String sectName = zsect.getName();
    LatexMarkupFunction table = getMarkupTable(sectName);
    if (table == null) {
      table = new LatexMarkupFunction(zsect.getName());
      addParentMarkups(zsect, table);
    }
    assert table != null;
    setupMarkupTable(table);
  }

  /**
   * Returns the LatexMarkupFunction for the given section.
   * Also sets up <code>markup_</code> if a LatexMarkupFunction
   * has been found.
   */
  protected LatexMarkupFunction getMarkupTable(String sectName)
  {
    LatexMarkupFunction table = null;
    try {
      table = 
        parser.sectInfo_.get(new Key<LatexMarkupFunction>(sectName, LatexMarkupFunction.class));
      if (table != null) {
        LatexMarkupPara para =
          table.toAst(new net.sourceforge.czt.z.util.Factory());
        markup_ = para.getDirective().iterator();
      }
      return table;
    }
    catch (CommandException exception) {
      String message = "Cannot get latex markup for section " + sectName +
        " caused by " + exception;
      CztLogger.getLogger(Unicode2Latex.class).warning(message);
    }
    return table;
  }

  protected void setupMarkupTable(LatexMarkupFunction table)
  {
    unicode2latexMap_ = new HashMap<String,Object>();
    if (table != null) {
      for (Iterator<MarkupDirective> iter = table.iterator(); iter.hasNext();) {
        MarkupDirective directive = (MarkupDirective) iter.next();
        final String unicode = directive.getUnicode();
        
        // For Std Z printing, we should not consider FUZZ_TOOLKIT symbols!
        if (!directive.getSection().equals(net.sourceforge.czt.util.Section.FUZZ_TOOLKIT.getName()))
        
           unicode2latexMap_.put(unicode, directive);
      }
    }
    addStandardMapping(unicode2latexMap_);

  }

  protected LatexCommand resultTT(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, true, true);
  }

  protected LatexCommand resultTF(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, true, false);
  }

  protected LatexCommand resultFT(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, false, true);
  }

  protected LatexCommand resultFF(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, false, false);
  }

  private final Unicode2Latex parser;

  /** Constructor */
  CUP$Unicode2Latex$actions(Unicode2Latex parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Unicode2Latex$do_action(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;

      /* select the action based on the action number */
      switch (CUP$Unicode2Latex$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // indent ::= INDENT 
            {
               CUP$Unicode2Latex$result = case76(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // special ::= indent 
            {
               CUP$Unicode2Latex$result = case75(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // special ::= NL 
            {
               CUP$Unicode2Latex$result = case74(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // specialSeq ::= 
            {
               CUP$Unicode2Latex$result = case73(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // specialSeq ::= specialSeq special 
            {
               CUP$Unicode2Latex$result = case72(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paren ::= RCIRCCONF 
            {
               CUP$Unicode2Latex$result = case71(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paren ::= LCIRCCONF 
            {
               CUP$Unicode2Latex$result = case70(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paren ::= RINTER 
            {
               CUP$Unicode2Latex$result = case69(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paren ::= LINTER 
            {
               CUP$Unicode2Latex$result = case68(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paren ::= RPAR 
            {
               CUP$Unicode2Latex$result = case67(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paren ::= LPAR 
            {
               CUP$Unicode2Latex$result = case66(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paren ::= RCIRCRENAME 
            {
               CUP$Unicode2Latex$result = case65(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paren ::= LCIRCRENAME 
            {
               CUP$Unicode2Latex$result = case64(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paren ::= RSCHEXPRACT 
            {
               CUP$Unicode2Latex$result = case63(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paren ::= LSCHEXPRACT 
            {
               CUP$Unicode2Latex$result = case62(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paren ::= RCIRCGUARD 
            {
               CUP$Unicode2Latex$result = case61(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paren ::= LCIRCGUARD 
            {
               CUP$Unicode2Latex$result = case60(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paren ::= CIRCRINST 
            {
               CUP$Unicode2Latex$result = case59(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paren ::= CIRCLINST 
            {
               CUP$Unicode2Latex$result = case58(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paren ::= RCIRCCHANSET 
            {
               CUP$Unicode2Latex$result = case57(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paren ::= LCIRCCHANSET 
            {
               CUP$Unicode2Latex$result = case56(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paren ::= RDATA 
            {
               CUP$Unicode2Latex$result = case55(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paren ::= LDATA 
            {
               CUP$Unicode2Latex$result = case54(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paren ::= RBIND 
            {
               CUP$Unicode2Latex$result = case53(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paren ::= LBIND 
            {
               CUP$Unicode2Latex$result = case52(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paren ::= RBRACE 
            {
               CUP$Unicode2Latex$result = case51(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paren ::= LBRACE 
            {
               CUP$Unicode2Latex$result = case50(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paren ::= RSQUARE 
            {
               CUP$Unicode2Latex$result = case49(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paren ::= LSQUARE 
            {
               CUP$Unicode2Latex$result = case48(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paren ::= RPAREN 
            {
               CUP$Unicode2Latex$result = case47(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paren ::= LPAREN 
            {
               CUP$Unicode2Latex$result = case46(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decorword ::= DECORWORD 
            {
               CUP$Unicode2Latex$result = case45(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // schGenerics ::= LSQUARE decorwordList RSQUARE 
            {
               CUP$Unicode2Latex$result = case44(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decorwordList ::= decorword 
            {
               CUP$Unicode2Latex$result = case43(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decorwordList ::= decorwordList decorword 
            {
               CUP$Unicode2Latex$result = case42(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decorwordList ::= decorwordList special 
            {
               CUP$Unicode2Latex$result = case41(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // token ::= WHERE 
            {
               CUP$Unicode2Latex$result = case40(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // token ::= paren 
            {
               CUP$Unicode2Latex$result = case39(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // token ::= NUMERAL 
            {
               CUP$Unicode2Latex$result = case38(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // token ::= NUMSTROKE 
            {
               CUP$Unicode2Latex$result = case37(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // token ::= NEXTSTROKE 
            {
               CUP$Unicode2Latex$result = case36(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // token ::= OUTSTROKE 
            {
               CUP$Unicode2Latex$result = case35(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // token ::= INSTROKE 
            {
               CUP$Unicode2Latex$result = case34(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // token ::= decorword 
            {
               CUP$Unicode2Latex$result = case33(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tokenSeq ::= 
            {
               CUP$Unicode2Latex$result = case32(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tokenSeq ::= tokenSeq special 
            {
               CUP$Unicode2Latex$result = case31(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tokenSeq ::= tokenSeq token 
            {
               CUP$Unicode2Latex$result = case30(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // wordmarkup ::= POSTWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case29(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // wordmarkup ::= PREWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case28(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // wordmarkup ::= INWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case27(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // wordmarkup ::= WORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case26(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // markup ::= wordmarkup tokenSeq END_MARKUP 
            {
               CUP$Unicode2Latex$result = case25(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // markup ::= CHAR_MARKUP 
            {
               CUP$Unicode2Latex$result = case24(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // zpara ::= CIRCUSACTION tokenSeq END 
            {
               CUP$Unicode2Latex$result = case23(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // zpara ::= CIRCUS tokenSeq END 
            {
               CUP$Unicode2Latex$result = case22(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // zpara ::= GENSCH specialSeq decorword schGenerics tokenSeq END 
            {
               CUP$Unicode2Latex$result = case21(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // zpara ::= GENAX tokenSeq END 
            {
               CUP$Unicode2Latex$result = case20(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // zpara ::= SCH specialSeq decorword tokenSeq END 
            {
               CUP$Unicode2Latex$result = case19(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // zpara ::= AX tokenSeq END 
            {
               CUP$Unicode2Latex$result = case18(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // zpara ::= ZED specialSeq zedPara END 
            {
               CUP$Unicode2Latex$result = case17(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // zpara ::= ZED THEOREM decorword tokenSeq END 
            {
               CUP$Unicode2Latex$result = case16(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sectHeadSeq ::= 
            {
               CUP$Unicode2Latex$result = case15(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sectHeadSeq ::= sectHeadSeq special 
            {
               CUP$Unicode2Latex$result = case14(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sectHeadSeq ::= sectHeadSeq parentsHead 
            {
               CUP$Unicode2Latex$result = case13(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parentsHead ::= DECORWORD 
            {
               CUP$Unicode2Latex$result = case12(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parentsHead ::= PARENTS 
            {
               CUP$Unicode2Latex$result = case11(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // zedPara ::= token tokenSeq 
            {
               CUP$Unicode2Latex$result = case10(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // zedPara ::= SECTION specialSeq DECORWORD sectHeadSeq 
            {
               CUP$Unicode2Latex$result = case9(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // para ::= zpara 
            {
               CUP$Unicode2Latex$result = case8(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // para ::= TEXT 
            {
               CUP$Unicode2Latex$result = case7(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // para ::= markup 
            {
               CUP$Unicode2Latex$result = case6(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // paragraphList ::= 
            {
               CUP$Unicode2Latex$result = case5(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paragraphList ::= paragraphList para 
            {
               CUP$Unicode2Latex$result = case4(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= PARA_START zpara PARA_END 
            {
               CUP$Unicode2Latex$result = case3(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= TOKENSEQ tokenSeq TOKENSEQ 
            {
               CUP$Unicode2Latex$result = case2(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
               CUP$Unicode2Latex$result = case1(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          /* ACCEPT */
          CUP$Unicode2Latex$parser.done_parsing();
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= paragraphList 
            {
               CUP$Unicode2Latex$result = case0(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //indent ::= INDENT 
    java_cup.runtime.Symbol case76(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int indentleft = CUP$Unicode2Latex$stack.peek().left;
		int indentright = CUP$Unicode2Latex$stack.peek().right;
		String indent = (String) CUP$Unicode2Latex$stack.peek().value;
		
                // the amount of space given will generate various t1..n
                int i = indent.length();
                int ts = (i / parser.tabSize_);
                int trail = (i % parser.tabSize_);
                if (trail >= (parser.tabSize_ / 2)) ts++;
                if (ts > 9) ts = 9; else if (ts < 1) ts = 1;
                String latex = indent + "\\t" + ts + "\t";
                RESULT = resultTT(latex, indent);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("indent",16, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //special ::= indent 
    java_cup.runtime.Symbol case75(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand i = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = i;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("special",15, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //special ::= NL 
    java_cup.runtime.Symbol case74(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\\\\n", ZString.NL);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("special",15, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //specialSeq ::= 
    java_cup.runtime.Symbol case73(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = null;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("specialSeq",10, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //specialSeq ::= specialSeq special 
    java_cup.runtime.Symbol case72(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sqleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sqright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand sq = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                if (sq != null)
                  RESULT = concate(sq, s);
                else
                  RESULT = s;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("specialSeq",10, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RCIRCCONF 
    java_cup.runtime.Symbol case71(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
	        RESULT = resultTT("~\\rcircconf~", CircusConfString.RCIRCCONF);
	     /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LCIRCCONF 
    java_cup.runtime.Symbol case70(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
	        RESULT = resultTT("~\\lcircconf~", CircusConfString.LCIRCCONF);
	     /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RINTER 
    java_cup.runtime.Symbol case69(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rinter~", CircusString.RINTER);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LINTER 
    java_cup.runtime.Symbol case68(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\linter~", CircusString.LINTER);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RPAR 
    java_cup.runtime.Symbol case67(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rpar~", CircusString.RPAR);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LPAR 
    java_cup.runtime.Symbol case66(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\lpar~", CircusString.LPAR);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RCIRCRENAME 
    java_cup.runtime.Symbol case65(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rcircrename", CircusString.RCIRCRENAME);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LCIRCRENAME 
    java_cup.runtime.Symbol case64(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\lcircrename~", CircusString.LCIRCRENAME);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RSCHEXPRACT 
    java_cup.runtime.Symbol case63(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rschexpract", CircusString.RSCHEXPRACT);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LSCHEXPRACT 
    java_cup.runtime.Symbol case62(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\lschexpract~", CircusString.LSCHEXPRACT);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RCIRCGUARD 
    java_cup.runtime.Symbol case61(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rcircguard", CircusString.RCIRCGUARD);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LCIRCGUARD 
    java_cup.runtime.Symbol case60(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\lcircguard~", CircusString.LCIRCGUARD);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= CIRCRINST 
    java_cup.runtime.Symbol case59(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\circrinst", CircusString.CIRCRINST);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= CIRCLINST 
    java_cup.runtime.Symbol case58(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\circlinst~", CircusString.CIRCLINST);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RCIRCCHANSET 
    java_cup.runtime.Symbol case57(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("~\\rchanset", CircusString.RCIRCCHANSET);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LCIRCCHANSET 
    java_cup.runtime.Symbol case56(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\lchanset~", CircusString.LCIRCCHANSET);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RDATA 
    java_cup.runtime.Symbol case55(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\rdata", ZString.RDATA); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LDATA 
    java_cup.runtime.Symbol case54(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\ldata", ZString.LDATA); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RBIND 
    java_cup.runtime.Symbol case53(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\rblot", ZString.RBIND); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LBIND 
    java_cup.runtime.Symbol case52(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\lblot", ZString.LBIND); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RBRACE 
    java_cup.runtime.Symbol case51(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\}", ZString.RBRACE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LBRACE 
    java_cup.runtime.Symbol case50(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\{",  ZString.LBRACE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RSQUARE 
    java_cup.runtime.Symbol case49(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("]", ZString.RSQUARE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LSQUARE 
    java_cup.runtime.Symbol case48(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("[", ZString.LSQUARE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RPAREN 
    java_cup.runtime.Symbol case47(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT(")", ZString.RPAREN); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LPAREN 
    java_cup.runtime.Symbol case46(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("(", ZString.LPAREN); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorword ::= DECORWORD 
    java_cup.runtime.Symbol case45(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		Decorword s = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
                assert s != null;
                if (s instanceof WhereWord) {
                  RESULT = resultTT("\n\\where\n", ZString.NL + ZString.VL);
                }

                else {
                  RESULT = toLatex(s.getName(), sleft, sright);
                }
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorword",17, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //schGenerics ::= LSQUARE decorwordList RSQUARE 
    java_cup.runtime.Symbol case44(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dwlleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwlright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dwl = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
               RESULT = concate(resultTT("[", ZString.LSQUARE),
                          concate(dwl, resultTT("]", ZString.RSQUARE)));
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("schGenerics",12, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorword 
    java_cup.runtime.Symbol case43(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                 RESULT = s;
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorwordList decorword 
    java_cup.runtime.Symbol case42(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dw = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                 RESULT = concate(dw, s);
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorwordList special 
    java_cup.runtime.Symbol case41(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dw1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dw1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dw1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int dw2left = CUP$Unicode2Latex$stack.peek().left;
		int dw2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand dw2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = concate(dw1, dw2);
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= WHERE 
    java_cup.runtime.Symbol case40(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.peek().left;
		int tright = CUP$Unicode2Latex$stack.peek().right;
		Object t = (Object) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = resultTT("\n\\where\n", ZString.NL + ZString.VL); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= paren 
    java_cup.runtime.Symbol case39(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = s; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NUMERAL 
    java_cup.runtime.Symbol case38(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LocInt i = (LocInt) CUP$Unicode2Latex$stack.peek().value;
		
                final String numString = i.getValue().toString();
                RESULT = resultFF(numString, numString);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NUMSTROKE 
    java_cup.runtime.Symbol case37(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LocInt i = (LocInt) CUP$Unicode2Latex$stack.peek().value;
		
                final String numString = i.getValue().toString();
                String latex = "_" + numString;
                String unicode = ZString.SE + numString + ZString.NW;
                RESULT = resultFF(latex, unicode);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NEXTSTROKE 
    java_cup.runtime.Symbol case36(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("'", ZString.PRIME); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= OUTSTROKE 
    java_cup.runtime.Symbol case35(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("!", ZString.OUTSTROKE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= INSTROKE 
    java_cup.runtime.Symbol case34(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("?", ZString.INSTROKE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= decorword 
    java_cup.runtime.Symbol case33(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = s; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= 
    java_cup.runtime.Symbol case32(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= tokenSeq special 
    java_cup.runtime.Symbol case31(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int w1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int w1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand w1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(w1, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= tokenSeq token 
    java_cup.runtime.Symbol case30(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int w1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int w1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand w1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(w1, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= POSTWORD_MARKUP 
    java_cup.runtime.Symbol case29(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int postwordleft = CUP$Unicode2Latex$stack.peek().left;
		int postwordright = CUP$Unicode2Latex$stack.peek().right;
		String postword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zpostword " + postword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= PREWORD_MARKUP 
    java_cup.runtime.Symbol case28(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int prewordleft = CUP$Unicode2Latex$stack.peek().left;
		int prewordright = CUP$Unicode2Latex$stack.peek().right;
		String preword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zpreword " + preword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= INWORD_MARKUP 
    java_cup.runtime.Symbol case27(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int inwordleft = CUP$Unicode2Latex$stack.peek().left;
		int inwordright = CUP$Unicode2Latex$stack.peek().right;
		String inword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zinword " + inword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= WORD_MARKUP 
    java_cup.runtime.Symbol case26(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wordleft = CUP$Unicode2Latex$stack.peek().left;
		int wordright = CUP$Unicode2Latex$stack.peek().right;
		String word = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zword " + word;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //markup ::= wordmarkup tokenSeq END_MARKUP 
    java_cup.runtime.Symbol case25(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wmleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wmright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		String wm = (String) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                StringBuffer result = new StringBuffer();
                result.append("\n");
                result.append(wm);
                result.append(" ");
                if (s != null) { result.append(s.getName()); }
                result.append("\n");
                parser.write(result.toString());
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("markup",2, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //markup ::= CHAR_MARKUP 
    java_cup.runtime.Symbol case24(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int zcharleft = CUP$Unicode2Latex$stack.peek().left;
		int zcharright = CUP$Unicode2Latex$stack.peek().right;
		String zchar = (String) CUP$Unicode2Latex$stack.peek().value;
		 parser.write(zchar); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("markup",2, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= CIRCUSACTION tokenSeq END 
    java_cup.runtime.Symbol case23(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("circusaction");
                if (s != null) result += s.getName();
                result += end("circusaction");
                parser.write(result);
            /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= CIRCUS tokenSeq END 
    java_cup.runtime.Symbol case22(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("circus");
                if (s != null) { result += s.getName(); }
                result += end("circus");
                parser.write(result);
            /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= GENSCH specialSeq decorword schGenerics tokenSeq END 
    java_cup.runtime.Symbol case21(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).value;
		int genleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int genright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand gen = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("schema", "{" + w.getName() + "}" );
                if (gen == null)
                  throw new PrintException(dialect_, "Generic parameters expected for schema " + w.getName());
                else
                  result += gen.getName() + "\n";
                //if (zsti != null) result += zsti.getName();
                if (s != null) result += s.getName();
                result += end("schema");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-5), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= GENAX tokenSeq END 
    java_cup.runtime.Symbol case20(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("gendef");
                if (s != null) result += s.getName();
                result += end("gendef");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= SCH specialSeq decorword tokenSeq END 
    java_cup.runtime.Symbol case19(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("schema", "{" + w.getName() + "}" );
                //if (zsti != null) 
                //  result += "\n" + zsti.getName();
                //else
                  result += "\n";
                if (s != null) result += s.getName();
                result += end("schema");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-4), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= AX tokenSeq END 
    java_cup.runtime.Symbol case18(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("axdef");
                if (s != null) result += s.getName();
                result += end("axdef");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= ZED specialSeq zedPara END 
    java_cup.runtime.Symbol case17(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= ZED THEOREM decorword tokenSeq END 
    java_cup.runtime.Symbol case16(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                //System.out.println("DEBUG: Unicode2Latex sees THEOREM " + w.getName());
                String result = begin("theorem", "{" +  w.getName() + "}"
                                          );
                if (s != null) result += s.getName();
                result += end("theorem");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-4), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= 
    java_cup.runtime.Symbol case15(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= sectHeadSeq special 
    java_cup.runtime.Symbol case14(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(s, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= sectHeadSeq parentsHead 
    java_cup.runtime.Symbol case13(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int dwleft = CUP$Unicode2Latex$stack.peek().left;
		int dwright = CUP$Unicode2Latex$stack.peek().right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
                if ("parents".equals(dw.getName())) {
                  RESULT = concate(s, resultFF("\\parents", dw.getName()));
                }
                else {
                  String latex = toLatexInSectHead(dw.getName());
                  RESULT = concate(s, resultFF(latex, dw.getName()));
                }
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //parentsHead ::= DECORWORD 
    java_cup.runtime.Symbol case12(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Decorword RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.peek().left;
		int dwright = CUP$Unicode2Latex$stack.peek().right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
   			 	RESULT = dw;
   			 /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("parentsHead",7, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //parentsHead ::= PARENTS 
    java_cup.runtime.Symbol case11(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Decorword RESULT =null;/*3*/
		
   			 	RESULT = new Decorword("parents");
   			 /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("parentsHead",7, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zedPara ::= token tokenSeq 
    java_cup.runtime.Symbol case10(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int tright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand t = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                String result = begin("zed" );
                if (s != null) { result += concate(t,s).getName(); }
                result += end("zed");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zedPara",5, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zedPara ::= SECTION specialSeq DECORWORD sectHeadSeq 
    java_cup.runtime.Symbol case9(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                String result = begin("zsection");
                result += "\t \\SECTION " + toLatexInSectHead(dw.getName()) + " ";
                if (s != null) { result += s.getName(); }
                result += end("zsection");
                parser.write(result);
                parser.sectionName_ = dw.getName();
                LatexMarkupFunction table =
                  getMarkupTable(parser.sectionName_);
                setupMarkupTable(table);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zedPara",5, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= zpara 
    java_cup.runtime.Symbol case8(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int zleft = CUP$Unicode2Latex$stack.peek().left;
		int zright = CUP$Unicode2Latex$stack.peek().right;
		String z = (String) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = z; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= TEXT 
    java_cup.runtime.Symbol case7(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.peek().left;
		int tright = CUP$Unicode2Latex$stack.peek().right;
		LocString t = (LocString) CUP$Unicode2Latex$stack.peek().value;
		 parser.write(t.getString()); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= markup 
    java_cup.runtime.Symbol case6(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paragraphList ::= 
    java_cup.runtime.Symbol case5(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paragraphList",1, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paragraphList ::= paragraphList para 
    java_cup.runtime.Symbol case4(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paragraphList",1, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= PARA_START zpara PARA_END 
    java_cup.runtime.Symbol case3(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		
                parser.getWriter().flush();
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= TOKENSEQ tokenSeq TOKENSEQ 
    java_cup.runtime.Symbol case2(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		 
                if (s != null) parser.write(s.getName());
                parser.getWriter().flush();
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //$START ::= input EOF 
    java_cup.runtime.Symbol case1(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int start_valright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		Object start_val = (Object) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		RESULT = start_val;/*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= paragraphList 
    java_cup.runtime.Symbol case0(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		 parser.getWriter().flush(); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
}

