/* The following code was generated by JFlex 1.4.3 on 10/18/20 8:39 AM */


/* --------------------------Usercode Section------------------------ */
package net.sourceforge.czt.parser.zeves;



import java.io.IOException;
import java.util.Properties;
import java.util.Stack;

import java_cup.runtime.Symbol;
import net.sourceforge.czt.parser.util.ErrorType;
import net.sourceforge.czt.parser.util.LatexCommand;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.LatexSym;
import net.sourceforge.czt.parser.util.LocInfo;
import net.sourceforge.czt.parser.util.LocInfoImpl;
import net.sourceforge.czt.parser.util.LocToken;
import net.sourceforge.czt.parser.util.LocTokenImpl;
import net.sourceforge.czt.parser.util.MarkupDirective;
import net.sourceforge.czt.parser.util.ParsePropertiesKeys;
import net.sourceforge.czt.parser.util.ScanException;
import net.sourceforge.czt.session.CommandException;
import net.sourceforge.czt.session.Dialect;
import net.sourceforge.czt.session.Key;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.Source;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.util.ZString;
//import java.util.logging.Level;

import net.sourceforge.czt.parser.z.ZParseError;
import net.sourceforge.czt.parser.z.ZParseMessage;


import net.sourceforge.czt.zeves.util.ZEvesString;



/**
 * <p>
*   The low-level latex to unicode scanner for Z.
 *   See {@link LatexToUnicode} for a high level latex to unicode converter.
 * </p>
 * <p>
 *   This is a JFlex generated scanner for translating
 *   Z
 *   specifications written in the latex mark-up language into unicode.
 *   It provides tokens (instances of class {@link Symbol}) whose values
 *   are unicode strings and which contain line and column number
 *   information from the original latex file or stream.
 *   See {@link LatexSym} for a list of possible token kinds.
 * </p>
 * <p>
 *   In order to work properly, a map containing the latex mark-up function
 *   of the current section to be scanned is needed.  This map must be
 *   updated when a new section header is recognised.
 *   The {@link LatexMarkupParser} is
 *   responsible for this task, and should process the output of an instance
 *   of this class before it can be processed further.
 * </p>
 * <p>
 * Limitations:
 * </p>
 * <ul>
 *   <li>
 *     The name of a generic schema definition should not contain
 *     nested braces.
 *   </li>
 *   <li>
 *     Latex markup directives are recognised only outside of a
 *     formal paragraph and only after they have been defined.
 *   </li>
 * </ul>
 */
@SuppressWarnings("unused") 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/18/20 8:39 AM from the specification file
 * <tt>/root/czt-code/parser/parser-zeves/target/generated-sources/parsergen-jflex/net/sourceforge/czt/parser/zeves/Latex2Unicode.jflex</tt>
 */
public class Latex2Unicode implements ParsePropertiesKeys, LatexMarkupParser.LatexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MARKUP = 4;
  public static final int ZNOTE_STATE = 10;
  public static final int ERROR = 8;
  public static final int COMMENT_STATE = 6;
  public static final int YYINITIAL = 0;
  public static final int ZED = 2;
  public static final int ZLABEL_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\3\1\40\1\1\2\0\1\2\22\0\1\10\2\0\1\42"+
    "\1\75\1\13\1\0\1\64\2\0\1\17\1\17\1\6\1\65\2\0"+
    "\1\41\1\12\1\12\1\12\1\12\1\12\1\12\1\12\1\12\1\12"+
    "\1\7\1\6\1\20\1\20\1\20\1\0\1\43\2\14\1\70\1\14"+
    "\1\67\3\14\1\72\2\14\1\63\1\14\1\74\1\73\3\14\1\66"+
    "\1\71\5\14\1\21\1\61\1\5\1\62\1\15\1\16\1\0\1\24"+
    "\1\47\1\22\1\35\1\31\1\36\1\56\1\23\1\26\1\51\1\50"+
    "\1\37\1\57\1\27\1\32\1\30\1\54\1\25\1\33\1\11\1\52"+
    "\1\53\1\34\1\55\1\46\1\60\1\44\1\17\1\45\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\4\0\1\3\7\0\2\1\2\4\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\2\2\2\5"+
    "\1\13\15\2\1\14\1\15\1\16\2\2\1\5\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\2\25\1\26\1\27"+
    "\1\30\1\31\6\3\1\32\10\0\1\11\1\33\2\11"+
    "\1\34\10\11\1\0\1\2\1\35\1\0\1\7\1\36"+
    "\1\0\1\36\1\37\1\40\1\36\1\41\30\2\22\0"+
    "\2\23\4\3\10\0\7\11\1\2\1\35\1\0\2\37"+
    "\1\0\32\2\2\0\1\42\25\0\3\3\16\0\10\11"+
    "\7\2\1\43\14\2\33\0\1\3\1\44\1\3\16\0"+
    "\1\33\1\11\3\0\5\11\16\2\22\0\1\3\16\0"+
    "\1\11\5\0\1\45\4\11\14\2\16\0\1\3\10\0"+
    "\1\46\3\0\1\47\3\0\1\11\7\0\1\11\2\0"+
    "\1\50\3\0\1\11\7\2\32\0\2\46\3\0\2\51"+
    "\1\0\1\52\7\0\1\11\1\0\1\53\1\54\1\2"+
    "\1\0\2\2\22\0\1\55\2\0\2\56\5\0\1\57"+
    "\2\0\3\2\17\0\1\60\7\0\1\53\1\2\13\0"+
    "\1\61\2\0\1\62\1\0\1\63\4\0\1\64\14\0"+
    "\1\65\1\66\1\0\1\67\6\0\1\70\5\0\1\71"+
    "\2\0\1\42\4\0\1\72\1\73\1\0\1\72\3\0"+
    "\1\74\2\0\1\75\1\0\1\76\2\0\1\77\11\0"+
    "\1\100\6\0\1\101\21\0\1\101\2\0\1\101\4\0"+
    "\1\102\2\0\1\101\5\0\2\101\3\0\1\103\12\0"+
    "\1\104\5\0\1\105\1\0\1\106\1\0\1\104\2\0"+
    "\1\104\7\0\1\107\1\104\4\0\1\107\2\0\1\107"+
    "\1\0\1\107\1\0\2\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[732];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u041e\0\u041e\0\u049a\0\u041e\0\u041e"+
    "\0\u04d8\0\u041e\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u041e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u041e\0\u041e\0\u041e"+
    "\0\u0972\0\u09b0\0\u09ee\0\u041e\0\u041e\0\u041e\0\u041e\0\u0a2c"+
    "\0\u0a6a\0\u041e\0\u041e\0\u0aa8\0\u041e\0\u041e\0\u041e\0\u041e"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u041e\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u041e"+
    "\0\u041e\0\u0e4a\0\u0e88\0\u041e\0\u0ec6\0\u0f04\0\u0f42\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u0592\0\u1078\0\u10b6\0\u10f4\0\u05d0"+
    "\0\u1132\0\u041e\0\u060e\0\u060e\0\u1170\0\u041e\0\u11ae\0\u041e"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u09ee\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u041e\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u041e\0\u216c\0\u11ae\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u0592"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u0ae6\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa"+
    "\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u0e88\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c"+
    "\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c"+
    "\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c"+
    "\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c"+
    "\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c"+
    "\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc"+
    "\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec"+
    "\0\u502a\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u0e88"+
    "\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e"+
    "\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e"+
    "\0\u55bc\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e"+
    "\0\u57ac\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e"+
    "\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e"+
    "\0\u5b8c\0\u5bca\0\u5c08\0\u041e\0\u5c46\0\u5c84\0\u5cc2\0\u5d00"+
    "\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0"+
    "\0\u5f2e\0\u5f6c\0\u041e\0\u5faa\0\u5fe8\0\u6026\0\u6064\0\u60a2"+
    "\0\u60e0\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292"+
    "\0\u62d0\0\u630e\0\u634c\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482"+
    "\0\u64c0\0\u64fe\0\u653c\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672"+
    "\0\u66b0\0\u041e\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824"+
    "\0\u041e\0\u6862\0\u68a0\0\u68de\0\u691c\0\u041e\0\u695a\0\u6998"+
    "\0\u0e88\0\u69d6\0\u6a14\0\u6a52\0\u6a90\0\u6ace\0\u6b0c\0\u6b4a"+
    "\0\u6b88\0\u6bc6\0\u6026\0\u0e88\0\u6c04\0\u6c42\0\u6c80\0\u6cbe"+
    "\0\u6cfc\0\u6d3a\0\u6d78\0\u6db6\0\u6df4\0\u6e32\0\u6e70\0\u6eae"+
    "\0\u6eec\0\u6f2a\0\u6f68\0\u6fa6\0\u6fe4\0\u7022\0\u7060\0\u709e"+
    "\0\u70dc\0\u711a\0\u041e\0\u7158\0\u7196\0\u041e\0\u71d4\0\u7212"+
    "\0\u7250\0\u728e\0\u72cc\0\u730a\0\u041e\0\u7348\0\u7386\0\u73c4"+
    "\0\u7402\0\u7440\0\u747e\0\u74bc\0\u74fa\0\u7538\0\u7576\0\u75b4"+
    "\0\u75f2\0\u7630\0\u766e\0\u76ac\0\u76ea\0\u7728\0\u7766\0\u77a4"+
    "\0\u77e2\0\u041e\0\u7820\0\u785e\0\u789c\0\u78da\0\u7918\0\u7956"+
    "\0\u7994\0\u7386\0\u79d2\0\u7a10\0\u7a4e\0\u7a8c\0\u7aca\0\u7b08"+
    "\0\u7b46\0\u7b84\0\u7bc2\0\u7c00\0\u7c3e\0\u7c7c\0\u041e\0\u7cba"+
    "\0\u7cf8\0\u041e\0\u7d36\0\u041e\0\u7d74\0\u7db2\0\u7df0\0\u7e2e"+
    "\0\u0592\0\u7e6c\0\u7eaa\0\u7ee8\0\u7f26\0\u7f64\0\u7fa2\0\u7fe0"+
    "\0\u801e\0\u805c\0\u809a\0\u80d8\0\u8116\0\u041e\0\u041e\0\u8154"+
    "\0\u041e\0\u8192\0\u81d0\0\u820e\0\u824c\0\u828a\0\u82c8\0\u041e"+
    "\0\u8306\0\u8344\0\u8382\0\u83c0\0\u83fe\0\u041e\0\u843c\0\u847a"+
    "\0\u041e\0\u84b8\0\u84f6\0\u8534\0\u8572\0\u85b0\0\u041e\0\u85ee"+
    "\0\u862c\0\u866a\0\u86a8\0\u86e6\0\u041e\0\u8724\0\u8762\0\u041e"+
    "\0\u87a0\0\u87de\0\u881c\0\u885a\0\u041e\0\u8898\0\u88d6\0\u8914"+
    "\0\u8952\0\u8990\0\u87de\0\u89ce\0\u8a0c\0\u8a4a\0\u041e\0\u8a88"+
    "\0\u8ac6\0\u8b04\0\u8b42\0\u8b80\0\u8bbe\0\u87de\0\u8bfc\0\u8c3a"+
    "\0\u8c78\0\u8cb6\0\u8cf4\0\u8d32\0\u8d70\0\u8dae\0\u8dec\0\u8e2a"+
    "\0\u8e68\0\u8ea6\0\u8ee4\0\u8f22\0\u8f60\0\u8f9e\0\u8fdc\0\u8b80"+
    "\0\u901a\0\u9058\0\u8bbe\0\u9096\0\u90d4\0\u9112\0\u9150\0\u041e"+
    "\0\u918e\0\u91cc\0\u89ce\0\u920a\0\u9248\0\u9286\0\u92c4\0\u9302"+
    "\0\u8fdc\0\u041e\0\u9340\0\u937e\0\u93bc\0\u041e\0\u93fa\0\u9438"+
    "\0\u9476\0\u94b4\0\u94f2\0\u9530\0\u956e\0\u95ac\0\u95ea\0\u9628"+
    "\0\u94f2\0\u9666\0\u96a4\0\u96e2\0\u9720\0\u975e\0\u041e\0\u979c"+
    "\0\u97da\0\u9818\0\u041e\0\u9856\0\u9894\0\u9720\0\u97da\0\u98d2"+
    "\0\u9910\0\u994e\0\u998c\0\u99ca\0\u9a08\0\u97da\0\u9894\0\u9a46"+
    "\0\u9a84\0\u9ac2\0\u9b00\0\u99ca\0\u9b3e\0\u9b7c\0\u9a08\0\u9bba"+
    "\0\u98d2\0\u9bf8\0\u9b00\0\u041e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[732];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\20\1\21\5\20\1\22\67\20\1\21\5\20\1\23"+
    "\62\20\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\27\1\34\1\35\1\36\1\35\2\37\1\40"+
    "\1\33\1\35\1\41\1\35\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\27\1\35\1\24\1\56\1\57\1\60\1\35\1\61"+
    "\2\35\1\62\3\35\1\54\2\35\1\24\1\63\1\35"+
    "\1\64\1\65\7\35\1\24\1\66\1\67\1\70\1\67"+
    "\1\66\1\71\2\66\1\67\27\66\1\67\35\66\1\72"+
    "\1\73\1\74\73\72\1\75\1\0\74\75\1\76\1\0"+
    "\43\76\1\77\30\76\1\100\1\0\7\100\2\101\1\100"+
    "\1\101\4\100\3\101\1\102\1\103\3\101\1\104\3\101"+
    "\1\105\1\106\1\101\1\100\1\101\3\100\1\107\10\101"+
    "\1\106\2\101\2\100\1\101\2\100\7\101\1\100\5\0"+
    "\1\110\151\0\1\111\21\0\1\112\75\0\1\113\134\0"+
    "\1\111\36\0\1\114\135\0\1\115\30\0\5\20\1\0"+
    "\5\20\1\0\62\20\47\0\1\116\137\0\1\117\63\0"+
    "\1\25\74\0\1\120\1\0\3\120\1\121\3\30\1\122"+
    "\2\120\1\123\1\120\1\124\2\120\3\123\1\125\3\123"+
    "\1\126\1\127\2\123\1\130\3\123\4\120\2\124\12\123"+
    "\1\131\2\120\1\132\2\120\1\133\6\123\1\134\1\0"+
    "\3\33\3\0\2\33\7\0\1\33\17\0\1\33\42\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\4\35\1\136"+
    "\4\35\1\137\5\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\17\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\1\0\1\140\1\27\1\141\73\140"+
    "\1\142\1\143\2\144\1\142\1\145\2\146\1\144\2\146"+
    "\1\147\1\146\2\142\21\146\1\144\1\146\2\142\1\150"+
    "\1\142\13\146\2\142\1\146\2\142\7\146\1\142\5\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\3\35\1\151"+
    "\5\35\1\152\5\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\7\35\1\153\7\35\1\0\1\35\4\0"+
    "\7\35\1\154\3\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\10\35\1\155"+
    "\6\35\1\0\1\35\4\0\4\35\1\156\6\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\6\35\1\157\10\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\10\35\1\160\1\161\5\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\4\35"+
    "\1\162\12\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\6\35\1\163\10\35\1\0\1\35\4\0\6\35"+
    "\1\164\1\165\3\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\11\35\1\166"+
    "\5\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\5\35\1\167\1\35\1\170\1\35\1\171\5\35\1\0"+
    "\1\35\4\0\4\35\1\172\6\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\5\35\1\173\11\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\5\35\1\174\11\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\4\35\1\175\12\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\10\35\1\176"+
    "\6\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\3\35\1\177\13\35\1\0\1\35\4\0\1\137\12\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\12\35\1\200\4\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\2\0\3\201"+
    "\1\0\1\202\2\0\1\201\1\203\1\0\1\204\6\0"+
    "\1\205\1\0\1\206\1\207\1\210\1\211\1\212\1\213"+
    "\1\214\1\215\1\216\1\217\1\0\1\220\1\201\6\0"+
    "\1\221\2\0\1\222\24\0\1\67\74\0\1\223\1\0"+
    "\7\223\1\224\2\223\1\224\4\223\17\224\6\223\13\224"+
    "\2\223\1\224\2\223\7\224\1\223\1\0\1\73\105\0"+
    "\2\101\1\0\1\101\4\0\17\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\17\101\1\0\1\101\4\0\7\101\1\225"+
    "\3\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\17\101\1\0\1\101\4\0\4\101\1\226"+
    "\6\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\6\101\1\227\10\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\5\101\1\230\11\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\4\101\1\103\12\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\50\0\1\231\27\0"+
    "\2\232\1\111\4\0\1\111\27\0\1\111\4\0\1\115"+
    "\77\0\1\233\75\0\1\234\111\0\1\235\12\0\44\115"+
    "\1\0\1\236\30\115\31\0\1\237\65\0\1\240\65\0"+
    "\1\123\1\30\1\0\1\123\4\0\17\123\6\0\13\123"+
    "\2\0\1\123\2\0\7\123\12\0\1\123\2\0\1\123"+
    "\4\0\17\123\6\0\13\123\2\0\1\123\2\0\7\123"+
    "\12\0\1\123\2\0\1\123\4\0\16\123\1\241\6\0"+
    "\13\123\2\0\1\123\2\0\7\123\12\0\1\123\2\0"+
    "\1\123\4\0\3\123\1\242\13\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\12\0\1\123\2\0\1\123\4\0"+
    "\6\123\1\243\10\123\6\0\13\123\2\0\1\123\2\0"+
    "\7\123\12\0\1\123\2\0\1\123\4\0\2\123\1\244"+
    "\14\123\6\0\13\123\2\0\1\123\2\0\7\123\12\0"+
    "\1\123\2\0\1\123\4\0\6\123\1\245\10\123\6\0"+
    "\13\123\2\0\1\123\2\0\7\123\12\0\1\123\2\0"+
    "\1\123\4\0\3\123\1\246\13\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\12\0\1\123\2\0\1\123\4\0"+
    "\17\123\6\0\13\123\2\0\1\123\2\0\1\123\1\247"+
    "\5\123\76\0\1\35\5\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\5\35\1\250\11\35\1\0\1\35\4\0"+
    "\1\137\12\35\2\0\1\35\2\0\7\35\2\0\3\251"+
    "\1\0\1\135\2\0\1\251\2\35\1\252\1\35\4\0"+
    "\17\35\1\251\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\2\0\1\27\74\0\1\253\1\0\7\253\1\254"+
    "\2\253\1\254\4\253\17\254\6\253\13\254\2\253\1\254"+
    "\2\253\7\254\1\253\1\255\2\143\73\255\5\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\12\35\1\256\4\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\6\35"+
    "\1\257\10\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\7\35\1\260\7\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\5\35\1\261\11\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\3\35\1\262\7\35"+
    "\1\263\1\264\2\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\16\35\1\265\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\12\35\1\266\4\35\1\0\1\35"+
    "\4\0\5\35\1\267\5\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\7\35\1\270\3\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\4\35\1\271\12\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\10\35\1\272\1\273\5\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\3\35\1\274"+
    "\13\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\17\35\1\0\1\35\4\0\4\35\1\275\6\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\7\35\1\276\7\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\7\35\1\277\7\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\17\35\1\0"+
    "\1\35\4\0\11\35\1\300\1\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\16\35\1\301\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\4\35\1\302\12\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\1\35"+
    "\1\303\11\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\1\304\1\35\1\0\1\35\4\0\17\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\12\35\1\305"+
    "\4\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\17\35\1\0\1\35\4\0\4\35\1\156\6\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\17\35\1\0\1\35\4\0\11\35\1\306"+
    "\1\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\1\35\1\307\15\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\10\35\1\137"+
    "\6\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\32\0\1\310\71\0\1\311\4\0\1\312\43\0"+
    "\1\204\2\201\73\204\24\0\1\313\5\0\1\314\73\0"+
    "\1\315\76\0\1\316\73\0\1\317\77\0\1\320\1\321"+
    "\70\0\1\322\77\0\1\323\24\0\1\324\1\325\52\0"+
    "\1\326\71\0\1\327\1\0\1\330\1\0\1\331\17\0"+
    "\1\332\51\0\1\333\75\0\1\334\100\0\1\335\70\0"+
    "\1\336\21\0\1\312\62\0\1\337\53\0\1\224\2\0"+
    "\1\224\4\0\17\224\6\0\13\224\2\0\1\224\2\0"+
    "\7\224\12\0\2\101\1\0\1\101\4\0\5\101\1\340"+
    "\11\101\1\0\1\101\4\0\13\101\2\0\1\101\2\0"+
    "\7\101\12\0\2\101\1\0\1\101\4\0\16\101\1\341"+
    "\1\0\1\101\4\0\13\101\2\0\1\101\2\0\7\101"+
    "\12\0\2\101\1\0\1\101\4\0\3\101\1\342\13\101"+
    "\1\0\1\101\4\0\13\101\2\0\1\101\2\0\7\101"+
    "\12\0\2\101\1\0\1\101\4\0\12\101\1\227\4\101"+
    "\1\0\1\101\4\0\13\101\2\0\1\101\2\0\7\101"+
    "\32\0\1\343\44\0\1\344\3\232\4\344\1\232\2\344"+
    "\1\232\24\344\1\232\4\344\1\345\30\344\31\0\1\346"+
    "\75\0\1\347\70\0\1\350\51\0\44\236\1\351\31\236"+
    "\56\0\1\352\41\0\1\353\3\0\1\354\1\0\1\355"+
    "\3\0\1\356\1\0\1\357\1\360\47\0\1\123\2\0"+
    "\1\123\4\0\12\123\1\361\4\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\12\0\1\123\2\0\1\123\4\0"+
    "\4\123\1\362\12\123\6\0\13\123\2\0\1\123\2\0"+
    "\7\123\12\0\1\123\2\0\1\123\4\0\14\123\1\363"+
    "\2\123\6\0\13\123\2\0\1\123\2\0\7\123\12\0"+
    "\1\123\2\0\1\123\4\0\10\123\1\364\6\123\6\0"+
    "\13\123\2\0\1\123\2\0\7\123\12\0\1\123\2\0"+
    "\1\123\4\0\10\123\1\365\1\366\5\123\6\0\13\123"+
    "\2\0\1\123\2\0\7\123\12\0\1\123\2\0\1\123"+
    "\4\0\17\123\6\0\1\123\1\367\11\123\2\0\1\123"+
    "\2\0\7\123\12\0\1\123\2\0\1\123\4\0\17\123"+
    "\6\0\13\123\2\0\1\123\2\0\2\123\1\370\4\123"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\5\35\1\371\5\35\2\0\1\35"+
    "\2\0\7\35\2\0\3\251\4\0\1\251\2\0\1\252"+
    "\24\0\1\251\35\0\1\252\2\251\73\252\11\0\1\254"+
    "\2\0\1\254\4\0\17\254\6\0\13\254\2\0\1\254"+
    "\2\0\7\254\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\10\35\1\277\6\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\3\35"+
    "\1\372\7\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\16\35\1\373\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\11\35\1\374"+
    "\5\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\4\35\1\375\12\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\4\35\1\376\12\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\4\35\1\377\6\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\10\35\1\u0100"+
    "\6\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\1\u0101\1\35\1\0\1\35"+
    "\4\0\17\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\11\35\1\u0102\5\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\1\137"+
    "\1\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\11\35\1\u0103\1\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\6\35\1\u0104"+
    "\5\35\1\u0105\2\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\17\35\1\0\1\35\4\0\5\35\1\200"+
    "\5\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\1\35\1\u0106\11\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\3\35\1\u0107"+
    "\13\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\4\35\1\u0108\12\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\12\35\1\137\4\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\7\35\1\u0109\7\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\5\35\1\270"+
    "\11\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\4\35\1\u010a\12\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\12\35\1\u010b\4\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\2\35\1\137\14\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\3\35\1\274"+
    "\13\35\1\0\1\35\4\0\3\35\1\372\7\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\17\35\1\0\1\35\4\0\11\35\1\u010c"+
    "\1\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\2\35\1\137\10\35\2\0\1\35\2\0\7\35\30\0"+
    "\1\u010d\74\0\1\u010e\17\0\1\312\30\0\3\312\4\0"+
    "\1\312\2\0\1\u010f\24\0\1\312\70\0\1\u0110\71\0"+
    "\1\u0111\76\0\1\u0112\71\0\1\u0113\7\0\1\u0114\1\u0115"+
    "\73\0\1\u0116\17\0\1\u0117\77\0\1\u0118\45\0\1\u0119"+
    "\101\0\1\u011a\1\u011b\67\0\1\u011c\123\0\1\u011d\53\0"+
    "\1\u011e\75\0\1\u011f\124\0\1\u0120\55\0\1\u0121\63\0"+
    "\1\u0122\117\0\1\u0123\37\0\1\u0124\117\0\1\u0125\121\0"+
    "\1\u0126\40\0\1\u0127\104\0\1\312\55\0\2\101\1\0"+
    "\1\101\4\0\11\101\1\u0128\5\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\10\101\1\u0129\6\101\1\0\1\101\4\0"+
    "\13\101\2\0\1\101\2\0\7\101\12\0\2\101\1\0"+
    "\1\101\4\0\17\101\1\0\1\101\4\0\1\101\1\u012a"+
    "\11\101\2\0\1\101\2\0\7\101\57\0\1\u012b\17\0"+
    "\1\344\2\0\10\344\1\232\62\344\1\345\2\115\10\345"+
    "\1\u012c\30\345\1\344\1\u012d\30\345\56\0\1\u012e\75\0"+
    "\1\u012f\66\0\1\u0130\26\0\44\351\1\0\31\351\26\0"+
    "\1\u0131\72\0\1\u0132\101\0\1\u0133\73\0\1\u0134\4\0"+
    "\1\u0135\75\0\1\u0136\71\0\1\u0137\101\0\1\u0138\54\0"+
    "\1\123\2\0\1\123\4\0\11\123\1\u0139\5\123\6\0"+
    "\13\123\2\0\1\123\2\0\7\123\12\0\1\123\2\0"+
    "\1\123\4\0\10\123\1\u013a\6\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\2\0\3\u013b\4\0\1\u013b\1\123"+
    "\1\0\1\u013c\1\123\4\0\17\123\1\u013b\3\0\1\u013d"+
    "\1\0\13\123\2\0\1\123\2\0\7\123\12\0\1\123"+
    "\2\0\1\123\4\0\4\123\1\u013e\12\123\6\0\13\123"+
    "\2\0\1\123\2\0\7\123\12\0\1\123\2\0\1\123"+
    "\4\0\13\123\1\u013f\3\123\6\0\13\123\2\0\1\123"+
    "\2\0\7\123\12\0\1\u0140\2\0\1\123\4\0\17\123"+
    "\6\0\13\123\2\0\1\123\2\0\7\123\12\0\1\123"+
    "\2\0\1\123\4\0\10\123\1\u0141\6\123\6\0\13\123"+
    "\2\0\1\123\2\0\7\123\12\0\1\123\2\0\1\123"+
    "\4\0\17\123\6\0\13\123\2\0\1\123\2\0\3\123"+
    "\1\u0142\3\123\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\5\35\1\u0143\11\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\4\35"+
    "\1\u0144\6\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\5\35\1\u0145\11\35"+
    "\1\0\1\35\4\0\1\137\12\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\17\35\1\0\1\35\4\0\11\35\1\u0100\1\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\4\35\1\u0146\12\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\5\35\1\u0147\11\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\1\35\1\200"+
    "\15\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\3\35\1\u0148\13\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\17\35\1\0\1\35\4\0\2\35\1\200"+
    "\10\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\3\35\1\u0149\13\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\10\35\1\u014a"+
    "\6\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\5\35\1\u014b\11\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\16\35\1\u014c\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\16\35\1\u014d\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\10\35\1\u014e\6\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\16\35\1\u014f"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\1\137\12\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\1\u0150\1\35\1\0\1\35"+
    "\4\0\17\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\3\35\1\137\13\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\36\0\1\u0151\113\0\1\u0152"+
    "\22\0\1\u010f\2\312\73\u010f\31\0\1\u011f\115\0\1\u0153"+
    "\63\0\1\u0154\63\0\1\u0155\75\0\1\u0156\122\0\1\u0157"+
    "\34\0\1\u0158\116\0\1\u0159\54\0\1\312\143\0\1\u015a"+
    "\45\0\1\u015b\5\0\1\u015c\113\0\1\337\71\0\1\u015d"+
    "\52\0\1\u015e\76\0\1\u015f\103\0\1\312\72\0\1\u0160"+
    "\73\0\1\u0118\74\0\1\u0154\103\0\1\u0161\65\0\1\312"+
    "\76\0\1\u011c\24\0\1\u0153\103\0\1\u0162\66\0\1\312"+
    "\36\0\2\101\1\0\1\101\4\0\17\101\1\0\1\101"+
    "\4\0\11\101\1\u0129\1\101\2\0\1\101\2\0\7\101"+
    "\12\0\2\101\1\0\1\101\4\0\16\101\1\u0163\1\0"+
    "\1\101\4\0\13\101\2\0\1\101\2\0\7\101\27\0"+
    "\1\u0164\47\0\1\345\3\u012c\4\345\1\u012c\2\345\1\u012c"+
    "\24\345\1\u012c\3\345\1\344\1\u012d\30\345\1\u012d\2\236"+
    "\10\u012d\1\u0165\30\u012d\1\u0166\31\u012d\26\0\1\u0167\75\0"+
    "\1\u0168\100\0\1\u0169\73\0\1\u016a\72\0\1\u016b\73\0"+
    "\1\353\11\0\1\u016c\72\0\1\u016d\77\0\1\u016e\67\0"+
    "\1\u016f\107\0\1\u0170\60\0\1\u0171\64\0\1\123\2\0"+
    "\1\123\4\0\6\123\1\u0172\10\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\2\0\3\u013b\4\0\1\u013b\2\0"+
    "\1\u013c\24\0\1\u013b\3\0\1\u013d\31\0\1\u013c\2\u013b"+
    "\73\u013c\11\0\1\u0173\12\0\1\u0174\6\0\1\u0175\22\0"+
    "\1\u0176\1\0\1\u0177\26\0\1\123\2\0\1\123\4\0"+
    "\10\123\1\u0178\6\123\6\0\13\123\2\0\1\123\2\0"+
    "\7\123\12\0\1\123\2\0\1\123\4\0\7\123\1\u0179"+
    "\7\123\6\0\13\123\2\0\1\123\2\0\7\123\12\0"+
    "\1\123\2\0\1\123\4\0\10\123\1\u017a\6\123\6\0"+
    "\13\123\2\0\1\123\2\0\7\123\12\0\1\123\2\0"+
    "\1\123\4\0\16\123\1\u017b\6\0\13\123\2\0\1\123"+
    "\2\0\7\123\12\0\1\123\2\0\1\123\4\0\17\123"+
    "\6\0\13\123\2\0\1\123\2\0\4\123\1\u017c\2\123"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\3\35"+
    "\1\u017d\13\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\6\35\1\u017e\10\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\10\35\1\u017f\6\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\3\35\1\u0180\13\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\1\200\1\35\1\0\1\35\4\0"+
    "\17\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\6\35\1\u0181\10\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\16\35\1\u0182\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\7\35"+
    "\1\137\3\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\1\35\1\u0183\15\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\10\35"+
    "\1\u0184\6\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\5\35\1\u0185\11\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\12\35\1\u0186\4\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\5\35\1\u0187\11\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\5\35"+
    "\1\u0188\11\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\45\0\1\u0189\57\0\1\u018a\121\0\1\u018b"+
    "\71\0\1\312\54\0\1\u018c\76\0\1\u018d\71\0\1\337"+
    "\77\0\1\u018e\121\0\1\337\51\0\1\u018f\102\0\1\u0190"+
    "\72\0\1\u0191\106\0\1\u0192\75\0\1\u0193\67\0\1\u0194"+
    "\103\0\1\u0195\47\0\1\u0196\110\0\1\312\62\0\2\101"+
    "\1\0\1\101\4\0\10\101\1\u0197\6\101\1\0\1\101"+
    "\4\0\13\101\2\0\1\101\2\0\7\101\30\0\1\u0198"+
    "\46\0\1\u012d\3\u0165\4\u012d\1\u0165\2\u012d\1\u0165\24\u012d"+
    "\1\u0165\3\u012d\1\u0166\31\u012d\1\u0166\2\351\10\u0166\1\u0199"+
    "\30\u0166\1\344\31\u0166\27\0\1\u019a\75\0\1\u019b\105\0"+
    "\1\u019c\37\0\3\u016a\4\0\1\u016a\2\0\1\u019d\24\0"+
    "\1\u016a\3\0\1\u019e\14\0\1\u019f\41\0\1\u01a0\102\0"+
    "\1\u01a1\65\0\1\353\11\0\1\u01a2\52\0\1\u01a3\121\0"+
    "\1\u01a4\71\0\1\u01a5\54\0\1\u0171\1\0\1\u01a6\25\0"+
    "\1\u0171\1\u01a6\1\u01a7\44\0\1\u01a8\2\0\1\123\4\0"+
    "\17\123\6\0\13\123\2\0\1\123\2\0\7\123\24\0"+
    "\1\u01a9\127\0\1\u01aa\42\0\1\u01ab\104\0\1\u01ac\74\0"+
    "\1\u01ad\1\u01ae\1\0\1\u01af\53\0\1\123\2\0\1\123"+
    "\4\0\3\123\1\u01b0\13\123\6\0\13\123\2\0\1\123"+
    "\2\0\7\123\2\0\3\u01b1\4\0\1\u01b1\1\123\1\0"+
    "\1\u01b2\1\123\4\0\17\123\1\u01b1\3\0\1\u01b3\1\0"+
    "\13\123\2\0\1\123\2\0\7\123\2\0\3\u01b4\4\0"+
    "\1\u01b4\1\123\1\0\1\u01b5\1\123\4\0\17\123\1\u01b4"+
    "\3\0\1\u01b6\1\0\13\123\2\0\1\123\2\0\7\123"+
    "\12\0\1\123\2\0\1\123\4\0\17\123\6\0\13\123"+
    "\2\0\1\123\2\0\5\123\1\u01b7\1\123\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\16\35\1\137\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\1\35\1\u01b8"+
    "\15\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\2\35\1\0\1\35\4\0"+
    "\12\35\1\u01b9\4\35\1\0\1\35\4\0\13\35\2\0"+
    "\1\35\2\0\7\35\6\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\6\35\1\u01ba\10\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\1\u01bb\1\35\1\0\1\35\4\0\17\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\5\35\1\u01bc\11\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\3\35"+
    "\1\u0147\13\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\14\35\1\137\2\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\1\u010a"+
    "\1\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\12\35\1\u01bd\4\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\15\35\1\u010a"+
    "\1\35\1\0\1\35\4\0\13\35\2\0\1\35\2\0"+
    "\7\35\6\0\1\135\3\0\1\u01be\1\35\1\0\1\35"+
    "\4\0\17\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\61\0\1\u01bf\41\0\1\u01c0\100\0\1\u01c1"+
    "\72\0\1\u01c2\62\0\1\337\113\0\1\u01c3\105\0\1\u01c4"+
    "\113\0\1\312\42\0\1\u01c5\104\0\1\u01c6\72\0\1\u01c7"+
    "\102\0\1\u01c8\70\0\1\u01c9\75\0\1\u01ca\60\0\2\101"+
    "\1\0\1\101\4\0\14\101\1\u0129\2\101\1\0\1\101"+
    "\4\0\13\101\2\0\1\101\2\0\7\101\2\0\3\u0198"+
    "\4\0\1\u0198\2\0\1\u01cb\24\0\1\u0198\20\0\1\u01cc"+
    "\14\0\1\u0166\3\u0199\4\u0166\1\u0199\2\u0166\1\u0199\24\u0166"+
    "\1\u0199\3\u0166\1\344\1\345\30\u0166\1\0\3\u019a\4\0"+
    "\1\u019a\2\0\1\u01cd\24\0\1\u019a\3\0\1\u01ce\32\0"+
    "\3\u019b\4\0\1\u019b\2\0\1\u01cf\24\0\1\u019b\3\0"+
    "\1\u01d0\32\0\3\u019c\4\0\1\u019c\2\0\1\u01d1\24\0"+
    "\1\u019c\3\0\1\u01d2\31\0\1\u019d\2\u016a\73\u019d\11\0"+
    "\1\u01d3\12\0\1\u01d4\6\0\1\u01d5\22\0\1\u01d6\1\0"+
    "\1\u01d7\52\0\1\u01d8\40\0\1\u01a0\1\u01d9\1\u01da\73\u01a0"+
    "\25\0\1\u01db\102\0\1\u01dc\65\0\1\353\11\0\1\u01dd"+
    "\41\0\1\u01a5\1\u01de\1\u01df\73\u01a5\12\0\1\u01a6\26\0"+
    "\1\u01a6\1\u01a7\45\0\1\u01a7\26\0\1\u01a7\1\0\1\u01e0"+
    "\43\0\1\123\2\0\1\123\4\0\12\123\1\u01e1\4\123"+
    "\6\0\13\123\2\0\1\123\2\0\7\123\32\0\1\u01e2"+
    "\101\0\1\u01e3\63\0\1\u01e4\101\0\1\u01e5\73\0\1\u01e6"+
    "\105\0\1\u01e7\71\0\1\u01e8\55\0\1\123\2\0\1\123"+
    "\4\0\17\123\6\0\10\123\1\u01e9\2\123\2\0\1\123"+
    "\2\0\7\123\2\0\3\u01b1\4\0\1\u01b1\2\0\1\u01b2"+
    "\24\0\1\u01b1\3\0\1\u01b3\31\0\1\u01b2\2\u01b1\73\u01b2"+
    "\1\0\3\u01b4\4\0\1\u01b4\2\0\1\u01b5\24\0\1\u01b4"+
    "\3\0\1\u01b6\31\0\1\u01b5\2\u01b4\73\u01b5\44\u01b6\1\u01ea"+
    "\1\u01eb\30\u01b6\11\0\1\123\2\0\1\123\4\0\17\123"+
    "\6\0\13\123\2\0\1\123\2\0\6\123\1\u01ec\6\0"+
    "\1\135\3\0\1\u01ed\1\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\u01ee\3\0\2\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\6\0\1\135\3\0\2\35\1\0\1\35\4\0\17\35"+
    "\1\0\1\35\4\0\10\35\1\200\2\35\2\0\1\35"+
    "\2\0\7\35\6\0\1\135\3\0\2\35\1\0\1\35"+
    "\4\0\5\35\1\u0183\11\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\12\35"+
    "\1\u01ef\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\5\35\1\u01f0\11\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\6\0"+
    "\1\135\3\0\2\35\1\0\1\35\4\0\17\35\1\0"+
    "\1\35\4\0\4\35\1\u0147\6\35\2\0\1\35\2\0"+
    "\7\35\31\0\1\u01f1\104\0\1\312\60\0\1\u01f2\102\0"+
    "\1\u01f3\57\0\1\u01f4\112\0\1\u01f5\73\0\1\u018d\106\0"+
    "\1\312\51\0\1\u0154\117\0\1\u01f6\100\0\1\u0154\50\0"+
    "\1\u01f7\64\0\1\u01cb\2\u0198\73\u01cb\35\0\1\u01f8\40\0"+
    "\1\u01cd\2\u019a\73\u01cd\33\0\1\u01f9\42\0\1\u01cf\2\u019b"+
    "\73\u01cf\60\0\1\u01fa\15\0\1\u01d1\2\u019c\73\u01d1\23\0"+
    "\1\u01fb\127\0\1\u01fc\42\0\1\u01fd\104\0\1\u01fe\74\0"+
    "\1\u01ff\1\u0200\1\0\1\u0201\70\0\1\u0202\50\0\1\u01d9"+
    "\131\0\1\u0203\65\0\1\u0204\102\0\1\u0205\44\0\1\u01de"+
    "\75\0\1\u0206\1\u0207\7\0\1\u01e0\26\0\1\u01e0\66\0"+
    "\1\u0208\74\0\1\u0209\75\0\1\u020a\101\0\1\u020b\72\0"+
    "\1\u020c\110\0\1\u020d\52\0\1\u020e\64\0\1\123\2\0"+
    "\1\123\4\0\10\123\1\u0139\6\123\6\0\13\123\2\0"+
    "\1\123\2\0\7\123\1\0\44\u01ea\1\0\1\u020f\30\u01ea"+
    "\5\0\1\135\3\0\2\35\1\0\1\35\4\0\5\35"+
    "\1\273\11\35\1\0\1\35\4\0\13\35\2\0\1\35"+
    "\2\0\7\35\76\0\1\u0210\5\0\1\135\3\0\2\35"+
    "\1\0\1\35\4\0\3\35\1\u0211\13\35\1\0\1\35"+
    "\4\0\13\35\2\0\1\35\2\0\7\35\6\0\1\135"+
    "\3\0\2\35\1\0\1\35\4\0\11\35\1\u0212\5\35"+
    "\1\0\1\35\4\0\13\35\2\0\1\35\2\0\7\35"+
    "\26\0\1\u0213\61\0\1\u0214\142\0\1\337\45\0\1\u01c5"+
    "\127\0\1\u0215\43\0\1\u0216\121\0\1\u018d\51\0\1\u0217"+
    "\71\0\1\u0218\103\0\1\u0219\76\0\1\u021a\101\0\1\u021b"+
    "\63\0\1\u021c\101\0\1\u021d\73\0\1\u021e\105\0\1\u021f"+
    "\71\0\1\u0220\77\0\1\u0221\77\0\1\u0222\65\0\1\u0223"+
    "\51\0\1\u0206\121\0\1\u0224\106\0\1\u0225\116\0\1\u0226"+
    "\47\0\1\u0227\76\0\1\u0228\54\0\1\u0229\64\0\44\u020f"+
    "\1\0\1\u022a\30\u020f\5\0\1\135\3\0\1\u022b\1\35"+
    "\1\0\1\35\4\0\17\35\1\0\1\35\4\0\13\35"+
    "\2\0\1\35\2\0\7\35\6\0\1\135\3\0\1\u01bd"+
    "\1\35\1\0\1\35\4\0\17\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\6\0\1\135\3\0"+
    "\2\35\1\0\1\35\4\0\6\35\1\137\10\35\1\0"+
    "\1\35\4\0\13\35\2\0\1\35\2\0\7\35\33\0"+
    "\1\u022c\71\0\1\u011b\73\0\1\u022d\103\0\1\u022e\76\0"+
    "\1\u022f\65\0\1\u0230\77\0\1\u0231\102\0\1\u0232\74\0"+
    "\1\u0233\75\0\1\u0234\101\0\1\u0235\72\0\1\u0236\110\0"+
    "\1\u0237\52\0\1\u0238\77\0\1\u0239\106\0\1\u023a\71\0"+
    "\1\u023b\111\0\1\u023c\54\0\1\u023d\107\0\1\u023e\75\0"+
    "\1\u023f\65\0\1\u0240\54\0\1\135\3\0\2\35\1\0"+
    "\1\35\4\0\11\35\1\u0241\5\35\1\0\1\35\4\0"+
    "\13\35\2\0\1\35\2\0\7\35\33\0\1\u0242\54\0"+
    "\1\u01f6\113\0\1\312\72\0\1\u0243\102\0\1\u0244\76\0"+
    "\1\u0245\70\0\1\u0246\106\0\1\u0247\116\0\1\u0248\47\0"+
    "\1\u0249\76\0\1\u024a\54\0\1\u024b\133\0\1\u024c\105\0"+
    "\1\u024d\63\0\1\u024e\75\0\1\u024f\63\0\1\u0250\11\0"+
    "\1\u0251\62\0\1\u0252\101\0\1\u0253\106\0\1\u0254\105\0"+
    "\1\u0255\50\0\1\u0256\74\0\1\u0257\111\0\1\u0258\54\0"+
    "\1\u0259\107\0\1\u025a\75\0\1\u025b\65\0\1\u025c\106\0"+
    "\1\u025d\103\0\1\u025e\61\0\1\u025f\73\0\1\u0260\113\0"+
    "\1\u0261\67\0\1\u0262\62\0\1\u0263\107\0\1\u0264\116\0"+
    "\1\u0265\63\0\1\u0266\75\0\1\u0267\63\0\1\u0268\11\0"+
    "\1\u0269\62\0\1\u026a\74\0\1\u026b\66\0\1\u026c\120\0"+
    "\1\u026d\61\0\1\u026e\111\0\1\u019c\63\0\1\u026f\107\0"+
    "\1\u0270\31\0\3\u0266\4\0\1\u0266\2\0\1\u0271\24\0"+
    "\1\u0266\3\0\1\u0272\62\0\1\u0273\45\0\3\u0269\4\0"+
    "\1\u0269\2\0\1\u0274\24\0\1\u0269\20\0\1\u0275\43\0"+
    "\1\u0276\103\0\1\u0277\51\0\1\u0278\121\0\1\u0279\71\0"+
    "\1\u027a\44\0\1\u0271\2\u0266\73\u0271\44\u027b\1\u027c\1\u027d"+
    "\30\u027b\22\0\1\u027e\53\0\1\u0274\2\u0269\73\u0274\45\0"+
    "\1\u027f\112\0\1\u0280\41\0\1\u0281\131\0\1\u0282\35\0"+
    "\1\u0283\53\0\44\u027c\1\0\1\u0284\30\u027c\1\u027b\3\u027d"+
    "\4\u027b\1\u027d\2\u027b\1\u0285\24\u027b\1\u027d\3\u027b\1\u027c"+
    "\1\u027d\13\u027b\1\u0286\14\u027b\11\0\1\u0287\65\0\3\u0288"+
    "\4\0\1\u0288\2\0\1\u0289\24\0\1\u0288\3\0\1\u028a"+
    "\63\0\1\u028b\107\0\1\u01ce\42\0\1\u028c\64\0\44\u0284"+
    "\1\0\1\u028d\30\u0284\1\u0285\2\u027d\41\u0285\1\u028e\1\u028f"+
    "\30\u0285\26\0\1\u0290\50\0\3\u0288\4\0\1\u0288\2\0"+
    "\1\u0289\24\0\1\u0288\3\0\1\u0291\31\0\1\u0289\2\u0288"+
    "\73\u0289\11\0\1\u0292\21\0\1\u0293\24\0\1\u0294\44\0"+
    "\1\u0295\74\0\1\u0296\47\0\1\u0284\3\u028d\4\u0284\1\u028d"+
    "\2\u0284\1\u0297\24\u0284\1\u028d\3\u0284\1\0\1\u028d\13\u0284"+
    "\1\u0298\14\u0284\1\u028e\2\u0299\41\u028e\1\u029a\1\u0297\30\u028e"+
    "\1\u0285\2\u027d\1\u028f\4\u0285\1\u028f\27\u0285\1\u028f\3\u0285"+
    "\1\u028e\1\u028f\13\u0285\1\u029b\14\u0285\32\0\1\u029c\54\0"+
    "\1\u0292\107\0\1\u029d\74\0\1\u029e\104\0\1\u029f\111\0"+
    "\1\u02a0\62\0\1\u02a1\43\0\1\u0297\2\u028d\41\u0297\1\u029a"+
    "\1\u02a2\30\u0297\1\u027c\3\u0299\4\u027c\1\u0299\2\u027c\1\u028e"+
    "\24\u027c\1\u0299\3\u027c\1\0\1\u0284\13\u027c\1\u02a3\14\u027c"+
    "\1\u029a\2\u02a4\73\u029a\27\0\1\u02a5\77\0\1\u02a6\67\0"+
    "\1\u02a7\107\0\1\u02a8\67\0\1\u0263\46\0\1\u0297\2\u028d"+
    "\1\u02a2\4\u0297\1\u02a2\27\u0297\1\u02a2\3\u0297\1\u029a\1\u02a2"+
    "\13\u0297\1\u02a9\14\u0297\1\0\3\u02a4\4\0\1\u02a4\2\0"+
    "\1\u029a\24\0\1\u02a4\20\0\1\u02aa\61\0\1\u02ab\62\0"+
    "\1\u02ac\74\0\1\u02ad\111\0\1\u02ae\31\0\3\u02ab\4\0"+
    "\1\u02ab\2\0\1\u02af\24\0\1\u02ab\3\0\1\u02b0\56\0"+
    "\1\u02b1\127\0\1\u02b2\16\0\1\u02af\2\u02ab\73\u02af\44\u02b0"+
    "\1\u02b3\1\u02b4\30\u02b0\31\0\1\u02b5\70\0\1\u02b6\51\0"+
    "\44\u02b3\1\0\1\u02b7\30\u02b3\1\u02b0\3\u02b4\4\u02b0\1\u02b4"+
    "\2\u02b0\1\u02b8\24\u02b0\1\u02b4\3\u02b0\1\u02b9\1\u02b4\30\u02b0"+
    "\57\0\1\u02ba\63\0\1\u02bb\30\0\44\u02b7\1\0\1\u02bc"+
    "\30\u02b7\1\u02b8\2\u02b4\41\u02b8\1\u02bd\1\u02be\30\u02b8\45\0"+
    "\1\u02bf\31\0\3\u02bb\4\0\1\u02bb\2\0\1\u02c0\24\0"+
    "\1\u02bb\3\0\1\u02c1\31\0\1\u02b7\3\u02bc\4\u02b7\1\u02bc"+
    "\2\u02b7\1\u02c2\24\u02b7\1\u02bc\3\u02b7\1\u02c3\1\u02bc\30\u02b7"+
    "\1\u02bd\2\u02c4\41\u02bd\1\u02c5\1\u02c2\30\u02bd\1\u02b8\2\u02b4"+
    "\1\u02be\4\u02b8\1\u02be\27\u02b8\1\u02be\3\u02b8\1\u02c6\1\u02be"+
    "\30\u02b8\1\u02c0\2\u02bb\73\u02c0\44\u02c7\1\u02c8\1\u02c9\30\u02c7"+
    "\1\u02c2\2\u02bc\41\u02c2\1\u02c5\1\u02ca\30\u02c2\1\u02b3\3\u02c4"+
    "\4\u02b3\1\u02c4\2\u02b3\1\u02bd\24\u02b3\1\u02c4\3\u02b3\1\u02c3"+
    "\1\u02b7\30\u02b3\1\u02c5\2\u02cb\73\u02c5\44\u02c8\1\0\1\u02cc"+
    "\30\u02c8\1\u02c7\3\u02c9\4\u02c7\1\u02c9\2\u02c7\1\u02cd\24\u02c7"+
    "\1\u02c9\3\u02c7\1\u02c8\1\u02c9\13\u02c7\1\u02ce\14\u02c7\1\u02c2"+
    "\2\u02bc\1\u02ca\4\u02c2\1\u02ca\27\u02c2\1\u02ca\3\u02c2\1\u02cf"+
    "\1\u02ca\30\u02c2\1\0\3\u02cb\4\0\1\u02cb\2\0\1\u02c5"+
    "\24\0\1\u02cb\3\0\1\u02c3\31\0\44\u02cc\1\0\1\u02d0"+
    "\30\u02cc\1\u02cd\2\u02c9\41\u02cd\1\u02d1\1\u02d2\30\u02cd\1\u02cc"+
    "\3\u02d0\4\u02cc\1\u02d0\2\u02cc\1\u02d3\24\u02cc\1\u02d0\3\u02cc"+
    "\1\0\1\u02d0\13\u02cc\1\u02d4\14\u02cc\1\u02d1\2\u02d5\41\u02d1"+
    "\1\u02d6\1\u02d3\30\u02d1\1\u02cd\2\u02c9\1\u02d2\4\u02cd\1\u02d2"+
    "\27\u02cd\1\u02d2\3\u02cd\1\u02d1\1\u02d2\13\u02cd\1\u02d7\14\u02cd"+
    "\1\u02d3\2\u02d0\41\u02d3\1\u02d6\1\u02d8\30\u02d3\1\u02c8\3\u02d5"+
    "\4\u02c8\1\u02d5\2\u02c8\1\u02d1\24\u02c8\1\u02d5\3\u02c8\1\0"+
    "\1\u02cc\13\u02c8\1\u02d9\14\u02c8\1\u02d6\2\u02da\73\u02d6\1\u02d3"+
    "\2\u02d0\1\u02d8\4\u02d3\1\u02d8\27\u02d3\1\u02d8\3\u02d3\1\u02d6"+
    "\1\u02d8\13\u02d3\1\u02db\14\u02d3\1\0\3\u02da\4\0\1\u02da"+
    "\2\0\1\u02d6\24\0\1\u02da\20\0\1\u02dc\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39990];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\4\0\1\1\7\0\2\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\1\11\5\1\1\11\15\1\3\11"+
    "\3\1\4\11\2\1\2\11\1\1\4\11\6\1\1\11"+
    "\5\0\1\1\2\0\2\11\2\1\1\11\10\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\0\2\1\1\11\1\1"+
    "\1\11\30\1\22\0\1\11\5\1\5\0\1\1\2\0"+
    "\11\1\1\0\1\11\1\1\1\0\32\1\2\0\1\1"+
    "\25\0\3\1\2\0\1\1\3\0\1\1\7\0\34\1"+
    "\33\0\3\1\1\0\2\1\13\0\2\1\3\0\23\1"+
    "\22\0\1\1\1\0\2\1\13\0\1\1\5\0\21\1"+
    "\16\0\1\1\1\0\1\1\6\0\1\1\3\0\1\11"+
    "\3\0\1\1\7\0\1\1\2\0\1\11\3\0\10\1"+
    "\23\0\1\11\6\0\1\11\1\1\3\0\1\11\1\1"+
    "\1\0\1\1\7\0\1\1\1\0\3\1\1\0\2\1"+
    "\22\0\1\11\2\0\1\11\1\1\5\0\1\11\2\0"+
    "\3\1\17\0\1\11\7\0\2\1\13\0\1\11\2\0"+
    "\1\11\1\0\1\11\4\0\1\1\14\0\2\11\1\0"+
    "\1\11\6\0\1\11\5\0\1\11\2\0\1\11\4\0"+
    "\1\1\1\11\1\0\1\1\3\0\1\11\2\0\1\11"+
    "\1\0\1\1\2\0\1\11\11\0\1\11\6\0\1\1"+
    "\21\0\1\1\2\0\1\1\4\0\1\11\2\0\1\1"+
    "\5\0\1\1\1\11\3\0\1\11\12\0\1\1\5\0"+
    "\1\11\1\0\1\1\1\0\1\11\2\0\1\1\7\0"+
    "\2\1\4\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[732];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  /**
   * <p>
   * The latex markup function for the current section to be scanned.
   * It must be kept up to date by another class that recognises
   * section headers.
   * </p>
   */
  private LatexMarkupFunction latexCommands_ = null;



  /**
   * A stack of BraceType.
   * Each "{"-token pushs a BraceType on the stack,
   * each "}"-token pops a BraceType from the stack.
   *
   * A "^"-token followed by "{"-token pushs
   * a <code>BraceType.SUPER</code>
   * (no space to be inserted after the scripts)
   * or <code>BraceType.SUPER_SPACE</code>
   * (space has to be inserted after
   * the scripts) on the stack.  A "_"-token followed by "{"-token pushs
   * a <code>BraceType.SUB</code>
   * (no space to be inserted after the scripts)
   * or <code>BraceType.SUB_SPACE</code>
   * (space has to be inserted after
   * the scripts) on the stack.
   * The "{"-token that encloses a schema name
   * pushes a  <code>BraceType.NAME</code>
   * (space has to be inserted after closing brace) on the stack.
   * All other "{"-token just push a
   * <code>BraceType.BRACE</code> on the stack.
   */
  private Stack<BraceType> braceStack_ = new Stack<BraceType>();

  /**
   * A boolean indicating whether a space has to inserted after all
   * following subscripts and superscripts.
   */
  private boolean addSpace_ = false;

  private boolean catchingThmName_ = false;

  /**
   * True iff we are scanning a directive.
   */
  private boolean directive_ = false;

  /**
   * True iff within a axdef or gendef definition
   * It can be used to mark labelled predicates.
   */
   
  private boolean inAxiomaticBox_ = false;

   
  private boolean inSchemaBox_ = false;

  
  /**
   * A boolean indicating whether we are within a zproof script or not.
   */
  private boolean inProofScript_ = false;

  /**
   * Apply commands are complex:
   *    a) APPLY thm-name ";"
   *    b) APPLY thm-name TO EXPRESSION/PREDICATE expr/pred ";"
   *
   * We add a small (4) state(s) machine to control adding spaces and making
   * the inner words as Proof words rather than Unicode.
   *
   * a) (-1) "apply" (0) name (1) ";"  (-1)
   * b) (-1) "apply" (0) name (1) "to" (2) "expression" (-1)
   *
   * -1 = not within apply cmd yet
   *  0 = just seen "apply" kw; wait for name
   *  1 = just seen thm-name; wait for ";" and reset or wait "to"
   *  2 = just seen "to"; wait for "expression" and reset
   *
   * where "name" lexis as the (LETTER | DIGIT)* group. We addSpace_=true
   * just before (1) and (2); just after "expression" in state (2).
   */
  //private int NOT_WITHIN_APPLY = -1;
  //private int JUST_AFTER_APPLY =  0;
  //private int JUST_AFTER_THMNM =  1;
  //private int JUST_AFTER_TO    =  2;
  //private int applyState_      = NOT_WITHIN_APPLY;

  private LocToken synDefOpName_ = null;

  

  /**
   * The source to be scanned.
   */
  private Source source_ = null;

  private SectionInfo sectInfo_;

  private Properties properties_;

  /**
   * A stack of open \begin{something} commands.
   * The stack just contains the string inside the braces
   * ("something" in the example above).
   * This information is only used to check whether every \begin command
   * has a corresponding \end command (making it possible to
   * provide an error message and warning if not). It is not needed
   * by the scanner itself.
   */
  private final Stack<String> openBeginCommands_ = new Stack<String>();

  /**
   * Name of file from which source text originated.
   */
  private String filename_;

  /** 
   * Line number given in most recent %%Zloc directive.
   */
  private int locLine = 1;   

  /** 
   * Column number given in most recent %%Zloc directive.
   */
  private int locColumn = 1;

  /** 
   * Character number given in most recent %%Zloc directive.
   */
  private int locChar = 0;

  /**
   * Line number in source text of line following most recent %%Zloc directive.
   */
  private int locyyline = 1;

  /**
   * Character number in source text of character following most recent %%Zloc directive.
   */
  private int locyychar = 0;

  // dialect is a final attribute determined at construction time
  // depending on the extension being used (i.e. decided at XML transformation time).
  // this is useful for fine-tuned error information. If no extension is chosen we 
  // get a compilation error (i.e. final field not assigned).
  private final Dialect dialect_ = 
  						Dialect.ZEVES
    				  // otherwise it will be unassigned, hence a compilation error
    				  ;

  /**
   * Creates a new scanner for the source.
   */
  public Latex2Unicode(Source source, SectionInfo sectInfo, Properties properties)
    throws IOException
  {
    this(source.getReader());
    if (sectInfo == null) throw new NullPointerException();
    source_ = source;
    sectInfo_ = sectInfo;
    properties_ = properties;
    filename_ = source.toString();
    assert dialect_ !=null;
    if (!dialect_.equals(sectInfo.getDialect()))
    	throw new IllegalArgumentException("Incompatible dialects in Latex2Unicode scanner. " + dialect_.toString() +
    		" expected, but section manager dialect " + sectInfo.getDialect() + " found.");
  }
  
  /**
   * Low-level LaTeX scanner gets its dialect from the context and propagate to other scanners.
   */
  @Override
  public Dialect getDialect()
  {
  	assert dialect_.equals(sectInfo_.getDialect()) : "dialect = " + 
  				dialect_ + "; sectInfo.dialect = " + sectInfo_.getDialect();
  	return sectInfo_.getDialect();
  }

  public Source getSource()
  {
    return source_;
  }

  private String getLoc()
  {
    return filename_;
  }

  private LocInfo getLocation()
  {
    final int lineNo = locLine + yyline - locyyline;
    final int columnNo = yyline == locLine? locColumn + yycolumn : yycolumn;
    final int charNo = locChar + yychar - locyychar;
    return new LocInfoImpl(getDialect(), 
    											 getLoc(),
                           lineNo, columnNo,
                           charNo, yytext().length());
  }

  private boolean getBooleanProperty(String propertyKey)
  {
    if (properties_ == null) {
      return false;
    }
    return "true".equals(properties_.getProperty(propertyKey));
  }

  private LocToken result(String spelling)
    throws IOException
  {
    return result(LatexSym.UNICODE, spelling);
  }

  private LocToken result(LatexSym sym)
    throws IOException
  {
    return result(sym, yytext());
  }
  
  protected SectionInfo getSectionInfo()
  {
  	return sectInfo_;
  }

  private boolean debug_ = false;
  private long i = 1;
  private void debug(LatexSym sym, String spelling)
  {
      System.out.println("Latex2Unicode (" + i + "; "+ getDialect() +")  : " + spelling + "\t " + sym); i++;
      System.out.flush();
  }

  private LocToken result(LatexSym sym, String spelling)
    throws IOException
  {
    if (debug_) debug(sym, spelling);
    return new LocTokenImpl(sym, spelling, getLocation());
  }

  /**
   * Writes a space to the output and sets
   * <code>addSpace_</code> to <code>false</code>
   * if <code>addSpace_</code> is <code>true</code>.
   * Does nothing if <code>addSpace_</code> is
   * <code>false</code>.
   */
  private String addSpace()
    throws IOException
  {
    if (addSpace_) {
      addSpace_ = false;
      return ZString.SPACE;
    }
    return "";
  }

  /**
   * Returns a north east arrow if <code>string</code>
   * equals "^" and a south east arrow if
   * <code>string</code> equalas "_".
   * Throws an IllegalArgumentException for all other strings.
   */
  private String beginScript(String string)
  {
    if ("^".equals(string)) return ZString.NE;
    if ("_".equals(string)) return ZString.SE;
    throw new IllegalArgumentException("Invalid start LaTeX sub/super script character " + string + 
    	" for " + dialect_.toString() + " in Latex2Unicode parser.");
  }

  /**
   * Returns a south west arrow if <code>string</code>
   * equals "^" and a north west arrow if
   * <code>string</code> equalas "_".
   * Throws an IllegalArgumentException for all other strings.
   */
  private String endScript(String string)
  {
    if ("^".equals(string)) return ZString.SW;
    if ("_".equals(string)) return ZString.NW;
    throw new IllegalArgumentException("Invalid end LaTeX sub/super script character " + string + 
    	" for " + dialect_.toString() + " in Latex2Unicode parser.");
  }

  /**
   * Returns the latex mark-up function.
   * @see #setMarkupFunction
   */
  public LatexMarkupFunction getMarkupFunction()
  {
    return latexCommands_;
  }

  /**
   * Sets the latex mark-up function.  This is a mapping
   * from string (representing a latex command)
   * to {@link LatexCommand} containing the unicode representation.
   *
   * This map must be kept up to date to ensure proper working of
   * instances of this class.
   */
  public void setMarkupFunction(LatexMarkupFunction markupFunction)
  {
    latexCommands_ = markupFunction;
  }

  /**
   * Returns an unicode string representation of the given latex
   * command.
   *
   * @param latexCommand the latex command.
   * @param spaces indicates whether spaces should be added or not.
   * @return the unicode represention of the given latex command,
   *          or null if the command cannot be found.  Spaces are
   *          added (depending on the type of the command) if spaces
   *          is true.
   */
  private String toUnicode(String latexCommand, boolean spaces)
  {
    if (latexCommands_ == null) {
    	CztLogger.getLogger(Latex2Unicode.class).severe("Null latexCommands_ map! This should never happen, returning null." +
    		"Cannot tanslate to Unicode: " 
	    	+ latexCommand + " for " + dialect_.toString() + " in Latex2Unicode scanner.");
      return null;
    }
    MarkupDirective directive = (MarkupDirective)
      latexCommands_.getCommandDirective(latexCommand);
    if (directive == null) {
      return null;
    }
    String result = directive.getUnicode();
    if (spaces) {
      if (directive.addLeftSpace()) result = ZString.SPACE + result;
      if (directive.addRightSpace()) addSpace_ = true;
    }
    return result;
  }

  private void reportError(ErrorType type, ZParseMessage msg, String arg0)
  {
    reportError(type, msg, arg0, null);
  }

  private void reportError(ErrorType type, ZParseMessage msg,
                           String arg0, String info)
  {
    // TODO: what's this? To be used somewhere?
    //final Level level =
    //  ErrorType.ERROR.equals(type) ? Level.SEVERE : Level.WARNING;
    final LocInfo locInfo = getLocation();
    final Object[] args = { arg0, locInfo };
    ZParseError.report(sectInfo_, getSource(), type, msg, args, locInfo, info);
  }
  
  
  private void reportError(ErrorType type, ZEvesParseMessage msg,
                           String arg0, String info)
  {
    final LocInfo locInfo = getLocation();
    final Object[] args = { arg0, locInfo };
    ZEvesParseError.report(sectInfo_, getSource(), type, msg, args, locInfo, info);
  }
  

  private void reportUnknownLatexCommand(String command)
  {
    ErrorType errorType = ErrorType.ERROR;
    if (getBooleanProperty(PROP_IGNORE_UNKNOWN_LATEX_COMMANDS)) {
      errorType = ErrorType.WARNING;
    }
    String info = null;
    if (isFuzzCommand(command)) {
      info = "Make sure your specification is ISO Standard Z conforming "
        + "or try to add fuzz_toolkit as a parent to get access to some "
        + "commonly used non-Standard latex commands.";
    }
    reportError(errorType,
                ZParseMessage.MSG_UNKNOWN_LATEX_COMMAND,
                command,
                info);
  }

  private boolean isFuzzCommand(String command)
  {
    if (sectInfo_ == null)
    {
    	CztLogger.getLogger(Latex2Unicode.class).severe("Null section infor object for checking Fuzz command " + command
    		+ " for dialect " + dialect_.toString() + ". Returning false.");
      return false;
    }
    else
    {
	    try {
	      Key<LatexMarkupFunction> key = new Key<LatexMarkupFunction>(
	        net.sourceforge.czt.util.Section.FUZZ_TOOLKIT.getName(), LatexMarkupFunction.class);
	      LatexMarkupFunction lmf = sectInfo_.get(key);
	      if (lmf.getCommandDirective(command) != null) return true;
	    }
	    catch (CommandException e) {
	    }
	    return false;
	  }
  }

  private void begin(String name)
  {
    openBeginCommands_.push(name);
  }

  private void end(String name)
  {
    if (openBeginCommands_.empty()) {
      reportError(ErrorType.ERROR,
                  ZParseMessage.MSG_UNMATCHED_BEGIN_END,
                  name);
    }
    else {
      String openCommand = openBeginCommands_.pop();
      if (! name.equals(openCommand)) {
        reportError(ErrorType.ERROR,
                    ZParseMessage.MSG_UNMATCHED_BEGIN_END,
                    openCommand);
      }
    }
  }

/*
  // yytext() might contain {IGNORE}* tokens when starting with ZSTATE strings...
  // put the longer strings first to avoid catching the smaller ones too early (e.g., retrievein before retrieve)
  private String retrieveZState(String yyt)
  {
    if (yyt.startsWith(ZString.ZSTATE))
      return ZString.ZSTATE;
    else if (yyt.startsWith(ZString.ZSTINIT))
      return ZString.ZSTINIT;
    else if (yyt.startsWith(ZString.ZSTFIN))
      return ZString.ZSTFIN;
    else if (yyt.startsWith(ZString.ZASTATE))
      return ZString.ZASTATE;
    else if (yyt.startsWith(ZString.ZCSTATE))
      return ZString.ZCSTATE;
    else if (yyt.startsWith(ZString.ZAINITIN))
      return ZString.ZAINITIN;
    else if (yyt.startsWith(ZString.ZCINITIN))
      return ZString.ZCINITIN;
    else if (yyt.startsWith(ZString.ZASTINIT))
      return ZString.ZASTINIT;
    else if (yyt.startsWith(ZString.ZCSTINIT))
      return ZString.ZCSTINIT;
    else if (yyt.startsWith(ZString.ZASTFIN))
      return ZString.ZASTFIN;
    else if (yyt.startsWith(ZString.ZAFINOUT))
      return ZString.ZAFINOUT;
    else if (yyt.startsWith(ZString.ZCFINOUT))
      return ZString.ZCFINOUT;
    else if (yyt.startsWith(ZString.ZCSTFIN))
      return ZString.ZCSTFIN;
    else if (yyt.startsWith(ZString.ZRETRIEVEIN))
      return ZString.ZRETRIEVEIN;
    else if (yyt.startsWith(ZString.ZRETRIEVEOUT))
      return ZString.ZRETRIEVEOUT;
    else if (yyt.startsWith(ZString.ZRETRIEVE))
      return ZString.ZRETRIEVE;
    else
      throw new ScanException(dialect_, "Unknown Z state " + yyt +  	
	    	" for " + dialect_.toString() + " in Latex2Unicode parser.", getLocation());
  }
*/

  /**
   * A brace type enumeration.
   */
  private enum BraceType
  {
    /**
     * Subscript enclosed in braces.
     */
    SUB,

    /**
     * Superscript enclodes in braces.
     */
    SUPER,

    /**
     * Subscript enclosed in braces and space has to be added after
     * all superscripts and subscripts.
     */
    SUB_SPACE,

    /**
     * Superscript enclosed in braces and space has to be added after
     * all superscripts and subscripts.
     */
    SUPER_SPACE,

    /**
     * The brace that starts a name, for example a schema name.
     */
    NAME,

    /**
     * Like name, but for theorem environments. This is needed to possibly add an space to the token stream
     * in circumstances like \\begin{theorem}{Test} e \in X \iff true \end{theorem}. Without the space, we
     * get "Teste" as the name (!)
     */
    THM_NAME,

    

    /**
     * The brace that starts a proof name in \\begin{zproof}[NAME
     */
    PROOF_NAME,

    /**
     * The brace after \\znote{...} comment
     */
    ZNOTE,

    /**
     * The brace after \\Label{...}
     */
    ZLABEL,

    SYNDEF,
    

    /**
     * All remaining braces.
     */
    BRACE;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Latex2Unicode(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Latex2Unicode(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public LocToken next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCHCHAR + ZString.GENCHAR + ZEvesString.DISABLEDDEFTAG);
          }
        case 72: break;
        case 62: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCH);
          }
        case 73: break;
        case 40: 
          { //System.out.println("SEEN ZNOTE");
           yybegin(ZNOTE_STATE);
           braceStack_.push(BraceType.ZNOTE);
           return result(ZEvesString.LZNOTE);
          }
        case 74: break;
        case 29: 
          { String proofWord = yytext();
          // some proof words *must* be separated
          if (proofWord.equals("to") || proofWord.equals("expression") || proofWord.equals("predicate")) addSpace_ = true;

          // if caught by mistake outside a z proof environment (e.g., "by" or "prove" as var name?)
          // report the error and carry on to allow for better recovery later on, rather than hard crash
          // with throw new ScanException. TODO: which is better?

          // added a comparison for "to" for the *very* specific "applies$to" operator :-(
          if (!inProofScript_ && proofWord.compareToIgnoreCase("to") != 0)
          {
            //reportError(ErrorType.ERROR, ZEvesParseMessage.MSG_NOT_WITHIN_PROOFSCRIPT, proofWord, proofWord);//no extra information
            reportError(ErrorType.WARNING, ZEvesParseMessage.MSG_NOT_WITHIN_PROOFSCRIPT, proofWord, proofWord);//no extra information
            return result(proofWord); // return it as just unicode
          }
          //System.out.println("SEE PROOF-WORD-IN-ZED-STATE = '" + proofWord + "'; inProofScript? = " + inProofScript_);
          return result(LatexSym.PROOFWORD, proofWord);
          }
        case 75: break;
        case 49: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("zed");
          return result(ZString.ZED);
          }
        case 76: break;
        case 48: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.PREWORD_MARKUP, null);
          }
        case 77: break;
        case 46: 
          { int start = "%%Zloc".length();
          while (Character.isWhitespace(yycharat(start))) {
            start++;
          }
          int finish = start + 1;
          while (Character.isDigit(yycharat(finish))) {
            finish++;
          }
          locLine = Integer.parseInt(yytext().substring(start, finish));
          start = finish + 1;
          finish = start + 1;
          while (Character.isDigit(yycharat(finish))) {
            finish++;
          }
          locColumn = Integer.parseInt(yytext().substring(start, finish));
          locChar = Integer.parseInt(yytext().substring(finish + 1, yytext().length() - 1));
          locyyline = yyline + 1;
          locyychar = yychar;
          }
        case 78: break;
        case 58: 
          { yybegin(ERROR);
          }
        case 79: break;
        case 2: 
          { // To aid low-level debugging: ({LETTER} | [0-9])*
          String result = addSpace();
          result += yytext();
          
          // replaces \$ for $
          result = result.replaceAll("\\\\\\$","\\$");
          
          //System.out.println("LEXING-DECORWORD AFTER FLAG (" + catchingThmName_ + ") = '" + result + "'");
          return result(result);
          }
        case 80: break;
        case 22: 
          { yybegin(YYINITIAL);
          reportError(ErrorType.ERROR,
                      ZParseMessage.MSG_UNEXPECTED_TOKEN_NAME_EXPECTED,
                      yytext());
          }
        case 81: break;
        case 1: 
          { return result(LatexSym.TEXT);
          }
        case 82: break;
        case 38: 
          { return result(LatexSym.CHAR_MARKUP);
          }
        case 83: break;
        case 6: 
          { if (directive_) {
            yybegin(YYINITIAL);
            directive_ = false;            
            addSpace_ = false; // TODO: what about spaces?
            return result(LatexSym.END_MARKUP);
          }
          }
        case 84: break;
        case 20: 
          { // do nothing
          }
        case 85: break;
        case 13: 
          { String result = addSpace();
          braceStack_.push(BraceType.BRACE);
          return result(result);
          }
        case 86: break;
        case 43: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 13;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 14;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { addSpace_ = true;
          String label = yytext();
          //System.out.println("SEEN LABEL = " + label);
          if (!inAxiomaticBox_)
          {
            reportError(ErrorType.ERROR, ZEvesParseMessage.MSG_NOT_WITHIN_AXDEF, label, label);
          }
          yybegin(ZLABEL_STATE);
          braceStack_.push(BraceType.ZLABEL);
          return result(ZEvesString.LLABEL + ZString.SPACE);
          }
        case 87: break;
        case 63: 
          { yybegin(ZED);//ZPROOF);
          assert ! addSpace_;
          begin("zproof");
          inProofScript_ = true;
          braceStack_.push(BraceType.PROOF_NAME);
          return result(ZEvesString.ZPROOF);
          }
        case 88: break;
        case 7: 
          { /* ignore whitespace (except NL) and comments */
          }
        case 89: break;
        case 25: 
          { // To aid low-level debugging: .  // OR SHOULD THIS BE A CATCH ALL ERROR? No good to pass to the parser as DECORWORD
          String result = addSpace();
          result += yytext();
          return result(result);
          }
        case 90: break;
        case 11: 
          { // To aid low-level debugging: {FUNCTION} | {RELATION}({RELATION}|{WS})*
          String result = addSpace();
          if (braceStack_.empty()) {
            result += ZString.SPACE;
          }
          result += yytext().replaceAll("[ ]", "");
          if (braceStack_.empty()) {
            addSpace_ = true;
          }
          return result(result);
          }
        case 91: break;
        case 53: 
          { end("schema");
          inSchemaBox_ = false;

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 92: break;
        case 10: 
          { // To aid low-level debugging: {PUNCTATION}
          String result = addSpace();
          result += yytext();
          if (braceStack_.empty()) addSpace_ = true;
          return result(result);
          }
        case 93: break;
        case 55: 
          { end("zproof");
          inProofScript_ = false;
          yybegin(YYINITIAL);
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 94: break;
        case 52: 
          { String result = yytext();
          addSpace_ = true;
          result = result.replaceAll("\\\\\\$","\\$");
          return result(result);
          }
        case 95: break;
        case 24: 
          { yybegin(ZED);

        // check this is a matching "}" for "\\znote{"
        boolean okay = !braceStack_.empty();
        BraceType brace = null;
        if (okay)
        {
          brace = (BraceType) braceStack_.pop();
          okay = brace.equals(BraceType.ZNOTE);
        }
        if (!okay) {
          final ErrorType errorType = ErrorType.ERROR;
          reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "}");
        }
        return result(ZEvesString.RZNOTE);
          }
        case 96: break;
        case 18: 
          { /* ignore whitespaces */
          }
        case 97: break;
        case 16: 
          { String result = addSpace();
          result += result + ZString.SPACE + ZString.MINUS;
          if (braceStack_.empty()) {
            result += ZString.SPACE;
          }
          return result(result);
          }
        case 98: break;
        case 21: 
          { yybegin(YYINITIAL);
          }
        case 99: break;
        case 61: 
          // lookahead expression with fixed lookahead length
          yypushback(8);
          { // CZT extension: pass theorem name into Unicode output.
          yybegin(ZED);
          assert ! addSpace_;
          begin("theorem");
          braceStack_.push(BraceType.THM_NAME);
          //System.out.println("BEGIN-THM = " + yytext());
          return result(ZString.ZED);
          // leave the "theorem" to be treated as a name.
          }
        case 100: break;
        case 59: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("gendef");
          inAxiomaticBox_ = true;
          return result(ZString.GENAX);
          }
        case 101: break;
        case 32: 
          { String script = yytext().substring(0, 1);
          return result(beginScript(script)
                        + yytext().substring(yytext().length() - 1)
                        + endScript(script));
          }
        case 102: break;
        case 28: 
          { String result = addSpace();
          return result(result + yytext().substring(1));
          }
        case 103: break;
        case 26: 
          { // check this is a matching "}" for "\\Label{"
        boolean okay = !braceStack_.empty();
        BraceType brace = null;
        if (okay)
        {
          brace = (BraceType) braceStack_.pop();
          okay = brace.equals(BraceType.ZLABEL);
        }
        if (!okay) {
          final ErrorType errorType = ErrorType.ERROR;
          reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "}");
        }
        yybegin(ZED);
        return result(ZEvesString.RLABEL);
          }
        case 104: break;
        case 65: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCHCHAR + ZString.GENCHAR);
          }
        case 105: break;
        case 33: 
          { String script = yytext().substring(0, 1);
          if ("^".equals(script)) {
            if (addSpace_) {
              braceStack_.push(BraceType.SUPER_SPACE);
            } else {
              braceStack_.push(BraceType.SUPER);
            }
          } else if ("_".equals(script)) {
            if (addSpace_) {
              braceStack_.push(BraceType.SUB_SPACE);
            } else {
              braceStack_.push(BraceType.SUB);
            }
          }
          addSpace_ = false;
          return result(beginScript(script));
          }
        case 106: break;
        case 70: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("schema");
          inSchemaBox_ = true;
          braceStack_.push(BraceType.NAME);
          return result(ZString.SCH + ZEvesString.DISABLEDDEFTAG);
          }
        case 107: break;
        case 45: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.INWORD_MARKUP, null);
          }
        case 108: break;
        case 8: 
          { String result = addSpace();
          result += ZString.SPACE;
          return result(result);
          }
        case 109: break;
        case 66: 
          { end("zproofsection");
          yybegin(YYINITIAL);
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 110: break;
        case 57: 
          { end("theorem");

             yybegin(YYINITIAL);

          catchingThmName_ = false;
          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 111: break;
        case 35: 
          { String usage = yytext();
          //System.out.println("SEEN USAGE-IN-ZED-STATE = " + usage);
          return result(LatexSym.PROOFWORD, usage + ZString.SPACE);
          }
        case 112: break;
        case 69: 
          // lookahead expression with fixed lookahead length
          yypushback(8);
          { yybegin(ZED);
          assert ! addSpace_;
          begin("theorem");
          braceStack_.push(BraceType.THM_NAME);
          return result(ZString.ZED + ZEvesString.DISABLEDTHMTAG);
          }
        case 113: break;
        case 5: 
          { // To aid low-level debugging: .
          String result = addSpace();
          result += yytext();
          //System.out.println("CATCH-ALL = '" + result + "'");
          return result(result);
          }
        case 114: break;
        case 44: 
          { String result = addSpace() + "section";
          addSpace_ = true;
          return result(LatexSym.SECTION, result);
          }
        case 115: break;
        case 68: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 11;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 12;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(ZED);//ZPROOF);
          assert ! addSpace_;
          begin("zproofsection");
          braceStack_.push(BraceType.NAME);
          return result(ZEvesString.ZPROOFSECTION);
          }
        case 116: break;
        case 31: 
          { String result = "";
          String script = yytext().substring(0, 1);
          String command = yytext().substring(yytext().indexOf("\\"));
          String zstring = toUnicode(command, false);
          result += beginScript(script);
          if (zstring != null) {
            result += zstring;
          } else {
            reportUnknownLatexCommand(command);
            result += command.substring(1);
          }
          result += endScript(script);
          return result(result);
          }
        case 117: break;
        case 27: 
          { String result = addSpace();
          return result(result + ZString.NLCHAR);
          }
        case 118: break;
        case 15: 
          { String result = addSpace();
          return result(result + ZString.PRIME);
          }
        case 119: break;
        case 42: 
          { String result = addSpace() + ZString.SPACE + "parents";
          addSpace_ = true;
          return result(LatexSym.PARENTS, result);
          }
        case 120: break;
        case 14: 
          { String result = "";
          if (braceStack_.empty()) {
            final ErrorType errorType = ErrorType.ERROR;
            reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "}");
            return result(result);
          }
          BraceType brace = (BraceType) braceStack_.pop();
          assert ! addSpace_;
          if (brace.equals(BraceType.SUPER)) {
            result += ZString.SW;
          } else if (brace.equals(BraceType.SUPER_SPACE)) {
            result += ZString.SW;
            addSpace_ = true;
          } else if (brace.equals(BraceType.SUB)) {
            result += ZString.NW;
          } else if (brace.equals(BraceType.SUB_SPACE)) {
            result += ZString.NW;
            addSpace_ = true;
          } else if (brace.equals(BraceType.NAME)) {
            result += ZString.SPACE;
          }
          // Leo: I don't like this assymetry. ThmName should be just like any other name!
          //      \vdash? theorems with just a Name are not a good idea (!)
          else if (brace.equals(BraceType.THM_NAME))
          {
            //seenThm_ = false;
            // up to here, the Theorem NAME must have been seen... !! NO. This is the \begin{theorem '}'--- brace !!! useless...
            catchingThmName_ = true;
            result += ZString.SPACE;
          }
          // this is to flag that "thmName" catching has finished.
          else if (brace.equals(BraceType.BRACE) && catchingThmName_)
          {
            catchingThmName_ = false;
            result += ZString.SPACE;
          }
          //System.out.println("CLOSING-BRACE " + brace.toString() + " catchingThmName_ = " + catchingThmName_ + " = '" + result + "'");
          return result(result);
          }
        case 121: break;
        case 41: 
          { int position = "%%Zfile".length();
          while (Character.isWhitespace(yycharat(position))) {
            position++;
          }
          filename_ = yytext().substring(position, yytext().length() - 1);
          }
        case 122: break;
        case 47: 
          { end("zed");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 123: break;
        case 30: 
          { String message = "Unexpected subscript or superscript " + yytext() + 
          	" for " + dialect_.toString() + " in Latex2Unicode parser.";
          throw new ScanException(dialect_, message, getLocation());
          }
        case 124: break;
        case 23: 
          { // just return  the text
        return result(yytext());
          }
        case 125: break;
        case 67: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("zed");
          return result(ZString.ZED + ZEvesString.DISABLEDDEFTAG);
          }
        case 126: break;
        case 54: 
          { end("gendef");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          inAxiomaticBox_ = false;
          return result(LatexSym.END, result);
          }
        case 127: break;
        case 37: 
          { String result = addSpace();
          return result(result + ZString.SPACE + ZString.VL + ZString.SPACE);
          }
        case 128: break;
        case 64: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("zsection");
          return result(LatexSym.SECT, ZString.ZED);
          }
        case 129: break;
        case 56: 
          { yybegin(ZED);
          assert ! addSpace_;
          begin("axdef");
          inAxiomaticBox_ = true;
          return result(ZString.AX);
          }
        case 130: break;
        case 36: 
          { String result = yytext();
        return result(LatexSym.PROOFWORD, result);
          }
        case 131: break;
        case 34: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { String result = "";
          assert inProofScript_;
          assert ! addSpace_;
          if (braceStack_.empty()) {
            final ErrorType errorType = ErrorType.ERROR;
            reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "]");
            return result(result);
          }
          BraceType brace = (BraceType) braceStack_.pop();
          assert ! addSpace_;
          if (brace.equals(BraceType.PROOF_NAME))
          {
            result += ZString.SPACE;
          }
          else
          {
            final ErrorType errorType = ErrorType.ERROR;
            reportError(errorType, ZParseMessage.MSG_UNMATCHED_BRACES, "]");
          }
          return result(result);
          }
        case 132: break;
        case 4: 
          { yybegin(COMMENT_STATE);
          }
        case 133: break;
        case 50: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.POSTWORD_MARKUP, null);
          }
        case 134: break;
        case 51: 
          { end("axdef");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          inAxiomaticBox_ = false;
          return result(LatexSym.END, result);
          }
        case 135: break;
        case 39: 
          { yybegin(MARKUP);
          directive_ = true;
          return result(LatexSym.WORD_MARKUP, null);
          }
        case 136: break;
        case 19: 
          { yybegin(ZED);
          return result(LatexSym.NAME);
          }
        case 137: break;
        case 3: 
          { // To aid low-level debugging: ({LETTER} | [0-9])*
          String result = addSpace();
          result += yytext();
          return result(result);
          }
        case 138: break;
        case 60: 
          { end("zsection");

             yybegin(YYINITIAL);

          String result = addSpace() + ZString.END;
          return result(LatexSym.END, result);
          }
        case 139: break;
        case 9: 
          { String result = addSpace();
          boolean spaces = braceStack_.empty();
          String zstring = toUnicode(yytext(), spaces);
          if (zstring != null) {
            result += zstring;
          }
          else {
            reportUnknownLatexCommand(yytext());
            if (spaces) result += ZString.SPACE;
            result += yytext().substring(1);
            if (spaces) result += ZString.SPACE;
          }
          return result(result);
          }
        case 140: break;
        case 12: 
          { String result = addSpace();
          return result(result + ZString.SPACE + ZString.SPOT + ZString.SPACE);
          }
        case 141: break;
        case 17: 
          { yybegin(YYINITIAL);
          reportError(ErrorType.ERROR,
                      ZParseMessage.MSG_UNEXPECTED_TOKEN,
                      yytext());
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
