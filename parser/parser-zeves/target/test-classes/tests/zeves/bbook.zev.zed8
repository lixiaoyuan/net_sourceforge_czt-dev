─ section bbook parents standard_toolkit └ 

─ [ NAME , DATE ] └ 

┌ BirthdayBook 
known : ℙ NAME 
birthday : NAME ⇸ DATE |
 known = dom birthday └ 

─ theorem BirthdayBookPredicate 
∀ BirthdayBook ⦁ known = dom birthday 
└ 

├ BirthdayBookPredicate 
reduce ;  
└ 

┌ InitBirthdayBook 
BirthdayBook ′ |
 birthday′ = ∅ 
known′ = ∅ └ 

─ theorem InitIsOK 
∃ BirthdayBook ′ ⦁ InitBirthdayBook 
└ 

├ InitIsOK 
prove by reduce ;  
└ 

┌ AddBirthday 
ΔBirthdayBook 
name? : NAME 
date? : DATE |
 name? ∉ known 
birthday′ = birthday ∪ { ( name? ↦ date? ) } └ 

─ theorem AddBirthdayIsHonest 
∀ BirthdayBook ; name? : NAME ; date? : DATE ⦁ name? ∉ known ⇒ pre AddBirthday 
└ 

├ AddBirthdayIsHonest 
prove by reduce ;  
└ 

─ theorem knownAddBirthday 
∀ AddBirthday ⦁ known′ = known ∪ { name? } 
└ 

├ knownAddBirthday 
prove by reduce ;  
└ 

┌ FindBirthday 
ΞBirthdayBook 
name? : NAME 
date! : DATE |
 name? ∈ known 
date! = birthday ( name? ) └ 

├ FindBirthday$domainCheck 
simplify ;  
└ 

─ AddThenFind == AddBirthday ⨟ FindBirthday └ 

─ theorem AddFind 
∀ AddThenFind ⦁ date! = date? 
└ 

├ AddFind 
prove by reduce ;  
└ 

┌ Remind1 
ΞBirthdayBook 
today? : DATE 
cards! : ℙ NAME |
 cards! = { n : NAME | birthday ( n ) = today? } └ 

├ Remind1$domainCheck 
prove by rewrite ;  
└ 

Here we had a problem before: the newline followed by "to" was being wrongly
captured by the lexer because of complex apply commands. We just changed the
lexing rule to disallow newlines before TO
┌ Remind 
ΞBirthdayBook 
today? : DATE 
cards! : ℙ NAME |
 cards! = { n : known | birthday ( n ) = today? } └ 

├ Remind$domainCheck 
prove by rewrite ;  
└ 

─ REPORT ::= ok | already_known | not_known └ 

┌ Success 
result! : REPORT |
 result! = ok └ 

┌ AlreadyKnown 
ΞBirthdayBook 
name? : NAME 
result! : REPORT |
 name? ∈ known 
result! = already_known └ 

─ RAddBirthday == AddBirthday ∧ Success ∨ AlreadyKnown └ 

─ theorem RAddBirthdayIsTotal 
∀ BirthdayBook ; name? : NAME ; date? : DATE ⦁ pre RAddBirthday 
└ 

├ RAddBirthdayIsTotal 
prove by reduce ;  
split name? ∈ known ;  
prove by rewrite ;  
└ 

╷ name : NAME 
VALUE : ℕ |
 VALUE > 0 └ 

─ theorem tAddBirthdayPRE 
∀ BirthdayBook ; name? : NAME ; date? : DATE ⦁ pre AddBirthday 
└ 

├ tAddBirthdayPRE 
invoke AddBirthday ;  
invoke ΔBirthdayBook ;  
rewrite ;  
invoke BirthdayBook ;  
simplify ;  
cases ;  
next ;  
next ;  
next ;  
simplify ;  
conjunctive ;  
simplify ;  
disjunctive ;  
simplify ;  
cases ;  
apply domInPower to predicate dom ( birthday ∪ { ( name? , date? ) } ) ∈ ℙ NAME ;  
rewrite ;  
simplify ;  
simplify ;  
rewrite ;  
prove by reduce ;  
equality substitute dom birthday ;  
└ 

─ theorem myThm 
∀ x : ℕ ⦁ x ≥ 0 
└ 

─ theorem test 
∀ BirthdayBook ⦁ true 
└ 

├ test 
invoke BirthdayBook ;  
└ 

