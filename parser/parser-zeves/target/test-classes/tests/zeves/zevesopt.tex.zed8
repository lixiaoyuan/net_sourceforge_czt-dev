─ section zevesopt parents standard_toolkit └ 

The "name on the thrid" parameter *must* not be the same as the unicode markup for
\verb'\after. That is, it cannot be just *after*. Otherwise, it gets confused later
on for the domain check and other theorems.

No need for ZEves syndef. Instead, define them as usual CZT / StdZ op templates.
The CZT2ZEves printer figures out what kind of ZEves optemp to use, and raise an
error in case they are not feasible. For instance, Z/EVES does not allow list ops
(e.g., seq display). And also, ZEves does not take assoc into account and precedences
are transformed (e.g., ZEves only have 1..6).
syndef{\after}{infun6}{"afterOp"}
syndef{\before}{infun6}{"beforeOp"}
syndef{\middle}{infun6}{"middleOp"}
syndef{\zevesgen}{ingen}{"zevesgen"}
syndef{\zevesrel}{inrel}{"zevesrel"}
syndef{\zevesthmrel}{inrel}{"zevesthmrel"}

─ function 60 leftassoc ( _ after _ ) └ ─ function 60 leftassoc ( _ before _ ) └ ─ function 50 leftassoc ( _ middle _ ) └ ─ generic 10 leftassoc ( _ zevesgen _ ) └ ─ generic 10 leftassoc ( _ zevesthmgen _ ) └ ─ relation ( _ zevesrel _ ) └ ─ relation ( _ zevesthmrel _ ) └ 

Example of an operator within an axdef
╷═ [ X ] 
_ after _ : seq X × ℕ → seq X |
 ∀ s : seq X ; n : ℕ ⦁ s after n = ∅ └ 

├ dAfter$domainCheck 
prove by reduce ;  
└ 

Example of operator within a schema both as declaration (E.g., include the _)
and as an application (e.g., don't include the _ in (a \before b)).
┌ S 
_ before _ : ℕ × ℕ → ℕ |
 ∀ a , b : ℕ ⦁ a before b > b └ 

├ S$domainCheck 
prove by reduce ;  
└ 

We are deliberately not accepting them in theorems like
─ theorem lOpInThm 
∀ _ middle _ : ℕ × ℕ → ℕ ⦁ 0 middle 0 = 0 
└ 

─ X zevesgen Y == { f : X → Y | f ≠ ∅ } └ 

This is a type error!
─ theorem lOpGenInThm [ X , Y ] 
∀ f : X zevesthmgen Y ⦁ f ≠ ∅ 
└ 

╷═ [ X , Y ] 
_ zevesrel _ : X ↔ Y |
 ∀ x : X ; y : Y ⦁ x zevesrel y └ 

─ theorem lOpRelInThm [ X , Y ] 
∀ _ zevesthmrel _ : X ↔ Y ; x : X ; y : Y ⦁ x zevesthmrel y 
└ 
