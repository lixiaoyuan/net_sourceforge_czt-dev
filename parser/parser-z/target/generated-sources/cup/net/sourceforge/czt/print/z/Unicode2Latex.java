
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Sun Oct 18 08:39:22 UTC 2020
//----------------------------------------------------

package net.sourceforge.czt.print.z;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java_cup.runtime.Symbol;
import net.sourceforge.czt.base.ast.Term;
import net.sourceforge.czt.base.util.PerformanceSettings;
import net.sourceforge.czt.parser.util.CztError;
import net.sourceforge.czt.parser.util.CztScanner;
import net.sourceforge.czt.parser.util.DebugUtils;
import net.sourceforge.czt.parser.util.Decorword;
import net.sourceforge.czt.parser.util.ErrorType;
import net.sourceforge.czt.parser.util.LatexCommand;
import net.sourceforge.czt.parser.util.LatexMarkupFunction;
import net.sourceforge.czt.parser.util.LocInfo;
import net.sourceforge.czt.parser.util.LocInfoImpl;
import net.sourceforge.czt.parser.util.LocInt;
import net.sourceforge.czt.parser.util.LocString;
import net.sourceforge.czt.parser.util.MarkupDirective;
import net.sourceforge.czt.parser.util.MarkupException;
import net.sourceforge.czt.print.z.ZPrintError;
import net.sourceforge.czt.print.z.ZPrintMessage;
import net.sourceforge.czt.print.util.PrintException;
import net.sourceforge.czt.print.util.PrintPropertiesKeys;
import net.sourceforge.czt.session.CommandException;
import net.sourceforge.czt.session.Dialect;
import net.sourceforge.czt.session.Key;
import net.sourceforge.czt.session.SectionInfo;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.session.Source;
import net.sourceforge.czt.util.CztException;
import net.sourceforge.czt.util.CztLogger;
import net.sourceforge.czt.z.ast.Directive;
import net.sourceforge.czt.z.ast.DirectiveType;
import net.sourceforge.czt.z.ast.LatexMarkupPara;
import net.sourceforge.czt.z.ast.LocAnn;
import net.sourceforge.czt.z.ast.Parent;
import net.sourceforge.czt.z.ast.ZSect;
import net.sourceforge.czt.z.util.ZChar;
import net.sourceforge.czt.z.util.ZString;
import net.sourceforge.czt.print.z.WhereWord;

/** CUP v0.11a czt01 beta generated parser.
  * @version Sun Oct 18 08:39:22 UTC 2020
  */
public class Unicode2Latex extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Unicode2Latex() {super();}

  /** Constructor which sets the default scanner. */
  public Unicode2Latex(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Unicode2Latex(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\003\004\000\002\003\002" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\006\000\002\007\004\000\002\011\003\000\002" +
    "\011\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\002\000\002\006\007\000\002\006\006\000\002\006\005" +
    "\000\002\006\007\000\002\006\005\000\002\006\010\000" +
    "\002\004\003\000\002\004\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\013" +
    "\004\000\002\013\004\000\002\013\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\016\005\000\002\023\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\014" +
    "\004\000\002\014\002\000\002\021\003\000\002\021\003" +
    "\000\002\022\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\036\002\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\035\007\036\004\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\001\002\000\014\016\047\017" +
    "\046\020\050\021\044\022\055\001\002\000\004\002\130" +
    "\001\002\000\032\002\001\016\047\017\046\020\050\021" +
    "\044\022\055\042\054\043\053\044\042\045\051\046\043" +
    "\047\056\001\002\000\052\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\024\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\040" +
    "\uffe3\041\uffe3\050\uffe3\051\uffe3\001\002\000\052\004\021" +
    "\005\013\006\030\007\031\010\023\011\012\012\016\013" +
    "\036\014\015\015\034\024\040\030\011\031\017\032\022" +
    "\033\024\035\032\040\037\041\033\050\041\051\026\001" +
    "\002\000\056\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\023\uffdb\024" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\040\uffdb\041\uffdb\050\uffdb\051\uffdb\001\002\000\056\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\023\uffd0\024\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\040\uffd0\041\uffd0" +
    "\050\uffd0\051\uffd0\001\002\000\056\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\023\uffd4\024\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\040\uffd4\041\uffd4\050\uffd4\051\uffd4" +
    "\001\002\000\056\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\023\uffe4" +
    "\024\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\040\uffe4\041\uffe4\050\uffe4\051\uffe4\001\002\000\056" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\023\uffcd\024\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\041" +
    "\uffcd\050\uffcd\051\uffcd\001\002\000\056\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\023\uffcf\024\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\040\uffcf\041\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\056\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023" +
    "\uffe1\024\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\040\uffe1\041\uffe1\050\uffe1\051\uffe1\001\002\000" +
    "\056\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\024\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5" +
    "\041\uffe5\050\uffe5\051\uffe5\001\002\000\056\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\023\uffd5\024\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\050\uffd5" +
    "\051\uffd5\001\002\000\056\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\023\uffe0\024\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\040\uffe0\041\uffe0\050\uffe0\051\uffe0\001\002" +
    "\000\056\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\023\uffd1\024\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\040" +
    "\uffd1\041\uffd1\050\uffd1\051\uffd1\001\002\000\056\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\023\uffdf\024\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\050" +
    "\uffdf\051\uffdf\001\002\000\062\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8\050" +
    "\uffc8\051\uffc8\001\002\000\056\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\023\uffd6\024\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\040\uffd6\041\uffd6\050\uffd6\051\uffd6\001" +
    "\002\000\056\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\023\uffdc\024" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\040\uffdc\041\uffdc\050\uffdc\051\uffdc\001\002\000\056\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\023\uffd3\024\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\040\uffd3\041\uffd3" +
    "\050\uffd3\051\uffd3\001\002\000\056\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\015\uffd2\023\uffd2\024\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2\050\uffd2\051\uffd2" +
    "\001\002\000\004\002\uffff\001\002\000\056\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\023\uffde\024\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\040\uffde\041\uffde\050\uffde" +
    "\051\uffde\001\002\000\056\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\023\uffcc\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\040\uffcc\041\uffcc\050\uffcc\051\uffcc\001\002" +
    "\000\056\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\023\uffe2\024\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\040" +
    "\uffe2\041\uffe2\050\uffe2\051\uffe2\001\002\000\056\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\023\uffce\024\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\040\uffce\041\uffce\050" +
    "\uffce\051\uffce\001\002\000\056\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\023\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\040\uffdd\041\uffdd\050\uffdd\051\uffdd\001" +
    "\002\000\062\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\023\uffc9\024" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\040\uffc9\041\uffc9\050\uffc9\051\uffc9\001" +
    "\002\000\062\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\040\uffc7\041\uffc7\050\uffc7\051\uffc7\001" +
    "\002\000\052\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\041\uffe9" +
    "\050\uffe9\051\uffe9\001\002\000\052\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\024\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\040\uffe7\041\uffe7\050\uffe7\051\uffe7\001\002\000\052" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\024\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\040\uffe3\041\uffe3\050\uffe3\051" +
    "\uffe3\001\002\000\032\002\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\001\002\000\052\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\023\uffe3\024\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\040\uffe3\041\uffe3\050\uffe3\051\uffe3\001\002\000\054\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\024\uffca\025\104\026\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\040\uffca\041\uffca\050\uffca" +
    "\051\uffca\001\002\000\010\024\uffca\050\uffca\051\uffca\001" +
    "\002\000\052\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\024\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\040\uffe8\041\uffe8" +
    "\050\uffe8\051\uffe8\001\002\000\052\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\024\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\040\uffe3\041\uffe3\050\uffe3\051\uffe3\001\002\000\032" +
    "\002\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002" +
    "\000\032\002\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\001\002\000\010\024\uffca\050\uffca\051\uffca\001\002\000" +
    "\052\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\024\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\040\uffe6\041\uffe6\050\uffe6" +
    "\051\uffe6\001\002\000\032\002\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\001\002\000\032\002\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\001\002\000\010\024\040\050" +
    "\041\051\026\001\002\000\052\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\024\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\040\uffcb\041\uffcb\050\uffcb\051\uffcb\001\002\000\004\006" +
    "\064\001\002\000\004\051\026\001\002\000\052\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\023\uffe3\024\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\040\uffe3\041\uffe3\050\uffe3\051\uffe3\001" +
    "\002\000\052\004\021\005\013\006\030\007\031\010\023" +
    "\011\012\012\016\013\036\014\015\015\034\023\067\024" +
    "\040\030\011\031\017\032\022\033\024\040\037\041\033" +
    "\050\041\051\026\001\002\000\034\002\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\037\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\001\002\000\012\007" +
    "\073\024\040\050\041\051\026\001\002\000\012\007\uffd8" +
    "\024\uffd8\050\uffd8\051\uffd8\001\002\000\012\007\uffda\024" +
    "\uffda\050\uffda\051\uffda\001\002\000\052\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\023\uffd7\024\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\040\uffd7\041\uffd7\050\uffd7\051\uffd7\001\002\000" +
    "\012\007\uffd9\024\uffd9\050\uffd9\051\uffd9\001\002\000\052" +
    "\004\021\005\013\006\030\007\031\010\023\011\012\012" +
    "\016\013\036\014\015\015\034\024\040\030\011\031\017" +
    "\032\022\033\024\034\076\040\037\041\033\050\041\051" +
    "\026\001\002\000\032\002\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\001\002\000\010\024\040\050\041\051\026" +
    "\001\002\000\052\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3" +
    "\024\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\040\uffe3\041" +
    "\uffe3\050\uffe3\051\uffe3\001\002\000\052\004\021\005\013" +
    "\006\030\007\031\010\023\011\012\012\016\013\036\014" +
    "\015\015\034\023\102\024\040\030\011\031\017\032\022" +
    "\033\024\040\037\041\033\050\041\051\026\001\002\000" +
    "\034\002\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\037\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\001\002\000\052\004\021\005\013\006\030\007\031" +
    "\010\023\011\012\012\016\013\036\014\015\015\034\024" +
    "\040\026\111\030\011\031\017\032\022\033\024\040\037" +
    "\041\033\050\041\051\026\001\002\000\004\051\026\001" +
    "\002\000\052\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\024" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\040\uffe3\041\uffe3" +
    "\050\uffe3\051\uffe3\001\002\000\052\004\021\005\013\006" +
    "\030\007\031\010\023\011\012\012\016\013\036\014\015" +
    "\015\034\023\107\024\040\030\011\031\017\032\022\033" +
    "\024\040\037\041\033\050\041\051\026\001\002\000\034" +
    "\002\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\037" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\001\002\000\052\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3" +
    "\024\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\040\uffe3\041" +
    "\uffe3\050\uffe3\051\uffe3\001\002\000\010\024\uffca\050\uffca" +
    "\051\uffca\001\002\000\004\023\113\001\002\000\034\002" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\037\ufff0" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\001" +
    "\002\000\010\024\040\050\041\051\115\001\002\000\014" +
    "\023\ufff2\024\ufff2\027\ufff2\050\ufff2\051\ufff2\001\002\000" +
    "\014\023\ufff8\024\040\027\122\050\041\051\121\001\002" +
    "\000\014\023\ufff3\024\ufff3\027\ufff3\050\ufff3\051\ufff3\001" +
    "\002\000\014\023\ufff4\024\ufff4\027\ufff4\050\ufff4\051\ufff4" +
    "\001\002\000\014\023\ufff5\024\ufff5\027\ufff5\050\ufff5\051" +
    "\ufff5\001\002\000\014\023\ufff6\024\ufff6\027\ufff6\050\ufff6" +
    "\051\ufff6\001\002\000\052\004\021\005\013\006\030\007" +
    "\031\010\023\011\012\012\016\013\036\014\015\015\034" +
    "\023\ufff7\024\040\030\011\031\017\032\022\033\024\040" +
    "\037\041\033\050\041\051\026\001\002\000\052\004\021" +
    "\005\013\006\030\007\031\010\023\011\012\012\016\013" +
    "\036\014\015\015\034\023\125\024\040\030\011\031\017" +
    "\032\022\033\024\040\037\041\033\050\041\051\026\001" +
    "\002\000\034\002\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\037\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\001\002\000\052\004\021\005\013\006\030" +
    "\007\031\010\023\011\012\012\016\013\036\014\015\015" +
    "\034\023\127\024\040\030\011\031\017\032\022\033\024" +
    "\040\037\041\033\050\041\051\026\001\002\000\034\002" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\037\uffed" +
    "\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\001" +
    "\002\000\004\002\000\001\002\000\004\037\132\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\006\002\004\003\005\001\001\000\004\006" +
    "\130\001\001\000\002\001\001\000\012\004\056\005\057" +
    "\006\044\010\051\001\001\000\004\013\007\001\001\000" +
    "\014\012\017\020\026\021\013\022\024\023\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\125\001\001\000\002\001" +
    "\001\000\004\013\123\001\001\000\004\014\102\001\001" +
    "\000\004\014\076\001\001\000\002\001\001\000\004\013" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\061\022\024\023\062\001\001" +
    "\000\002\001\001\000\004\016\064\001\001\000\006\017" +
    "\067\023\070\001\001\000\004\013\065\001\001\000\014" +
    "\012\017\020\026\021\013\022\024\023\034\001\001\000" +
    "\002\001\001\000\010\021\071\022\024\023\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\017\020\026\021\013\022\024" +
    "\023\034\001\001\000\002\001\001\000\010\021\061\022" +
    "\024\023\077\001\001\000\004\013\100\001\001\000\014" +
    "\012\017\020\026\021\013\022\024\023\034\001\001\000" +
    "\002\001\001\000\016\007\111\012\107\020\026\021\061" +
    "\022\024\023\034\001\001\000\004\023\104\001\001\000" +
    "\004\013\105\001\001\000\014\012\017\020\026\021\013" +
    "\022\024\023\034\001\001\000\002\001\001\000\004\013" +
    "\122\001\001\000\004\014\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\061\022\024\001\001\000" +
    "\004\015\115\001\001\000\010\011\117\021\116\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\017\020\026\021\013" +
    "\022\024\023\034\001\001\000\014\012\017\020\026\021" +
    "\013\022\024\023\034\001\001\000\002\001\001\000\014" +
    "\012\017\020\026\021\013\022\024\023\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Unicode2Latex$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$Unicode2Latex$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Unicode2Latex$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** User initialization code. */
  @Override
  public void user_init() throws java.lang.Exception
    {

    //share the operator table between the action code and the parser code
    action_obj.source_ = source_;
    action_obj.sectInfo_ = sectInfo_;
    action_obj.dialect_ = dialect_;

    }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return local_next_token(); 
    }


  public static final Map<Object, String> symbolMap_ = DebugUtils.getFieldMap(Sym.class);
  public static final Map<String, Object> symbolMap2_= DebugUtils.getFieldMap2(Sym.class);

  /** The source currently being parsed. */
  protected Source source_ = null;
  
 
  private Writer writer_ = new OutputStreamWriter(System.out, java.nio.charset.StandardCharsets.UTF_8);
  protected SectionInfo sectInfo_ = new SectionManager(
  	Dialect.Z
  	);
  protected String sectionName_;
  protected int tabSize_ = PrintPropertiesKeys.PROP_TXT_TAB_SIZE_DEFAULT;

  // dialect is a final attribute determined at construction time
  // depending on the extension being used (i.e. decided at XML transformation time).
  // this is useful for fine-tuned error information. If no extension is chosen we 
  // get a compilation error (i.e. final field not assigned).
  private final Dialect dialect_ = 
  						Dialect.Z
    				  // otherwise it will be unassigned, hence a compilation error
    				  ;

    /**
     * The list of parse errors.
     */
    protected List<CztError> errorList_;

    protected PrintException printException_;
    
    // there are more constructors created by java cup, don't put it final!
    private Set<Key<?>> explicitDeps_ = Collections.emptySet();

    Set<Key<?>> getExplicitDeps()
    {
      return Collections.unmodifiableSet(explicitDeps_);
    }
       
    public Unicode2Latex(CztScanner scanner,
                    SectionInfo sectInfo,
                    Properties properties,
                    Collection<? extends Key<?>> explicitDeps)
    {
      super(scanner);
      sectInfo_ = sectInfo;
      
      // TODO: should we have a TermSource? 
      source_ = null;
      
      assert scanner != null && sectInfo_ != null && dialect_ != null;
	    
	  checkDialectConsistency(sectInfo_.getDialect(), scanner.getDialect());
	  
      errorList_ = new ArrayList<CztError>(PerformanceSettings.INITIAL_ARRAY_CAPACITY);
      explicitDeps_ = new HashSet<Key<?>>(explicitDeps);
      printException_ = null;
      CztLogger.getLogger(Unicode2Latex.class).finer("New " + Unicode2Latex.class.getName() + 
      		" parser created for " + getDialect().toString() + ".");
    }
   
  /**
   * Used to scan the unicode provided within markup directives.
   * Whenever a latex markup directives is to printed, a new
   * markup scanner is created that scans the unicode of that
   * markup.  If it is not <code>null</code> we are just
   * printing the definition part of a latex markup directive.
   */
  protected ContextFreeScanner markupScanner_ = null;

  private void checkDialectConsistency(Dialect... vars)
  {
  	for(Dialect d : vars)
  	{
 	  // For pretty printing, some extensions don't have their own, so dialect 
	  // check could/should be less restrictive? TODO?
	  if (!d.isExtensionOf(dialect_))
	  	throw new IllegalArgumentException("Incompatible dialects in " + 
	  		Unicode2Latex.class.getName() + " scanner. " + dialect_.toString() +
	  		" expected, but section manager dialect " + d + " found."); 
  	}
  }
 
  public Dialect getDialect()
  {
  	assert sectInfo_.getDialect().isExtensionOf(dialect_) && 
  		   getCztScanner().getDialect().isExtensionOf(dialect_) :
  		   "dialect_ = " + dialect_ + "; sectInfo.dialect = " + 
  		   sectInfo_.getDialect() + "; scanner.dialect = " +
  		   getCztScanner().getDialect() + ". For Unicode2Latex we allow dialect extensions"; 
	return sectInfo_.getDialect();
  }

  public CztScanner getCztScanner()
  {
  	return (CztScanner)getScanner();
  }

	protected boolean hasErrors()
   {
     for(CztError e : errorList_)
     {
       if (e.getErrorType() == ErrorType.ERROR)
         return true;

     }
     return false;
   }

   protected void raiseErrors() throws PrintException
   {
     assert hasErrors() : "no errors to be raised";
     if (printException_ == null)
     {
       assert source_ == null;
       printException_ = new PrintException(getDialect(), errorList_);
     }
     assert printException_.getErrors().equals(errorList_) : "inconsistent error list";
     Iterator<CztError> it = errorList_.iterator();
     while (it.hasNext())
     {
       CztError e = it.next();
       if (e.getErrorType().equals(ErrorType.WARNING))
       {
         it.remove();
         // TODO: Parser should have a warning manager (!) 
         //       For now, keep warnings as just "show" at the parser level?
         CztLogger.getLogger(Unicode2Latex.class).warning(e.toString());
       }
     }
     it = null;
     // in case there are no more warnings...
     if (hasErrors())
     {
       throw printException_;
     }
   }

  public SectionInfo getSectionInfo()
  {
    return sectInfo_;
  }

  public void setSectionInfo(SectionInfo sectInfo)
  {
    sectInfo_ = sectInfo;
  }

  public void setSectionInfo(SectionInfo sectInfo, String sectionName)
  {
    sectInfo_ = sectInfo;
    sectionName_ = sectionName;
    if (sectInfo_ instanceof SectionManager)
    {
      try {
        tabSize_ = ((SectionManager)sectInfo_).getIntegerProperty(PrintPropertiesKeys.PROP_TXT_TAB_SIZE);
      }
      catch (NumberFormatException e)
      {
        tabSize_ = PrintPropertiesKeys.PROP_TXT_TAB_SIZE_DEFAULT;
      }
    }
  }

  public Writer getWriter()
  {
    return writer_;
  }

  public void setWriter(Writer writer)
  {
    writer_ = writer;
  }

  protected void write(String s)
  {
    try {
      writer_.write(s);
    }
    catch(IOException e) {
    	CztLogger.getLogger(Unicode2Latex.class).severe("Could not write because of IO exception for " 
    	  + dialect_.toString() + " in Unicode2Latex as: " + e.getMessage());
    }
  }

  private String printType(DirectiveType type)
  {
    if (DirectiveType.NONE.equals(type)) return "";
    return type.toString().toLowerCase();
  }

  /**
   * Returns the next token.
   */
  protected Symbol local_next_token()
    throws Exception
  {
    Symbol result = local_next_token_help();
    if (result.sym == Sym.DECORWORD &&
             "section".equals(result.value.toString())) {
      return new Symbol(Sym.SECTION);
    }
    else if (result.sym == Sym.TOKENSEQ ||
             result.sym == Sym.PARA_START) {
      LatexMarkupFunction table = 
        sectInfo_.get(new Key<LatexMarkupFunction>(sectionName_, LatexMarkupFunction.class));
      action_obj.setupMarkupTable(table);
    }
    String logMessage =
      "Next token is (" + symbolMap_.get(result.sym) + ", " + 
      (result.sym != Sym.TEXT ? String.valueOf(result.value) + ", " + 
       (result.value != null ? result.value.getClass().getName() : "null") :
       "...shhh...") + ").";    
    CztLogger.getLogger(Unicode2Latex.class).fine(logMessage);
    return result;
  }

  private Symbol local_next_token_help()
    throws Exception
  {
    if (markupScanner_ != null) {
      // if markupScanner_ is not null, we are just printing the definition
      // part of a latex markup directive.  Therefore, markup_ must be non
      // null (since we can only get the directive from there).
      assert action_obj.markup_ != null;
      Symbol result = markupScanner_.next_token();
      if (result == null || result.sym == Sym.EOF) {
        markupScanner_ = null;
        return new Symbol(Sym.END_MARKUP);
      }
      return result;
    }
    if (action_obj.markup_ != null && action_obj.markup_.hasNext()) {
      Directive directive = (Directive) action_obj.markup_.next();
      final String unicode = directive.getUnicode();
      final char[] charArray = unicode.toCharArray();
      if (unicode.length() == 1) {
        StringBuffer result = new StringBuffer();
        result.append("\n");
        char c = unicode.charAt(0);
        result.append("%%Z" + printType(directive.getDirectiveType())+ "char ");
        result.append(directive.getCommand() + " ");
        result.append("U+");
        String hex = Integer.toHexString(c).toUpperCase();
        for (int i = 0; i < 4 - hex.length(); i++) {
          result.append("0");
        }
        result.append(hex);
        result.append("\n");
        return new Symbol(Sym.CHAR_MARKUP, result.toString());
      }
      else if (charArray.length == 2 &&
               Character.isSurrogatePair(charArray[0], charArray[1])) {
        StringBuffer result = new StringBuffer();
        result.append("\n");
        int codePoint = Character.codePointAt(charArray, 0);
        result.append("%%Z" + printType(directive.getDirectiveType())+ "char ");
        result.append(directive.getCommand() + " ");
        result.append("U-");
        String hex = Integer.toHexString(codePoint).toUpperCase();
        for (int i = 0; i < 8 - hex.length(); i++) {
          result.append("0");
        }
        result.append(hex);
        result.append("\n");
        return new Symbol(Sym.CHAR_MARKUP, result.toString());
      }
      else {
        markupScanner_ = new ContextFreeScanner(new StringReader(unicode));
        markupScanner_.yybegin(ContextFreeScanner.Z);
        DirectiveType type = directive.getDirectiveType();
        if (DirectiveType.NONE.equals(type)) {
          return new Symbol(Sym.WORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.IN.equals(type)) {
          return new Symbol(Sym.INWORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.POST.equals(type)) {
          return new Symbol(Sym.POSTWORD_MARKUP, directive.getCommand());
        }
        else if (DirectiveType.PRE.equals(type)) {
          return new Symbol(Sym.PREWORD_MARKUP, directive.getCommand());
        }
        else {
          throw new CztException("Unexpected directive type " + type + " for " + dialect_.toString() + " in Unicode2Latex parser.");
        }
      }
    }
    else {
      action_obj.markup_ = null;
      Symbol result = getScanner().next_token();
      return result;
    }
  }

  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s =
        ((java_cup.runtime.Symbol) info);
      if (s.left >= 0) {                
        m.append(" in line "+(s.left+1));   
        if (s.right >= 0) m.append(", column "+(s.right + 1));
      }
      String value = String.valueOf(s.value);
      if (s.value instanceof Term &&
          ((Term)s.value).getAnn(LocAnn.class) != null) {  
        value += " at " +
          ((LocAnn)(((Term)s.value).getAnn(LocAnn.class))).toString();
      }
      m.append(", Token(" + symbolMap_.get(s.sym) + "," + value + ")");
    }
    m.append(": " + message);
    System.err.println(m);
  }
  
  protected CztError createPrintError(Symbol token)
  {
    return new ZPrintError(getSectionInfo(), ZPrintMessage.MSG_PRINTSYNTAX_ERROR,
                           new Object[] { toObject(token) },
                           getLocation(token));
  }
  
  protected Object toObject(Symbol symbol)
  {
    if (symbol.value != null &&
        !(symbol.value instanceof LocInfo)) {
      return symbol.value;
    }
    return symbolMap_.get(symbol.sym);
  }

  protected LocInfo getLocation(Symbol symbol)
  {
    if (symbol.value instanceof LocInfo) {
      return (LocInfo) symbol.value;
    }
    if (symbol.value instanceof LocString) {
      LocString s = (LocString) symbol.value;
      return s.getLocation();
    }
    if (symbol.value instanceof LocInt) {
      LocInt i = (LocInt) symbol.value;
      return i.getLocation();
    }
    return new LocInfoImpl(getDialect(), "unknown", symbol.left, symbol.right);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws Exception
  {
    report_error(message, info);
    done_parsing();
    throw new PrintException(dialect_, "Parse error: " +
      String.valueOf(message) + " => " + (info instanceof Symbol ? symbolMap_.get(((Symbol)info).sym) : String.valueOf(info)));
  }

  @Override
  public void unrecovered_syntax_error(Symbol token) throws Exception
  {
    report_fatal_error("Syntax error at token " + symbolMap_.get(token.sym),
                       token);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings("unused")
class CUP$Unicode2Latex$actions {


  private Map<String,ZSect> sections_ =
    new HashMap<String,ZSect>();
  private Map<String,Object> unicode2latexMap_ = null;
  
  SectionInfo sectInfo_;
  Dialect dialect_;
  Source source_;
    				  
  /**
   * An iterator over markup directives to be printed.
   */
  protected Iterator<Directive> markup_ = null;

  private Map<String,Object> addStandardMapping(Map<String,Object> map)
  {
    map.put(ZString.SPOT, resultTT("@", ZString.SPOT));
    map.put("+", resultTT("+", "+"));
    map.put(ZString.MINUS, resultTT("-", ZString.MINUS));
    map.put("*", resultTT("*", "*"));
    map.put("|", resultTT("|", "|"));
    map.put(";", resultFT(";", ";"));
    map.put(",", resultFT(",", ","));
    map.put(ZString.SE, resultFF("_{", ZString.SE));
    map.put(ZString.NW, resultFF("}", ZString.NW));
    map.put(ZString.NE, resultFF("^{", ZString.NE));
    map.put(ZString.SW, resultFF("}", ZString.SW));
    map.put(ZString.LL, resultFF("\\_", ZString.LL));
    map.put("parents", resultFT("\\parents", "parents"));

    return map;
  }

  private String begin(String string)
  {
    return begin(string, "");
  }

  private String begin(String string, String extra)
  {
    return "\\begin{" + string + "}" + extra ; // + "\n";
  }

  

  private String end(String string)
  {
    return "\n\\end{" + string + "}\n\n";
  }

  private LatexCommand concate(LatexCommand c1, LatexCommand c2)
  {
    if (c1 == null || c1.getUnicode().length() <= 0) return c2;
    if (c2 == null || c2.getUnicode().length() <= 0) return c1;
    String latex = c1.getName();
    if (! c1.addRightSpace() && ! c2.addLeftSpace()) {
      final ZChar[] unicode1 = ZChar.toZChars(c1.getUnicode());
      final ZChar[] unicode2 = ZChar.toZChars(c2.getUnicode());
      final ZChar lastChar = unicode1[unicode1.length - 1];
      final ZChar firstChar = unicode2[0];
      final boolean lastIsAlphaOrStroke =
        ZChar.isAlpha(lastChar) || ZChar.isStroke(lastChar);
      final boolean firstIsAlphaOrStrokeOrWordglue =
        ZChar.isAlpha(firstChar) || ZChar.isStroke(firstChar) ||
        ZChar.isWordGlue(firstChar);
      final boolean case1 =
        lastIsAlphaOrStroke && ! firstIsAlphaOrStrokeOrWordglue;
      final boolean lastIsAlphaOrStrokeOrWordglue =
        ZChar.isAlpha(lastChar) || ZChar.isStroke(lastChar) ||
        ZChar.isWordGlue(lastChar);
      final boolean firstIsAlphaOrStroke =
        ZChar.isAlpha(firstChar) || ZChar.isStroke(firstChar);
      final boolean case2 =
        ! lastIsAlphaOrStrokeOrWordglue && firstIsAlphaOrStroke;
      if (case1 || case2) {
        latex += " ";
      }
      else {
        latex += "~";
      }
    } else {
      latex += " ";
    }
    latex += c2.getName();
    String unicode = c1.getUnicode() + " " + c2.getUnicode();
    return
      new LatexCommand(latex, unicode, c1.addLeftSpace(), c2.addRightSpace());
  }

  private LatexCommand toLatex(String s, int line, int column)
    throws PrintException
  {
    assert unicode2latexMap_ != null;
    return uniwordToLatex(s, unicode2latexMap_, line, column);
  }

  /**
   * @czt.todo Write this method properly!
   */
  private String toLatexInSectHead(String s)
  {
    return s.replaceAll("_", "\\\\_");
  }

  private LatexCommand uniwordToLatex(String word, Map<String, Object> latexCommands,
                                      int line, int column)
    throws PrintException
  {
    LatexCommand command = null;
    if (markup_ == null) {
      Object o = latexCommands.get(word);
      if (o instanceof MarkupDirective) {
        MarkupDirective directive = (MarkupDirective) o;
        
        command = new LatexCommand(directive.getCommand(),
                                   directive.getUnicode(),
                                   directive.addLeftSpace() ,
                                   directive.addRightSpace());
      }
      else {
        command = (LatexCommand) o;
      }
      if (command != null) {
        return command;
      }
    }
    StringBuffer latex = new StringBuffer();
    boolean addLSpace = false;
    boolean addRSpace = false;
    
    ZChar[] zchars = ZChar.toZChars(word);
    int charcount = 0;
    for (int i = 0; i < zchars.length; i++) {
      ZChar zchar = zchars[i];
      Object o = latexCommands.get(zchar.toString());
      if (o instanceof MarkupDirective) {
        MarkupDirective directive = (MarkupDirective) o;
        command = new LatexCommand(directive.getCommand(),
                                   directive.getUnicode(),
                                   directive.addLeftSpace(),
                                   directive.addRightSpace());
      }
      else {
        command = (LatexCommand) o;
      }
      if (command != null) {
        if ( (command.addLeftSpace() && i > 0) ||
             (command.addRightSpace() && i + 1 < zchars.length) ) {
          latex.append("{" + command.getName() + "}");
        }
        else {
          if (command.getName().startsWith("\\")) {
            latex.append(command.getName() + " ");
          }
          else {
            latex.append(command.getName());
          }
        }
        addRSpace = command.addRightSpace();
      }
      
      else if (zchar.isAsciiChar()) { // ASCII?
        latex.append(zchar.toString());
      }
      else if (ZChar.PRIME.equals(zchar)) {
        latex.append("'");
      }
      else {
        final int hexBase = 16;
        String hex = Integer.toString(zchar.codePoint(), hexBase);
        String message = "Error while transforming " + word +
          ": Unexpected character " + zchar.toString() +
          " (\\u" + hex + ") in line " + line + " column " +
          charcount + column;
        throw new PrintException(dialect_, message);
      }
      charcount = charcount + zchar.charCount();
    }
    String latexStr = latex.toString();
    //System.out.println("uniwordToLatex(" + word + ") = " + latexStr + " instead of " 
    //		+ latexStr.replaceAll(" ", "") 
    //		
    //		+ " for " + dialect_.toString() + " in Unicode2Latex.");
    //
    return createLatexCommand(latexStr, word, addLSpace, addRSpace);
  }

  // Whilst concate(w1, w2), spaces at edges are considered. For the cases
  // where "keywords" are typeset the same in LaTeX and Unicode, it can be
  // sometimes annoying/desarible to have hard or soft spaces added. That's
  // what "concate(w1,w2)" does. Here, we can influence its behaviour by
  // appending an extra soft space in the case where no such issue arrise?
  private LatexCommand createLatexCommand(String latex, String word, boolean addLeft, boolean addRight)
  {
    boolean isKeyword = false 
                  
                  ;
    addLeft = addLeft || isKeyword;
    addRight = addRight || isKeyword;
    return new LatexCommand(latex, word, addLeft, addRight);
  }


  private void addParentMarkups(ZSect zsect, LatexMarkupFunction table)
  {
    for (Parent parent : zsect.getParent()) {
      String parentName = parent.getWord();
      LatexMarkupFunction parentMarkup = null;
      try {
        parentMarkup = 
          parser.sectInfo_.get(new Key<LatexMarkupFunction>(parentName, LatexMarkupFunction.class));
      }
      catch (CommandException exception) {
        String message = "Cannot get latex markup for parent section " +
          parentName + " caused by " + exception;
        CztLogger.getLogger(Unicode2Latex.class).warning(message);
      }
      if (parentMarkup == null) {
        ZSect parentHeader = sections_.get(parentName);
        if (parentHeader != null) addParentMarkups(parentHeader, table);
      }
      else {
        try {
          table.add(parentMarkup);
        }
        catch (MarkupException e) {
          CztLogger.getLogger(Unicode2Latex.class).warning(e.getMessage());
        }
      }
    }
  }

  protected void setupMarkupTable(ZSect zsect)
  {
    final String sectName = zsect.getName();
    LatexMarkupFunction table = getMarkupTable(sectName);
    if (table == null) {
      table = new LatexMarkupFunction(zsect.getName());
      addParentMarkups(zsect, table);
    }
    assert table != null;
    setupMarkupTable(table);
  }

  /**
   * Returns the LatexMarkupFunction for the given section.
   * Also sets up <code>markup_</code> if a LatexMarkupFunction
   * has been found.
   */
  protected LatexMarkupFunction getMarkupTable(String sectName)
  {
    LatexMarkupFunction table = null;
    try {
      table = 
        parser.sectInfo_.get(new Key<LatexMarkupFunction>(sectName, LatexMarkupFunction.class));
      if (table != null) {
        LatexMarkupPara para =
          table.toAst(new net.sourceforge.czt.z.util.Factory());
        markup_ = para.getDirective().iterator();
      }
      return table;
    }
    catch (CommandException exception) {
      String message = "Cannot get latex markup for section " + sectName +
        " caused by " + exception;
      CztLogger.getLogger(Unicode2Latex.class).warning(message);
    }
    return table;
  }

  protected void setupMarkupTable(LatexMarkupFunction table)
  {
    unicode2latexMap_ = new HashMap<String,Object>();
    if (table != null) {
      for (Iterator<MarkupDirective> iter = table.iterator(); iter.hasNext();) {
        MarkupDirective directive = (MarkupDirective) iter.next();
        final String unicode = directive.getUnicode();
        
        // For Std Z printing, we should not consider FUZZ_TOOLKIT symbols!
        if (!directive.getSection().equals(net.sourceforge.czt.util.Section.FUZZ_TOOLKIT.getName()))
        
           unicode2latexMap_.put(unicode, directive);
      }
    }
    addStandardMapping(unicode2latexMap_);

  }

  protected LatexCommand resultTT(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, true, true);
  }

  protected LatexCommand resultTF(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, true, false);
  }

  protected LatexCommand resultFT(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, false, true);
  }

  protected LatexCommand resultFF(String latex, String unicode)
  {
    return new LatexCommand(latex, unicode, false, false);
  }

  private final Unicode2Latex parser;

  /** Constructor */
  CUP$Unicode2Latex$actions(Unicode2Latex parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Unicode2Latex$do_action(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;

      /* select the action based on the action number */
      switch (CUP$Unicode2Latex$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // indent ::= INDENT 
            {
               CUP$Unicode2Latex$result = case58(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // special ::= indent 
            {
               CUP$Unicode2Latex$result = case57(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // special ::= NL 
            {
               CUP$Unicode2Latex$result = case56(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // specialSeq ::= 
            {
               CUP$Unicode2Latex$result = case55(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // specialSeq ::= specialSeq special 
            {
               CUP$Unicode2Latex$result = case54(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paren ::= RDATA 
            {
               CUP$Unicode2Latex$result = case53(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paren ::= LDATA 
            {
               CUP$Unicode2Latex$result = case52(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paren ::= RBIND 
            {
               CUP$Unicode2Latex$result = case51(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paren ::= LBIND 
            {
               CUP$Unicode2Latex$result = case50(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paren ::= RBRACE 
            {
               CUP$Unicode2Latex$result = case49(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paren ::= LBRACE 
            {
               CUP$Unicode2Latex$result = case48(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paren ::= RSQUARE 
            {
               CUP$Unicode2Latex$result = case47(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paren ::= LSQUARE 
            {
               CUP$Unicode2Latex$result = case46(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paren ::= RPAREN 
            {
               CUP$Unicode2Latex$result = case45(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paren ::= LPAREN 
            {
               CUP$Unicode2Latex$result = case44(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decorword ::= DECORWORD 
            {
               CUP$Unicode2Latex$result = case43(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // schGenerics ::= LSQUARE decorwordList RSQUARE 
            {
               CUP$Unicode2Latex$result = case42(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decorwordList ::= decorword 
            {
               CUP$Unicode2Latex$result = case41(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decorwordList ::= decorwordList decorword 
            {
               CUP$Unicode2Latex$result = case40(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decorwordList ::= decorwordList special 
            {
               CUP$Unicode2Latex$result = case39(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // token ::= WHERE 
            {
               CUP$Unicode2Latex$result = case38(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // token ::= paren 
            {
               CUP$Unicode2Latex$result = case37(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // token ::= NUMERAL 
            {
               CUP$Unicode2Latex$result = case36(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // token ::= NUMSTROKE 
            {
               CUP$Unicode2Latex$result = case35(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // token ::= NEXTSTROKE 
            {
               CUP$Unicode2Latex$result = case34(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // token ::= OUTSTROKE 
            {
               CUP$Unicode2Latex$result = case33(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // token ::= INSTROKE 
            {
               CUP$Unicode2Latex$result = case32(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // token ::= decorword 
            {
               CUP$Unicode2Latex$result = case31(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tokenSeq ::= 
            {
               CUP$Unicode2Latex$result = case30(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tokenSeq ::= tokenSeq special 
            {
               CUP$Unicode2Latex$result = case29(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tokenSeq ::= tokenSeq token 
            {
               CUP$Unicode2Latex$result = case28(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // wordmarkup ::= POSTWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case27(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // wordmarkup ::= PREWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case26(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // wordmarkup ::= INWORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case25(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // wordmarkup ::= WORD_MARKUP 
            {
               CUP$Unicode2Latex$result = case24(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // markup ::= wordmarkup tokenSeq END_MARKUP 
            {
               CUP$Unicode2Latex$result = case23(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // markup ::= CHAR_MARKUP 
            {
               CUP$Unicode2Latex$result = case22(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // zpara ::= GENSCH specialSeq decorword schGenerics tokenSeq END 
            {
               CUP$Unicode2Latex$result = case21(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // zpara ::= GENAX tokenSeq END 
            {
               CUP$Unicode2Latex$result = case20(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // zpara ::= SCH specialSeq decorword tokenSeq END 
            {
               CUP$Unicode2Latex$result = case19(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // zpara ::= AX tokenSeq END 
            {
               CUP$Unicode2Latex$result = case18(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // zpara ::= ZED specialSeq zedPara END 
            {
               CUP$Unicode2Latex$result = case17(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // zpara ::= ZED THEOREM decorword tokenSeq END 
            {
               CUP$Unicode2Latex$result = case16(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sectHeadSeq ::= 
            {
               CUP$Unicode2Latex$result = case15(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sectHeadSeq ::= sectHeadSeq special 
            {
               CUP$Unicode2Latex$result = case14(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sectHeadSeq ::= sectHeadSeq parentsHead 
            {
               CUP$Unicode2Latex$result = case13(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parentsHead ::= DECORWORD 
            {
               CUP$Unicode2Latex$result = case12(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parentsHead ::= PARENTS 
            {
               CUP$Unicode2Latex$result = case11(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // zedPara ::= token tokenSeq 
            {
               CUP$Unicode2Latex$result = case10(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // zedPara ::= SECTION specialSeq DECORWORD sectHeadSeq 
            {
               CUP$Unicode2Latex$result = case9(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // para ::= zpara 
            {
               CUP$Unicode2Latex$result = case8(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // para ::= TEXT 
            {
               CUP$Unicode2Latex$result = case7(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // para ::= markup 
            {
               CUP$Unicode2Latex$result = case6(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // paragraphList ::= 
            {
               CUP$Unicode2Latex$result = case5(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // paragraphList ::= paragraphList para 
            {
               CUP$Unicode2Latex$result = case4(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= PARA_START zpara PARA_END 
            {
               CUP$Unicode2Latex$result = case3(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= TOKENSEQ tokenSeq TOKENSEQ 
            {
               CUP$Unicode2Latex$result = case2(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
               CUP$Unicode2Latex$result = case1(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          /* ACCEPT */
          CUP$Unicode2Latex$parser.done_parsing();
          return CUP$Unicode2Latex$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= paragraphList 
            {
               CUP$Unicode2Latex$result = case0(
                 CUP$Unicode2Latex$act_num,
                 CUP$Unicode2Latex$parser,
                 CUP$Unicode2Latex$stack,
                 CUP$Unicode2Latex$top);
            }
          return CUP$Unicode2Latex$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //indent ::= INDENT 
    java_cup.runtime.Symbol case58(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int indentleft = CUP$Unicode2Latex$stack.peek().left;
		int indentright = CUP$Unicode2Latex$stack.peek().right;
		String indent = (String) CUP$Unicode2Latex$stack.peek().value;
		
                // the amount of space given will generate various t1..n
                int i = indent.length();
                int ts = (i / parser.tabSize_);
                int trail = (i % parser.tabSize_);
                if (trail >= (parser.tabSize_ / 2)) ts++;
                if (ts > 9) ts = 9; else if (ts < 1) ts = 1;
                String latex = indent + "\\t" + ts + "\t";
                RESULT = resultTT(latex, indent);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("indent",16, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //special ::= indent 
    java_cup.runtime.Symbol case57(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand i = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = i;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("special",15, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //special ::= NL 
    java_cup.runtime.Symbol case56(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = resultTT("\\\\\n", ZString.NL);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("special",15, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //specialSeq ::= 
    java_cup.runtime.Symbol case55(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		
                RESULT = null;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("specialSeq",10, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //specialSeq ::= specialSeq special 
    java_cup.runtime.Symbol case54(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sqleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sqright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand sq = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                if (sq != null)
                  RESULT = concate(sq, s);
                else
                  RESULT = s;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("specialSeq",10, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RDATA 
    java_cup.runtime.Symbol case53(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\rdata", ZString.RDATA); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LDATA 
    java_cup.runtime.Symbol case52(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\ldata", ZString.LDATA); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RBIND 
    java_cup.runtime.Symbol case51(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\rblot", ZString.RBIND); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LBIND 
    java_cup.runtime.Symbol case50(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\lblot", ZString.LBIND); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RBRACE 
    java_cup.runtime.Symbol case49(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\}", ZString.RBRACE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LBRACE 
    java_cup.runtime.Symbol case48(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("\\{",  ZString.LBRACE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RSQUARE 
    java_cup.runtime.Symbol case47(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("]", ZString.RSQUARE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LSQUARE 
    java_cup.runtime.Symbol case46(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("[", ZString.LSQUARE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= RPAREN 
    java_cup.runtime.Symbol case45(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT(")", ZString.RPAREN); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paren ::= LPAREN 
    java_cup.runtime.Symbol case44(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultTT("(", ZString.LPAREN); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paren",14, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorword ::= DECORWORD 
    java_cup.runtime.Symbol case43(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		Decorword s = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
                assert s != null;
                if (s instanceof WhereWord) {
                  RESULT = resultTT("\n\\where\n", ZString.NL + ZString.VL);
                }

                else {
                  RESULT = toLatex(s.getName(), sleft, sright);
                }
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorword",17, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //schGenerics ::= LSQUARE decorwordList RSQUARE 
    java_cup.runtime.Symbol case42(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dwlleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwlright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dwl = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
               RESULT = concate(resultTT("[", ZString.LSQUARE),
                          concate(dwl, resultTT("]", ZString.RSQUARE)));
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("schGenerics",12, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorword 
    java_cup.runtime.Symbol case41(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                 RESULT = s;
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorwordList decorword 
    java_cup.runtime.Symbol case40(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dw = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                 RESULT = concate(dw, s);
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //decorwordList ::= decorwordList special 
    java_cup.runtime.Symbol case39(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int dw1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dw1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand dw1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int dw2left = CUP$Unicode2Latex$stack.peek().left;
		int dw2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand dw2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = concate(dw1, dw2);
              /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("decorwordList",13, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= WHERE 
    java_cup.runtime.Symbol case38(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.peek().left;
		int tright = CUP$Unicode2Latex$stack.peek().right;
		Object t = (Object) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = resultTT("\n\\where\n", ZString.NL + ZString.VL); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= paren 
    java_cup.runtime.Symbol case37(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = s; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NUMERAL 
    java_cup.runtime.Symbol case36(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LocInt i = (LocInt) CUP$Unicode2Latex$stack.peek().value;
		
                final String numString = i.getValue().toString();
                RESULT = resultFF(numString, numString);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NUMSTROKE 
    java_cup.runtime.Symbol case35(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int ileft = CUP$Unicode2Latex$stack.peek().left;
		int iright = CUP$Unicode2Latex$stack.peek().right;
		LocInt i = (LocInt) CUP$Unicode2Latex$stack.peek().value;
		
                final String numString = i.getValue().toString();
                String latex = "_" + numString;
                String unicode = ZString.SE + numString + ZString.NW;
                RESULT = resultFF(latex, unicode);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= NEXTSTROKE 
    java_cup.runtime.Symbol case34(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("'", ZString.PRIME); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= OUTSTROKE 
    java_cup.runtime.Symbol case33(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("!", ZString.OUTSTROKE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= INSTROKE 
    java_cup.runtime.Symbol case32(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = resultFF("?", ZString.INSTROKE); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //token ::= decorword 
    java_cup.runtime.Symbol case31(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = s; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("token",8, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= 
    java_cup.runtime.Symbol case30(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= tokenSeq special 
    java_cup.runtime.Symbol case29(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int w1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int w1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand w1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(w1, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //tokenSeq ::= tokenSeq token 
    java_cup.runtime.Symbol case28(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int w1left = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int w1right = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand w1 = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(w1, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("tokenSeq",9, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= POSTWORD_MARKUP 
    java_cup.runtime.Symbol case27(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int postwordleft = CUP$Unicode2Latex$stack.peek().left;
		int postwordright = CUP$Unicode2Latex$stack.peek().right;
		String postword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zpostword " + postword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= PREWORD_MARKUP 
    java_cup.runtime.Symbol case26(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int prewordleft = CUP$Unicode2Latex$stack.peek().left;
		int prewordright = CUP$Unicode2Latex$stack.peek().right;
		String preword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zpreword " + preword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= INWORD_MARKUP 
    java_cup.runtime.Symbol case25(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int inwordleft = CUP$Unicode2Latex$stack.peek().left;
		int inwordright = CUP$Unicode2Latex$stack.peek().right;
		String inword = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zinword " + inword;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //wordmarkup ::= WORD_MARKUP 
    java_cup.runtime.Symbol case24(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wordleft = CUP$Unicode2Latex$stack.peek().left;
		int wordright = CUP$Unicode2Latex$stack.peek().right;
		String word = (String) CUP$Unicode2Latex$stack.peek().value;
		
                RESULT = "%%Zword " + word;
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("wordmarkup",6, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //markup ::= wordmarkup tokenSeq END_MARKUP 
    java_cup.runtime.Symbol case23(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wmleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wmright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		String wm = (String) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                StringBuffer result = new StringBuffer();
                result.append("\n");
                result.append(wm);
                result.append(" ");
                if (s != null) { result.append(s.getName()); }
                result.append("\n");
                parser.write(result.toString());
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("markup",2, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //markup ::= CHAR_MARKUP 
    java_cup.runtime.Symbol case22(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int zcharleft = CUP$Unicode2Latex$stack.peek().left;
		int zcharright = CUP$Unicode2Latex$stack.peek().right;
		String zchar = (String) CUP$Unicode2Latex$stack.peek().value;
		 parser.write(zchar); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("markup",2, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= GENSCH specialSeq decorword schGenerics tokenSeq END 
    java_cup.runtime.Symbol case21(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3).value;
		int genleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int genright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand gen = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("schema", "{" + w.getName() + "}" );
                if (gen == null)
                  throw new PrintException(dialect_, "Generic parameters expected for schema " + w.getName());
                else
                  result += gen.getName() + "\n";
                //if (zsti != null) result += zsti.getName();
                if (s != null) result += s.getName();
                result += end("schema");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-5), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= GENAX tokenSeq END 
    java_cup.runtime.Symbol case20(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("gendef");
                if (s != null) result += s.getName();
                result += end("gendef");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= SCH specialSeq decorword tokenSeq END 
    java_cup.runtime.Symbol case19(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("schema", "{" + w.getName() + "}" );
                //if (zsti != null) 
                //  result += "\n" + zsti.getName();
                //else
                  result += "\n";
                if (s != null) result += s.getName();
                result += end("schema");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-4), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= AX tokenSeq END 
    java_cup.runtime.Symbol case18(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                String result = begin("axdef");
                if (s != null) result += s.getName();
                result += end("axdef");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= ZED specialSeq zedPara END 
    java_cup.runtime.Symbol case17(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zpara ::= ZED THEOREM decorword tokenSeq END 
    java_cup.runtime.Symbol case16(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int wleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).left;
		int wright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).right;
		LatexCommand w = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2).value;
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		
                //System.out.println("DEBUG: Unicode2Latex sees THEOREM " + w.getName());
                String result = begin("theorem", "{" +  w.getName() + "}"
                                          );
                if (s != null) result += s.getName();
                result += end("theorem");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zpara",4, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-4), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= 
    java_cup.runtime.Symbol case15(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		 RESULT = null; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= sectHeadSeq special 
    java_cup.runtime.Symbol case14(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int w2left = CUP$Unicode2Latex$stack.peek().left;
		int w2right = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand w2 = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = concate(s, w2); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //sectHeadSeq ::= sectHeadSeq parentsHead 
    java_cup.runtime.Symbol case13(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      LatexCommand RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int dwleft = CUP$Unicode2Latex$stack.peek().left;
		int dwright = CUP$Unicode2Latex$stack.peek().right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
                if ("parents".equals(dw.getName())) {
                  RESULT = concate(s, resultFF("\\parents", dw.getName()));
                }
                else {
                  String latex = toLatexInSectHead(dw.getName());
                  RESULT = concate(s, resultFF(latex, dw.getName()));
                }
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("sectHeadSeq",11, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //parentsHead ::= DECORWORD 
    java_cup.runtime.Symbol case12(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Decorword RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.peek().left;
		int dwright = CUP$Unicode2Latex$stack.peek().right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.peek().value;
		
   			 	RESULT = dw;
   			 /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("parentsHead",7, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //parentsHead ::= PARENTS 
    java_cup.runtime.Symbol case11(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Decorword RESULT =null;/*3*/
		
   			 	RESULT = new Decorword("parents");
   			 /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("parentsHead",7, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zedPara ::= token tokenSeq 
    java_cup.runtime.Symbol case10(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int tright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand t = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                String result = begin("zed" );
                if (s != null) { result += concate(t,s).getName(); }
                result += end("zed");
                parser.write(result);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zedPara",5, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //zedPara ::= SECTION specialSeq DECORWORD sectHeadSeq 
    java_cup.runtime.Symbol case9(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int dwleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int dwright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		Decorword dw = (Decorword) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		int sleft = CUP$Unicode2Latex$stack.peek().left;
		int sright = CUP$Unicode2Latex$stack.peek().right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.peek().value;
		
                String result = begin("zsection");
                result += "\t \\SECTION " + toLatexInSectHead(dw.getName()) + " ";
                if (s != null) { result += s.getName(); }
                result += end("zsection");
                parser.write(result);
                parser.sectionName_ = dw.getName();
                LatexMarkupFunction table =
                  getMarkupTable(parser.sectionName_);
                setupMarkupTable(table);
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("zedPara",5, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-3), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= zpara 
    java_cup.runtime.Symbol case8(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int zleft = CUP$Unicode2Latex$stack.peek().left;
		int zright = CUP$Unicode2Latex$stack.peek().right;
		String z = (String) CUP$Unicode2Latex$stack.peek().value;
		 RESULT = z; /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= TEXT 
    java_cup.runtime.Symbol case7(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
		int tleft = CUP$Unicode2Latex$stack.peek().left;
		int tright = CUP$Unicode2Latex$stack.peek().right;
		LocString t = (LocString) CUP$Unicode2Latex$stack.peek().value;
		 parser.write(t.getString()); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //para ::= markup 
    java_cup.runtime.Symbol case6(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      String RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("para",3, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paragraphList ::= 
    java_cup.runtime.Symbol case5(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paragraphList",1, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //paragraphList ::= paragraphList para 
    java_cup.runtime.Symbol case4(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("paragraphList",1, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= PARA_START zpara PARA_END 
    java_cup.runtime.Symbol case3(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		
                parser.getWriter().flush();
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= TOKENSEQ tokenSeq TOKENSEQ 
    java_cup.runtime.Symbol case2(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		int sleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int sright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		LatexCommand s = (LatexCommand) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		 
                if (s != null) parser.write(s.getName());
                parser.getWriter().flush();
             /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-2), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //$START ::= input EOF 
    java_cup.runtime.Symbol case1(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).left;
		int start_valright = CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).right;
		Object start_val = (Object) CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1).value;
		RESULT = start_val;/*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$Unicode2Latex$stack.elementAt(CUP$Unicode2Latex$top-1), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
    //input ::= paragraphList 
    java_cup.runtime.Symbol case0(
    int                        CUP$Unicode2Latex$act_num,
    java_cup.runtime.lr_parser CUP$Unicode2Latex$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$Unicode2Latex$stack,
    int                        CUP$Unicode2Latex$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$Unicode2Latex$result;
      Object RESULT =null;/*3*/
		 parser.getWriter().flush(); /*5*/
              CUP$Unicode2Latex$result = parser.getSymbolFactory().newSymbol("input",0, CUP$Unicode2Latex$stack.peek(), CUP$Unicode2Latex$stack.peek(), RESULT); /*6*/
      return CUP$Unicode2Latex$result;/*8*/

    }
}

